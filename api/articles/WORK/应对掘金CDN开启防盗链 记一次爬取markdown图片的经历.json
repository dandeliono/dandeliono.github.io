{"title":"应对掘金CDN开启防盗链 记一次爬取markdown图片的经历","uid":"fcfa6f5ea8dabe903d8fbcda021fdf5f","slug":"WORK/应对掘金CDN开启防盗链 记一次爬取markdown图片的经历","date":"2022-07-29T14:06:36.000Z","updated":"2025-09-30T03:27:03.167Z","comments":true,"path":"api/articles/WORK/应对掘金CDN开启防盗链 记一次爬取markdown图片的经历.json","keywords":"XuGuangSheng","cover":"/covers/cdn-markdown.jpg","content":"<h1 id=\"应对掘金CDN开启防盗链-记一次爬取markdown图片的经历\"><a href=\"#应对掘金CDN开启防盗链-记一次爬取markdown图片的经历\" class=\"headerlink\" title=\"应对掘金CDN开启防盗链 记一次爬取markdown图片的经历\"></a>应对掘金CDN开启防盗链 记一次爬取markdown图片的经历</h1><h2 id=\"使用-markdown-写文章有什么好处\"><a href=\"#使用-markdown-写文章有什么好处\" class=\"headerlink\" title=\"使用 markdown 写文章有什么好处?\"></a>使用 markdown 写文章有什么好处?</h2><ul>\n<li>markdown 是一种纯文本格式 (后缀<code>.md</code>), 写法简单, 不用考虑排版, 输出的文章样式简洁优雅</li>\n<li>markdown 自带开源属性, 一次书写后, 即可在任意支持 markdown 格式的平台发布 (国内支持的平台有, <code>掘金</code>, <code>知乎 (以文档方式导入)</code>, <code>简书 (原本是最好用的, 最近在走下坡路)</code>)</li>\n<li>著名<a href=\"https://cloud.tencent.com/product/coding-cr?from=10680\">代码托管</a>平台 github, 每个代码仓库的说明书<code>README.md</code>就是典型的 markdown 格式</li>\n</ul>\n<h2 id=\"怎么办\"><a href=\"#怎么办\" class=\"headerlink\" title=\"怎么办?\"></a>怎么办?</h2><p>我只好将 md 文档保存到本地, 然后根据 md 保存的源图片信息, 使用爬虫爬取图片到本地, 然后将图片上传到 github 仓库 (github 仓库支持图片上传, 而且不封外链), 将原图片信息替换为 github 仓库保存的图片信息</p>\n<h2 id=\"首先在-github-新建一个名为-test-的仓库-用来存储图片\"><a href=\"#首先在-github-新建一个名为-test-的仓库-用来存储图片\" class=\"headerlink\" title=\"首先在 github 新建一个名为 [test] 的仓库, 用来存储图片\"></a>首先在 github 新建一个名为 [<strong>test</strong>] 的仓库, 用来存储图片</h2><p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/2d1bb6fa1677b6acdc9baf26fe2f4be8.png\"></p>\n<ul>\n<li><p>将仓库 clone 到本地 的 <code>/Users/github</code>文件夹</p>\n<p>cd &#x2F;Users&#x2F;github<br>git clone <a href=\"https://github.com/test.git\">https://github.com/test.git</a></p>\n</li>\n</ul>\n<p>复制</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/fb7f68a62446889226dd178810a60128.png\"></p>\n<p>并保证 在此文件夹下, 有权限 push 到 github,</p>\n<h2 id=\"将-github-已有的-md-文章对应的仓库下载到本地-以星聚弃疗榜为例\"><a href=\"#将-github-已有的-md-文章对应的仓库下载到本地-以星聚弃疗榜为例\" class=\"headerlink\" title=\"将 github 已有的. md 文章对应的仓库下载到本地 (以星聚弃疗榜为例)\"></a>将 github 已有的. md 文章对应的仓库下载到本地 (以星聚弃疗榜为例)</h2><pre><code>git clone https://github.com/StarsAndClown.git\n</code></pre>\n<p>复制</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/cb320d59bae337e0f88bd7148544ff40.png\"></p>\n<h2 id=\"编写-python-脚本-md-images-upload-py\"><a href=\"#编写-python-脚本-md-images-upload-py\" class=\"headerlink\" title=\"编写 python 脚本 md_images_upload.py\"></a>编写 python 脚本 <code>md_images_upload.py</code></h2><p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/ea17c6fb2e955fe260c65e6b471ae6e1.png\"></p>\n<p>此脚本:</p>\n<ul>\n<li>能搜索当前目录下所有 md 文件, 将每个 md 中的图片爬取到本地, 存放到<code>/Users/github/test/images</code>目录;</li>\n<li>图片爬取完成后, 自动将<code>/Users/github/test/images</code>目录下的所有图片, push 到 Github</li>\n<li>使用 Github 中的新图片地址, 替换原图片地址</li>\n<li>大功告成<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> imghdr</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> shutil</span><br><span class=\"line\"><span class=\"keyword\">import</span> git</span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 用户名</span></span><br><span class=\"line\">user_name = <span class=\"string\">&quot;user&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">## 仓库名</span></span><br><span class=\"line\">github_repository = <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## git仓库在本机的位置</span></span><br><span class=\"line\">git_repository_folder = <span class=\"string\">&quot;/Users/github/test&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 存放图片的git文件夹路径</span></span><br><span class=\"line\">git_images_folder = <span class=\"string\">&quot;/Users/github/test/images&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 设置忽略目录</span></span><br><span class=\"line\">ignore_dir_list=[<span class=\"string\">&quot;.git&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置用户代理头</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 设置用户代理头(为狼披上羊皮)</span></span><br><span class=\"line\">    <span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据输入的url输入md5命名</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_name</span>(<span class=\"params\">src_name</span>):</span><br><span class=\"line\">    src_name = src_name.encode(<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">    s = hashlib.md5()</span><br><span class=\"line\">    s.update(src_name)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取当前目录下所有md文件</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_md_files</span>(<span class=\"params\">md_dir</span>):</span><br><span class=\"line\">    md_files = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> <span class=\"built_in\">sorted</span>(os.walk(md_dir)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">            <span class=\"comment\"># 获取.md结尾的文件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(file.endswith(<span class=\"string\">&quot;.md&quot;</span>)):</span><br><span class=\"line\">                file_path = os.path.join(root, file)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(file_path)</span><br><span class=\"line\">                <span class=\"comment\">#忽略排除目录</span></span><br><span class=\"line\">                need_append = <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> ignore_dir <span class=\"keyword\">in</span> ignore_dir_list:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(ignore_dir <span class=\"keyword\">in</span> file_path.split(<span class=\"string\">&quot;/&quot;</span>) == <span class=\"literal\">True</span>):</span><br><span class=\"line\">                        need_append = <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(need_append == <span class=\"number\">0</span>):</span><br><span class=\"line\">                    md_files.append(file_path)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> md_files</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取网络图片</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_http_image</span>(<span class=\"params\">image_url</span>):</span><br><span class=\"line\">    image_info = &#123;<span class=\"string\">&quot;image_url&quot;</span>: <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;new_image_url&quot;</span>: <span class=\"string\">&quot;&quot;</span>&#125;</span><br><span class=\"line\">    file_uuid_name = create_name(image_url)</span><br><span class=\"line\">    image_data = requests.get(image_url, headers=headers).content</span><br><span class=\"line\">    <span class=\"comment\"># 创建临时文件</span></span><br><span class=\"line\">    tmp_new_image_path_and_name = os.path.join(git_images_folder, file_uuid_name)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(tmp_new_image_path_and_name, <span class=\"string\">&quot;wb+&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(image_data)</span><br><span class=\"line\">    img_type = imghdr.what(tmp_new_image_path_and_name)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(img_type == <span class=\"literal\">None</span>):</span><br><span class=\"line\">        img_type = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        img_type = <span class=\"string\">&quot;.&quot;</span>+img_type</span><br><span class=\"line\">    <span class=\"comment\"># 生成新的名字加后缀</span></span><br><span class=\"line\">    new_image_path_and_name = tmp_new_image_path_and_name+img_type</span><br><span class=\"line\">    <span class=\"comment\"># 重命名图片</span></span><br><span class=\"line\">    os.rename(tmp_new_image_path_and_name, new_image_path_and_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    new_image_url = <span class=\"string\">&quot;https://raw.githubusercontent.com/&quot;</span>+ user_name + <span class=\"string\">&quot;/&quot;</span> +github_repository+<span class=\"string\">&quot;/master/&quot;</span>+git_images_folder.split(<span class=\"string\">&quot;/&quot;</span>)[-<span class=\"number\">1</span>]+<span class=\"string\">&quot;/&quot;</span>+new_image_path_and_name.split(<span class=\"string\">&quot;/&quot;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    image_info = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;image_url&quot;</span>: image_url,</span><br><span class=\"line\">        <span class=\"string\">&quot;new_image_url&quot;</span>: new_image_url</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(image_info)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> image_info</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取本地图片</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_local_image</span>(<span class=\"params\">image_url</span>):</span><br><span class=\"line\">    image_info = &#123;<span class=\"string\">&quot;image_url&quot;</span>: <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;new_image_url&quot;</span>: <span class=\"string\">&quot;&quot;</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 创建文件名</span></span><br><span class=\"line\">        file_uuid_name = uuid.uuid4().<span class=\"built_in\">hex</span></span><br><span class=\"line\">        <span class=\"comment\"># 获取图片类型</span></span><br><span class=\"line\">        img_type = image_url.split(<span class=\"string\">&quot;.&quot;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"comment\"># 新的图片名和文件后缀</span></span><br><span class=\"line\">        image_name = file_uuid_name+<span class=\"string\">&quot;.&quot;</span>+img_type</span><br><span class=\"line\">        <span class=\"comment\"># 新的图片路径和名字</span></span><br><span class=\"line\">        new_image_path_and_name = os.path.join(git_images_folder, image_name);</span><br><span class=\"line\">        shutil.copy(image_url, new_image_path_and_name)</span><br><span class=\"line\">        <span class=\"comment\"># 生成url</span></span><br><span class=\"line\">        new_image_url = <span class=\"string\">&quot;https://raw.githubusercontent.com/&quot;</span>+ user_name + <span class=\"string\">&quot;/&quot;</span> +github_repository+<span class=\"string\">&quot;/master/&quot;</span>+git_images_folder.split(<span class=\"string\">&quot;/&quot;</span>)[-<span class=\"number\">1</span>]+<span class=\"string\">&quot;/&quot;</span>+new_image_path_and_name.split(<span class=\"string\">&quot;/&quot;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"comment\"># 图片信息</span></span><br><span class=\"line\">        image_info = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;image_url&quot;</span>: image_url,</span><br><span class=\"line\">            <span class=\"string\">&quot;new_image_url&quot;</span>: new_image_url</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(image_info)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> image_info</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> image_info</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 爬取单个md文件内的图片</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_images_from_md_file</span>(<span class=\"params\">md_file</span>):</span><br><span class=\"line\">    md_content = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    image_info_list = []</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(md_file, <span class=\"string\">&quot;r+&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        md_content = f.read()</span><br><span class=\"line\">        image_urls = re.findall(<span class=\"string\">r&quot;!\\[.*?\\]\\((.*?)\\)&quot;</span>, md_content)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> image_url <span class=\"keyword\">in</span> image_urls:</span><br><span class=\"line\">            <span class=\"comment\"># 处理本地图片</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(image_url.startswith(<span class=\"string\">&quot;http&quot;</span>) == <span class=\"literal\">False</span>):</span><br><span class=\"line\">                image_info = get_local_image(image_url)</span><br><span class=\"line\">                image_info_list.append(image_info)</span><br><span class=\"line\">            <span class=\"comment\"># 处理网络图片</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 不爬取svg</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(image_url.startswith(<span class=\"string\">&quot;https://img.shields.io&quot;</span>) == <span class=\"literal\">False</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                        image_info = get_http_image(image_url)</span><br><span class=\"line\">                        image_info_list.append(image_info)</span><br><span class=\"line\">                    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(image_url, <span class=\"string\">&quot;无法爬取, 跳过!&quot;</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> image_info <span class=\"keyword\">in</span> image_info_list:</span><br><span class=\"line\">            md_content = md_content.replace(image_info[<span class=\"string\">&quot;image_url&quot;</span>], image_info[<span class=\"string\">&quot;new_image_url&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;替换完成后::&quot;</span>, md_content);</span><br><span class=\"line\"></span><br><span class=\"line\">        md_content = md_content</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(md_file, <span class=\"string\">&quot;w+&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(md_content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">git_push_to_origin</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 通过git提交到github仓库</span></span><br><span class=\"line\">    repo = git.Repo(git_repository_folder)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;初始化成功&quot;</span>, repo)</span><br><span class=\"line\">    index = repo.index</span><br><span class=\"line\">    index.add([<span class=\"string\">&quot;images/&quot;</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;add成功&quot;</span>)</span><br><span class=\"line\">    index.commit(<span class=\"string\">&quot;新增图片1&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;commit成功&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 获取远程仓库</span></span><br><span class=\"line\">    remote = repo.remote()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;远程仓库&quot;</span>, remote);</span><br><span class=\"line\">    remote.push()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;push成功&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(os.path.exists(git_images_folder)):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        os.mkdir(git_images_folder)</span><br><span class=\"line\">    <span class=\"comment\"># 获取本目录下所有md文件</span></span><br><span class=\"line\">    md_files = get_md_files(<span class=\"string\">&quot;./&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将md文件依次爬取</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> md_file <span class=\"keyword\">in</span> md_files:</span><br><span class=\"line\">      <span class=\"comment\"># 爬取单个md文件内的图片</span></span><br><span class=\"line\">      get_images_from_md_file(md_file)</span><br><span class=\"line\">    </span><br><span class=\"line\">    git_push_to_origin()</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>几个优化点:</p></blockquote>\n<ul>\n<li>支持 md 引用本地目录图片的爬取 (以后就可以在本地编写 markdown 文件了, 编写完成后, 运行上述脚本, 即可自动将 md 引用的本地图片上传到 github, 同时本地图片的引用地址被 github 在线图片地址所取代)</li>\n<li>为防止图片重名, 使用 uuid 重命名图片名称 (后面发现使用 uuid 会导致相同的网络图片反复爬取保存, 所以后面使用网络图片的 url 地址对应的 md5 码为新名称, 即可防止生成内容相同, 名称不同的图片)</li>\n<li>爬取本地图片, 依然使用 uuid 重名防止重复 (个人命名可能会反复使用<code>001.png</code>, <code>002.png</code>等常用名称)</li>\n<li>对爬取的图片, 进行了类型判断, 自动补充图片扩展名</li>\n</ul>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><ol>\n<li>安装 python3</li>\n</ol>\n<p>安装方法见 Python 数据挖掘 环境搭建</p>\n<ol>\n<li>将脚本<code>md_images_upload.py</code>放到<code>/Users/github/test</code>目录 (这里目录可以按照自己的来, 但脚本顶部的几行参数也要修改)</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/81ffc4a14a0a2c960018247152aa2b29.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/8ea32884f9cfb44f485a901538a224cc.png\"></p>\n<ol>\n<li><p>在命令行安装相关依赖包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install requests</span><br><span class=\"line\">pip3 install gitpython</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从命令行进入<code>/Users/github/test</code></p>\n<p>cd &#x2F;Users&#x2F;github&#x2F;test</p>\n</li>\n</ol>\n<p>复制</p>\n<ol>\n<li><p>运行脚本</p>\n<p>python3 md_images_upload.py</p>\n</li>\n</ol>\n<p>复制</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/553c0af02de60f21f8edabeb4da0f028.gif\"></p>\n<p>这里我已经是第二次替换图片了, 所以上面的动图显示的原图片也是 GitHub 的图片, 说明脚本第一次已完全替换成功~</p>\n<p>图片又可以显示了</p>\n","text":"应对掘金CDN开启防盗链 记一次爬取markdown图片的经历使用 markdown 写文章有什么好处? markdown 是一种纯文本格式 (后缀.md), ...","permalink":"/post/WORK/应对掘金CDN开启防盗链 记一次爬取markdown图片的经历","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"github","slug":"github","count":1,"path":"api/categories/github.json"},{"name":"WORK","slug":"github/WORK","count":1,"path":"api/categories/github/WORK.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"png","slug":"png","count":2,"path":"api/tags/png.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BA%94%E5%AF%B9%E6%8E%98%E9%87%91CDN%E5%BC%80%E5%90%AF%E9%98%B2%E7%9B%97%E9%93%BE-%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%88%AC%E5%8F%96markdown%E5%9B%BE%E7%89%87%E7%9A%84%E7%BB%8F%E5%8E%86\"><span class=\"toc-text\">应对掘金CDN开启防盗链 记一次爬取markdown图片的经历</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-markdown-%E5%86%99%E6%96%87%E7%AB%A0%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">使用 markdown 写文章有什么好处?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%8E%E4%B9%88%E5%8A%9E\"><span class=\"toc-text\">怎么办?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A6%96%E5%85%88%E5%9C%A8-github-%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%90%8D%E4%B8%BA-test-%E7%9A%84%E4%BB%93%E5%BA%93-%E7%94%A8%E6%9D%A5%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87\"><span class=\"toc-text\">首先在 github 新建一个名为 [test] 的仓库, 用来存储图片</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%86-github-%E5%B7%B2%E6%9C%89%E7%9A%84-md-%E6%96%87%E7%AB%A0%E5%AF%B9%E5%BA%94%E7%9A%84%E4%BB%93%E5%BA%93%E4%B8%8B%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0-%E4%BB%A5%E6%98%9F%E8%81%9A%E5%BC%83%E7%96%97%E6%A6%9C%E4%B8%BA%E4%BE%8B\"><span class=\"toc-text\">将 github 已有的. md 文章对应的仓库下载到本地 (以星聚弃疗榜为例)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99-python-%E8%84%9A%E6%9C%AC-md-images-upload-py\"><span class=\"toc-text\">编写 python 脚本 md_images_upload.py</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">使用方法</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"使用K3S+ Kilo部署安全多区云原生ARM集群，支持nginx-ingress及velero备份","uid":"36fd7c99867f3cc13d5235c8e240e440","slug":"OCI/使用K3S+ Kilo部署安全多区云原生ARM集群，支持nginx-ingress及velero备份","date":"2022-07-30T12:39:51.000Z","updated":"2025-09-30T03:26:59.293Z","comments":true,"path":"api/articles/OCI/使用K3S+ Kilo部署安全多区云原生ARM集群，支持nginx-ingress及velero备份.json","keywords":"XuGuangSheng","cover":"/covers/k3s-kiloarmnginx-ingressvelero.jpg","text":"使用K3S+ Kilo部署安全多区云原生ARM集群，支持nginx-ingress及velero备份申请 Oracle甲骨文的Arm实例已经很久了，甲骨文的配置...","permalink":"/post/OCI/使用K3S+ Kilo部署安全多区云原生ARM集群，支持nginx-ingress及velero备份","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"velero","slug":"velero","count":1,"path":"api/categories/velero.json"},{"name":"OCI","slug":"velero/OCI","count":1,"path":"api/categories/velero/OCI.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"server","slug":"server","count":3,"path":"api/tags/server.json"},{"name":"ingress","slug":"ingress","count":1,"path":"api/tags/ingress.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"使用线程池时候当程序结束时候记得调用shutdown关闭线程池","uid":"c154332e2066fa4ee3ef3036412a15b5","slug":"JAVA/使用线程池时候当程序结束时候记得调用shutdown关闭线程池","date":"2022-07-26T10:03:32.000Z","updated":"2025-09-30T03:26:25.895Z","comments":true,"path":"api/articles/JAVA/使用线程池时候当程序结束时候记得调用shutdown关闭线程池.json","keywords":"XuGuangSheng","cover":"/covers/shutdown.jpg","text":"使用线程池时候当程序结束时候记得调用shutdown关闭线程池使用线程池时候当程序结束时候记得调用 shutdown 关闭线程池日常开发中为了便于线程的有效复用...","permalink":"/post/JAVA/使用线程池时候当程序结束时候记得调用shutdown关闭线程池","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"shutdown","slug":"shutdown","count":1,"path":"api/categories/shutdown.json"},{"name":"JAVA","slug":"shutdown/JAVA","count":1,"path":"api/categories/shutdown/JAVA.json"}],"tags":[{"name":"JVM","slug":"JVM","count":6,"path":"api/tags/JVM.json"},{"name":"使用线程池时候当程序结束时候记得调用","slug":"使用线程池时候当程序结束时候记得调用","count":1,"path":"api/tags/使用线程池时候当程序结束时候记得调用.json"},{"name":"关闭线程池","slug":"关闭线程池","count":1,"path":"api/tags/关闭线程池.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}