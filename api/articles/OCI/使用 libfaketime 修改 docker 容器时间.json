{"title":"使用 libfaketime 修改 docker 容器时间","uid":"9c243b726e495059eca1f4eed1c4f935","slug":"OCI/使用 libfaketime 修改 docker 容器时间","date":"2023-12-14T14:07:31.000Z","updated":"2025-09-30T03:26:58.187Z","comments":true,"path":"api/articles/OCI/使用 libfaketime 修改 docker 容器时间.json","keywords":"XuGuangSheng","cover":"/covers/libfaketime-docker.jpg","content":"<h1 id=\"使用-libfaketime-修改-docker-容器时间\"><a href=\"#使用-libfaketime-修改-docker-容器时间\" class=\"headerlink\" title=\"使用 libfaketime 修改 docker 容器时间\"></a>使用 libfaketime 修改 docker 容器时间</h1><h2 id=\"容器的时间问题：\"><a href=\"#容器的时间问题：\" class=\"headerlink\" title=\"容器的时间问题：\"></a><a href=\"#%E5%AE%B9%E5%99%A8%E7%9A%84%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98%EF%BC%9A\" title=\"容器的时间问题：\"></a>容器的时间问题：</h2><p>如果想要直接进入容器，使用<code>date -s</code>修改日期，则会出现一个</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>的错误，而且也不会成功。</p>\n<p>这是由于docker容器的隔离是基于Linux的Capability机制实现的, Linux的Capability机制允许你将超级用户相关的高级权限划分成为不同的小单元。目前Docker容器默认只用到了以下的Capability.</p>\n<ul>\n<li>CHOWN,</li>\n<li>DAC_OVERRIDE,</li>\n<li>FSETID,</li>\n<li>FOWNER,</li>\n<li>MKNOD,</li>\n<li>NET_RAW,</li>\n<li>SETGID,</li>\n<li>SETUID,</li>\n<li>SETFCAP,</li>\n<li>SETPCAP,</li>\n<li>NET_BIND_SERVICE,</li>\n<li>SYS_CHROOT,</li>\n<li>KILL,</li>\n<li>AUDIT_WRITE</li>\n</ul>\n<p>而要修改系统时间需要有SYS_TIME权限。使用 <code>--cap-add</code>, <code>--cap-drop</code> 可以添加或禁用特定的权限。<code>--privileged</code>参数也可以达到开放权限的作用, 与<code>--cap-add</code>的区别就是, <code>--privileged</code>是将所有权限给容器.</p>\n<p>docker使用<code>--privileged</code>, <code>--cap-add</code>, <code>--cap-drop</code> 来对容器本身的能力进行开放或限制。</p>\n<p>那么使用如下命令就可以直接改变时间了：  </p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>接着进入容器实行date命令修改时间，如果没有修改成功，，那么可能就是因为宿主机做了共享主机的localtime（比如laradock就做了）：  </p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果修改成功一会就又恢复了，那么就可能要查看一下宿主机是否做了定时校准的任务。</p>\n<p>但是如此执行之后，那就是容器时间变更为5月28日之后，宿主机的时间也跟着变更了，<br>因为上边操作的 <code>--cap-add SYS_TIME</code>是为了将宿主机的内核时间挂载进来与容器共享，因此容器时间更改了，宿主机时间也会跟着更改。</p>\n<h2 id=\"使用-libfaketime\"><a href=\"#使用-libfaketime\" class=\"headerlink\" title=\"使用 libfaketime\"></a><a href=\"#%E4%BD%BF%E7%94%A8-libfaketime\" title=\"使用 libfaketime\"></a>使用 libfaketime</h2><p>由此可见，直接修改docker容器的时间是比较危险的，所以选择如下方案。</p>\n<p>首先在宿主机上安装：libfaketime  </p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后，把安装后的库文件拷贝到docker中：  </p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后再进入docker中执行命令改变环境变量：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>改变环境变量之后，再执行脚本会发现时间已经改变。若想要恢复，直接把环境变量修改为空即可：  </p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>LD_PRELOAD是Linux系统的一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。</p></blockquote>\n<p>如果需要修改容器中的各种web服务的时间，只需要在改变环境变量之后，重启服务即可。但是注意，镜像必须使用比较基础的镜像，因为如果直接使用服务的镜像（例如php镜像），会在重启的时候，整个容器会退出，faketime就会修改无效。</p>\n<p>例如：  </p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改-faketime-步骤\"><a href=\"#修改-faketime-步骤\" class=\"headerlink\" title=\"修改 faketime 步骤\"></a><a href=\"#%E4%BF%AE%E6%94%B9-faketime-%E6%AD%A5%E9%AA%A4\" title=\"修改 faketime 步骤\"></a>修改 faketime 步骤</h2><p>第一步：需要通过dockerfile把libfaketime拷贝部分制作到基础镜像当中。<br>第二步：通过<code>uuid</code>来寻找要执行的pod。<br>第三步：修改pod的yaml文件（容器启动），把</p>\n<p><code>export LD_PRELOAD=/usr/local/lib/libfaketime.so.1 FAKETIME=&quot;-5d&quot;</code></p>\n<p>加入yaml，重启pod（会自动重启相应服务php、kong、nginx、go等），此时faketime生效。</p>\n","text":"使用 libfaketime 修改 docker 容器时间容器的时间问题：如果想要直接进入容器，使用date -s修改日期，则会出现一个 1 的错误，而且也不会...","permalink":"/post/OCI/使用 libfaketime 修改 docker 容器时间","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"使用","slug":"使用","count":2,"path":"api/categories/使用.json"},{"name":"OCI","slug":"使用/OCI","count":1,"path":"api/categories/使用/OCI.json"}],"tags":[{"name":"docker","slug":"docker","count":4,"path":"api/tags/docker.json"},{"name":"libfaketime","slug":"libfaketime","count":1,"path":"api/tags/libfaketime.json"},{"name":"cap","slug":"cap","count":1,"path":"api/tags/cap.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-libfaketime-%E4%BF%AE%E6%94%B9-docker-%E5%AE%B9%E5%99%A8%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">使用 libfaketime 修改 docker 容器时间</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E7%9A%84%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98%EF%BC%9A\"><span class=\"toc-text\">容器的时间问题：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-libfaketime\"><span class=\"toc-text\">使用 libfaketime</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9-faketime-%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">修改 faketime 步骤</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"ElasticSearch里面如何分组后根据sum值排序","uid":"4483f94e0db17009da0543d6cde026da","slug":"MIDDLEWARE/ElasticSearch里面如何分组后根据sum值排序","date":"2024-01-09T13:55:15.000Z","updated":"2025-09-30T03:26:45.365Z","comments":true,"path":"api/articles/MIDDLEWARE/ElasticSearch里面如何分组后根据sum值排序.json","keywords":"XuGuangSheng","cover":"/covers/elasticsearchsum.jpg","text":"ElasticSearch里面如何分组后根据sum值排序ElasticSearch里面的聚合机制非常灵活和强大，今天我们来看下如何在ElasticSearch里...","permalink":"/post/MIDDLEWARE/ElasticSearch里面如何分组后根据sum值排序","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"ElasticSearch","slug":"ElasticSearch","count":1,"path":"api/categories/ElasticSearch.json"},{"name":"MIDDLEWARE","slug":"ElasticSearch/MIDDLEWARE","count":1,"path":"api/categories/ElasticSearch/MIDDLEWARE.json"}],"tags":[{"name":"sum","slug":"sum","count":1,"path":"api/tags/sum.json"},{"name":"然后","slug":"然后","count":1,"path":"api/tags/然后.json"},{"name":"里面如何分组后根据","slug":"里面如何分组后根据","count":1,"path":"api/tags/里面如何分组后根据.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Linux 系统监控工具 atop","uid":"82b3a52976f247e94d00aebe443d97b1","slug":"LINUX/Linux 系统监控工具 atop","date":"2023-12-13T09:25:22.000Z","updated":"2025-09-30T03:26:34.036Z","comments":true,"path":"api/articles/LINUX/Linux 系统监控工具 atop.json","keywords":"XuGuangSheng","cover":"/covers/linux-atop.jpg","text":"Linux 系统监控工具 atop系统监控是运维工作中重要的一环，本文以 atop 工具为例来介绍系统的重要监控项。 atop可以使用yum或apt包管理器进行...","permalink":"/post/LINUX/Linux 系统监控工具 atop","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"CPU","slug":"CPU","count":5,"path":"api/categories/CPU.json"},{"name":"LINUX","slug":"CPU/LINUX","count":4,"path":"api/categories/CPU/LINUX.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"atop","slug":"atop","count":2,"path":"api/tags/atop.json"},{"name":"img","slug":"img","count":1,"path":"api/tags/img.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}