{"title":"Elasticsearch 数值类型也能存String 类型问题分析","uid":"e31577451631f8a2adc07bcea9f94111","slug":"MIDDLEWARE/Elasticsearch 数值类型也能存String 类型问题分析","date":"2023-11-22T10:47:50.000Z","updated":"2025-09-30T03:26:45.603Z","comments":true,"path":"api/articles/MIDDLEWARE/Elasticsearch 数值类型也能存String 类型问题分析.json","keywords":"XuGuangSheng","cover":"/covers/elasticsearch-string.jpg","content":"<h1 id=\"Elasticsearch-数值类型也能存String-类型问题分析\"><a href=\"#Elasticsearch-数值类型也能存String-类型问题分析\" class=\"headerlink\" title=\"Elasticsearch 数值类型也能存String 类型问题分析\"></a>Elasticsearch 数值类型也能存String 类型问题分析</h1><p>最近经常遇到遇到某个客户问数值类型的字段也能存字符串，或者说已经将字段类型设置成了float，但是实际存储的仍然是字符串，该如何解决，今天花点时间我们来梳理整个流程。</p>\n<p>1,定义一个索引mapping,并指定类型为float.单精度浮点型</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT <span class=\"keyword\">nginxindex</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;mappings&quot;</span><span class=\"operator\">:</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;properties&quot;</span><span class=\"operator\">:</span> &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;price&quot;</span><span class=\"operator\">:</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;type&quot;</span><span class=\"operator\">:</span> <span class=\"string\">&quot;float&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2，写入几个文档，看看效果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST nginxindex/_doc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;price&quot;</span>:4.68        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">POST nginxindex/_doc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;price&quot;</span>: <span class=\"string\">&quot;4.69&quot;</span>      </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">POST nginxindex/_doc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;price&quot;</span>: <span class=\"string\">&quot;free for charge&quot;</span>    </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>3，对比结果</p>\n<p>第一个，正常写入，有返回，</p>\n<p>第二个，正常写入，有返回，</p>\n<p>第三个，无法写入，报错提示。提示如下图所示</p>\n<p><img src=\"https://ask.qcloudimg.com/developer-images/article/6899228/so1tugcuxd.png\"></p>\n<p>第三个报错</p>\n<p>这个报错大概就是无法解析字符串内容到floa类型的type.这个比较容易理解，但是第二个文档那个字符串类型数字又能写入，这又是为何？那么这也是本节要关注的内容，也是前面客户需要解决的问题：</p>\n<p>用户在存储字符串形式的数字，无论是那种数字类型，都能默认识别并存储，那么最终客户在终端搜索的时候会出现很多返回结果数量不一致的问题。这个是什么原因呢？我们看一下官网,翻译如下：</p>\n<p>数据并不总是干净的。根据它的生成方式，一个数字可能在<a href=\"https://cloud.tencent.com/developer/techpedia/1569?from_column=20065&from=20065\">JSON</a>体中呈现为一个真正的JSON数字，例如。5，但它也可能呈现为一个字符串，例如。“5”。或者，一个应该是整数的数字可以呈现为浮点，例如5.0，甚至“5.0”。</p>\n<p>需要配置强制程序来清理脏值，以适应字段的数据类型。具体参考如下链接：</p>\n<p><a href=\"https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.elastic.co/guide/en/elasticsearch/reference/current/coerce.html%23coerce\">https://www.elastic.co/guide/en/elasticsearch/reference/current/coerce.html#coerce</a></p>\n<p>解决方案：就是在索引的mapping字段属性定义里，加一个<strong>coerce参数，并将其值设置为false.默认为true.</strong></p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT <span class=\"keyword\">nginxnewindex</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;mappings&quot;</span><span class=\"operator\">:</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;properties&quot;</span><span class=\"operator\">:</span> &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;price&quot;</span><span class=\"operator\">:</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;type&quot;</span><span class=\"operator\">:</span> <span class=\"string\">&quot;float&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;coerce&quot;</span><span class=\"operator\">:</span> <span class=\"literal\">false</span>        </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">POST nginxnewindex<span class=\"operator\">/</span><span class=\"keyword\">_doc</span>        </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;price&quot;</span><span class=\"operator\">:</span>4.68</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">POST nginxnewindex<span class=\"operator\">/</span><span class=\"keyword\">_doc</span>      </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;price&quot;</span><span class=\"operator\">:</span> <span class=\"string\">&quot;4.69&quot;</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>结果会发现，第三个文档，写入报错，截图如下：</p>\n<p><img src=\"https://ask.qcloudimg.com/developer-images/article/6899228/bdd8zg04dh.png\"></p>\n<p>字段解析错误</p>\n<p>错误提示也是说你定义一个float类型的字段，但是写入的是字符串。</p>\n<p>那么这样的话，用户就能第一时间发现写入报错信息，及时扭转前端写入格式，以防后续影响业务了。那么这就是这个严格匹配参数的作用。</p>\n<p>mapping字段类型一旦定义，就不能再修改。那么实际用户生产环境，新数据可以通过修改新索引mapping参数解决。那么对于存量的索引数据，如何实现平滑更改呢。没错，大家想到的是reindex.再造索引。还是以本文前面报错的索引为列，如何实现字符串类型的float转换为纯float数字类型。</p>\n<p>先看源索引的文档类型，price是字符串类型，后面要实现更改为float.</p>\n<p><img src=\"https://ask.qcloudimg.com/developer-images/article/6899228/o83gqflqj3.png\"></p>\n<p>1，先创建一个目标索引，指定mapping参数</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT <span class=\"keyword\">nginxnewindex2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;mappings&quot;</span><span class=\"operator\">:</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;properties&quot;</span><span class=\"operator\">:</span> &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;price&quot;</span><span class=\"operator\">:</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;type&quot;</span><span class=\"operator\">:</span> <span class=\"string\">&quot;float&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;coerce&quot;</span><span class=\"operator\">:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2, 执行reindex拷贝，这里有问题，<strong>注意</strong></p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST <span class=\"keyword\">_reindex</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;source&quot;</span><span class=\"operator\">:</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;index&quot;</span><span class=\"operator\">:</span> <span class=\"string\">&quot;nginxindex&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;dest&quot;</span><span class=\"operator\">:</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;index&quot;</span><span class=\"operator\">:</span> <span class=\"string\">&quot;nginxnewindex2&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>返回报错</strong>如下：</p>\n<p><img src=\"https://ask.qcloudimg.com/developer-images/article/6899228/0psjo6egu5.png\"></p>\n<p>reindex索引报错</p>\n<p>这个错误大家都很明白了，就是写入的是字符串，但是实际目标存储的字段类型是数字类型，解析失败。reindex也中断。</p>\n<p>因此，reindex在某些场景下是有限制的。两个索引mapping不一致的问题，会导致索引同步失败。</p>\n<p>那么有没有一种办法，将存量索引的字段类型进行更改，然后再拷贝到目标索引呢？ <strong>答案是有的</strong>，这里要用到pipeline，管道预处理。就是在reindex拷贝之前，将源索引的字段类型先进行更改，然后再写入目标索引。</p>\n<p><strong>需求</strong>：实现reindex的时候，转化源索引格式到float.</p>\n<p><strong>第一步，创建一个processors</strong></p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> PUT _ingest/pipeline/my-pipeline-id</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;description&quot;</span>: <span class=\"string\">&quot;converts the content of the price field to an float&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;processors&quot;</span> : [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;convert&quot;</span> : &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;field&quot;</span> : &quot;<span class=\"type\">price</span><span class=\"string\">&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;</span><span class=\"keyword\">type</span><span class=\"string\">&quot;: &quot;</span>float<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>第二步：创建一个目标索引</strong></p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT <span class=\"keyword\">nginxnewindex2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;mappings&quot;</span><span class=\"operator\">:</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;properties&quot;</span><span class=\"operator\">:</span> &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;price&quot;</span><span class=\"operator\">:</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;type&quot;</span><span class=\"operator\">:</span> <span class=\"string\">&quot;float&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;coerce&quot;</span><span class=\"operator\">:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>第三步：执行reindex+pipeline</strong></p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST <span class=\"keyword\">_reindex</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;source&quot;</span><span class=\"operator\">:</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;index&quot;</span><span class=\"operator\">:</span> <span class=\"string\">&quot;nginxindex&quot;</span>    </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;dest&quot;</span><span class=\"operator\">:</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;index&quot;</span><span class=\"operator\">:</span> <span class=\"string\">&quot;nginxnewindex2&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;pipeline&quot;</span><span class=\"operator\">:</span> <span class=\"string\">&quot;my-pipeline-id&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>返回如下：没有报错，执行成功。</p>\n<p><img src=\"https://ask.qcloudimg.com/developer-images/article/6899228/sqvzbg460y.png\"></p>\n<p>返回成功</p>\n<p>那么我们看看目标拷贝的索引的mapping，看看新的字段类型是否变成强float了。如下：更改成功。</p>\n<p><img src=\"https://ask.qcloudimg.com/developer-images/article/6899228/4drms7khcf.png\"></p>\n<p>那么至此，彻底解决客户这个问题。问题整理完毕。以后两个字段类型不一样需要转格式，大家也可以这么操作。</p>\n","text":"Elasticsearch 数值类型也能存String 类型问题分析最近经常遇到遇到某个客户问数值类型的字段也能存字符串，或者说已经将字段类型设置成了float...","permalink":"/post/MIDDLEWARE/Elasticsearch 数值类型也能存String 类型问题分析","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"https","slug":"https","count":12,"path":"api/categories/https.json"},{"name":"MIDDLEWARE","slug":"https/MIDDLEWARE","count":2,"path":"api/categories/https/MIDDLEWARE.json"}],"tags":[{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"float","slug":"float","count":1,"path":"api/tags/float.json"},{"name":"developer","slug":"developer","count":1,"path":"api/tags/developer.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Elasticsearch-%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E4%B9%9F%E8%83%BD%E5%AD%98String-%E7%B1%BB%E5%9E%8B%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90\"><span class=\"toc-text\">Elasticsearch 数值类型也能存String 类型问题分析</span></a></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"使用prlimit命令不重启进程修改其limits等运行参数","uid":"57ca05a26664334bc519d817eff06219","slug":"LINUX/使用prlimit命令不重启进程修改其limits等运行参数","date":"2023-11-29T14:25:53.000Z","updated":"2025-09-30T03:26:41.483Z","comments":true,"path":"api/articles/LINUX/使用prlimit命令不重启进程修改其limits等运行参数.json","keywords":"XuGuangSheng","cover":"/covers/prlimitlimits.jpg","text":"使用prlimit命令不重启进程修改其limits等运行参数12345678910111213141516171819202122232425262728293...","permalink":"/post/LINUX/使用prlimit命令不重启进程修改其limits等运行参数","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"使用","slug":"使用","count":2,"path":"api/categories/使用.json"},{"name":"LINUX","slug":"使用/LINUX","count":1,"path":"api/categories/使用/LINUX.json"}],"tags":[{"name":"prlimit","slug":"prlimit","count":1,"path":"api/tags/prlimit.json"},{"name":"命令不重启进程修改其","slug":"命令不重启进程修改其","count":1,"path":"api/tags/命令不重启进程修改其.json"},{"name":"limits","slug":"limits","count":1,"path":"api/tags/limits.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"从 apache-common-pool 看如何写一个通用池","uid":"a3ec52c6805d10835480c023a68f988e","slug":"JAVA/从 apache-common-pool 看如何写一个通用池","date":"2023-11-16T11:44:17.000Z","updated":"2025-09-30T03:26:24.369Z","comments":true,"path":"api/articles/JAVA/从 apache-common-pool 看如何写一个通用池.json","keywords":"XuGuangSheng","cover":"/covers/apache-common-pool.jpg","text":"从 apache-common-pool 看如何写一个通用池对象的创建和销毁在一定程度上会消耗系统的资源，虽然 jvm 的性能在近几年已经得到了很大的提高，对于...","permalink":"/post/JAVA/从 apache-common-pool 看如何写一个通用池","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"25 mins."},"categories":[{"name":"PooledObjectFactory","slug":"PooledObjectFactory","count":1,"path":"api/categories/PooledObjectFactory.json"},{"name":"JAVA","slug":"PooledObjectFactory/JAVA","count":1,"path":"api/categories/PooledObjectFactory/JAVA.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"www","slug":"www","count":8,"path":"api/tags/www.json"},{"name":"victorchu","slug":"victorchu","count":1,"path":"api/tags/victorchu.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}