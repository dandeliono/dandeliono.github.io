{"title":"Logstash性能调优","uid":"f4f318f964064d6dbbbf9f460a2ebe37","slug":"MIDDLEWARE/Logstash性能调优","date":"2022-08-03T15:53:32.000Z","updated":"2025-09-30T03:26:48.474Z","comments":true,"path":"api/articles/MIDDLEWARE/Logstash性能调优.json","keywords":"XuGuangSheng","cover":"/covers/logstash.jpg","content":"<h1 id=\"Logstash性能调优\"><a href=\"#Logstash性能调优\" class=\"headerlink\" title=\"Logstash性能调优\"></a>Logstash性能调优</h1><p><a href=\"https://www.elastic.co/guide/en/logstash/current/performance-tuning.html\">详细调优参考</a></p>\n<h2 id=\"Inputs-和-Outputs-的性能\"><a href=\"#Inputs-和-Outputs-的性能\" class=\"headerlink\" title=\"Inputs 和 Outputs 的性能\"></a><a href=\"#Inputs%E5%92%8COutputs%E7%9A%84%E6%80%A7%E8%83%BD\"></a><a href=\"#Inputs%E5%92%8COutputs%E7%9A%84%E6%80%A7%E8%83%BD\" title=\"Inputs 和 Outputs 的性能\"></a>Inputs 和 Outputs 的性能</h2><p>当输入输出源的性能已经达到上限，那么性能瓶颈不在 Logstash，应优先对输入输出源的性能进行调优。</p>\n<h2 id=\"系统性能指标：\"><a href=\"#系统性能指标：\" class=\"headerlink\" title=\"系统性能指标：\"></a><a href=\"#%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%EF%BC%9A\"></a><a href=\"#%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%EF%BC%9A\" title=\"系统性能指标：\"></a>系统性能指标：</h2><ul>\n<li><p>CPU</p>\n<ul>\n<li>确定 CPU 使用率是否过高，如果 CPU 过高则先查看 JVM 堆空间使用率部分，确认是否为 GC 频繁导致，如果 GC 正常，则可以通过调节 Logstash worker 相关配置来解决。</li>\n</ul>\n</li>\n<li><p>内存</p>\n<ul>\n<li>由于 Logstash 运行在 JVM 上，因此注意调整 JVM 堆空间上限，以便其有足够的运行空间。另外注意 Logstash 所在机器上是否有其他应用占用了大量内存，导致 Logstash 内存磁盘交换频繁。</li>\n</ul>\n</li>\n<li><p>I&#x2F;O 使用率<br>1）磁盘 IO：<br>磁盘 IO 饱和可能是因为使用了会导致磁盘 IO 饱和的创建（如 file output）, 另外 Logstash 中出现错误产生大量错误日志时也会导致磁盘 IO 饱和。Linux 下可以通过 iostat, dstat 等查看磁盘 IO 情况<br>2）网络 IO：<br>网络 IO 饱和一般发生在使用有大量网络操作的插件时。linux 下可以使用 dstat 或 iftop 等查看网络 IO 情况<br>3）JVM 堆检查：```null<br>1、如果 JVM 堆大小设置过小会导致 GC 频繁，从而导致 CPU 使用率过高<br>2、快速验证这个问题的方法是 double 堆大小，看性能是否有提升。注意要给系统至少预留 1GB 的空间。<br>3、为了精确查找问题可以使用 jmap 或 VisualVM。<a href=\"https://www.elastic.co/guide/en/logstash/current/tuning-logstash.html#profiling-the-heap\">参考</a><br>4、设置 Xms 和 Xmx 为相同值，防止堆大小在运行时调整，这个过程非常消耗性能。</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>）Logstash worker设置：  </span><br><span class=\"line\">worker相关配置在logstash.yml中，主要包括如下三个：</span><br><span class=\"line\">*   pipeline.workers：  </span><br><span class=\"line\">    该参数用以指定Logstash中执行<span class=\"keyword\">filter</span>和output的线程数，当如果发现CPU使用率尚未达到上限，可以通过调整该参数，为Logstash提供更高的性能。建议将Worker数设置适当超过CPU核数可以减少IO等待时间对处理过程的影响。实际调优中可以先通过-w指定该参数，当确定好数值后再写入配置文件中。</span><br><span class=\"line\">*   pipeline.batch.<span class=\"keyword\">size</span>:  </span><br><span class=\"line\">    该指标用于指定单个worker线程一次性执行flilter和output的<span class=\"keyword\">event</span>批量数。增大该值可以减少IO次数，提高处理速度，但是也以为这增加内存等资源的消耗。当与Elasticsearch联用时，该值可以用于指定Elasticsearch一次bluck操作的大小。</span><br><span class=\"line\">*   pipeline.batch.delay:  </span><br><span class=\"line\">    该指标用于指定worker等待时间的超时时间，如果worker在该时间内没有等到pipeline.batch.<span class=\"keyword\">size</span>个事件，那么将直接开始执行<span class=\"keyword\">filter</span>和output而不再等待。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n","text":"Logstash性能调优详细调优参考 Inputs 和 Outputs 的性能当输入输出源的性能已经达到上限，那么性能瓶颈不在 Logstash，应优先对输入输...","permalink":"/post/MIDDLEWARE/Logstash性能调优","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Inputs","slug":"Inputs","count":1,"path":"api/categories/Inputs.json"},{"name":"MIDDLEWARE","slug":"Inputs/MIDDLEWARE","count":1,"path":"api/categories/Inputs/MIDDLEWARE.json"}],"tags":[{"name":"Outputs","slug":"Outputs","count":1,"path":"api/tags/Outputs.json"},{"name":"的性能","slug":"的性能","count":1,"path":"api/tags/的性能.json"},{"name":"系统性能指标","slug":"系统性能指标","count":1,"path":"api/tags/系统性能指标.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Logstash%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98\"><span class=\"toc-text\">Logstash性能调优</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Inputs-%E5%92%8C-Outputs-%E7%9A%84%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">Inputs 和 Outputs 的性能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%EF%BC%9A\"><span class=\"toc-text\">系统性能指标：</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"iotop发现jdb2 sdb1-8 io使用过高解决办法","uid":"a5de914b5d23a430628c528e96e12efd","slug":"LINUX/iotop发现jdb2 sdb1-8 io使用过高解决办法","date":"2022-08-03T16:05:11.000Z","updated":"2025-09-30T03:26:37.167Z","comments":true,"path":"api/articles/LINUX/iotop发现jdb2 sdb1-8 io使用过高解决办法.json","keywords":"XuGuangSheng","cover":"/covers/iotopjdb2-sdb1-8-io.jpg","text":"iotop发现jdb2/sdb1-8 io使用过高解决办法现象1234567891011121314\\[root@push-5\\-221 ~\\]# iotopo...","permalink":"/post/LINUX/iotop发现jdb2 sdb1-8 io使用过高解决办法","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"binlog","slug":"binlog","count":1,"path":"api/categories/binlog.json"},{"name":"LINUX","slug":"binlog/LINUX","count":1,"path":"api/categories/binlog/LINUX.json"}],"tags":[{"name":"cache","slug":"cache","count":2,"path":"api/tags/cache.json"},{"name":"log","slug":"log","count":4,"path":"api/tags/log.json"},{"name":"MySQL","slug":"MySQL","count":2,"path":"api/tags/MySQL.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"使用K3S+ Kilo部署安全多区云原生ARM集群，支持nginx-ingress及velero备份","uid":"36fd7c99867f3cc13d5235c8e240e440","slug":"OCI/使用K3S+ Kilo部署安全多区云原生ARM集群，支持nginx-ingress及velero备份","date":"2022-07-30T12:39:51.000Z","updated":"2025-09-30T03:26:59.293Z","comments":true,"path":"api/articles/OCI/使用K3S+ Kilo部署安全多区云原生ARM集群，支持nginx-ingress及velero备份.json","keywords":"XuGuangSheng","cover":"/covers/k3s-kiloarmnginx-ingressvelero.jpg","text":"使用K3S+ Kilo部署安全多区云原生ARM集群，支持nginx-ingress及velero备份申请 Oracle甲骨文的Arm实例已经很久了，甲骨文的配置...","permalink":"/post/OCI/使用K3S+ Kilo部署安全多区云原生ARM集群，支持nginx-ingress及velero备份","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"velero","slug":"velero","count":1,"path":"api/categories/velero.json"},{"name":"OCI","slug":"velero/OCI","count":1,"path":"api/categories/velero/OCI.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"server","slug":"server","count":3,"path":"api/tags/server.json"},{"name":"ingress","slug":"ingress","count":1,"path":"api/tags/ingress.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}