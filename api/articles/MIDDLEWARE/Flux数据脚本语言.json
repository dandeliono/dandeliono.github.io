{"title":"Flux数据脚本语言","uid":"8ebea8637205b0f6626f1c002b32980b","slug":"MIDDLEWARE/Flux数据脚本语言","date":"2023-04-26T20:04:53.000Z","updated":"2025-09-30T03:26:46.955Z","comments":true,"path":"api/articles/MIDDLEWARE/Flux数据脚本语言.json","keywords":"XuGuangSheng","cover":"/covers/flux.jpg","content":"<h1 id=\"Flux数据脚本语言\"><a href=\"#Flux数据脚本语言\" class=\"headerlink\" title=\"Flux数据脚本语言\"></a>Flux数据脚本语言</h1><p>官方文档：<a href=\"https://docs.influxdata.com/enterprise_influxdb/v1.9/flux/\" title=\"Flux data scripting language | InfluxDB Enterprise 1.9 Documentation\">Flux data scripting language | InfluxDB Enterprise 1.9 Documentation</a></p>\n<p>Flux 被设计成可用、可读、灵活、可组合、可测试、可贡献和可共享。它的语法很大程度上受到 2018 年最流行的脚本语言 Javascript 的启发，并采用函数式方法进行数据探索和处理。</p>\n<p>以下示例说明了从存储桶（类似于 InfluxQL 数据库）中提取过去 5 分钟的数据，通过 cpu 测量值和 cpu&#x3D;cpu-total 标签过滤该数据，以 1 分钟间隔对数据进行窗口化，并计算平均值每个窗口的：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">from</span>(<span class=\"attribute\">bucket</span>: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">range</span>(<span class=\"attribute\">start</span>: -<span class=\"number\">1</span>h)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">filter</span>(<span class=\"attribute\">fn</span>: (r) =&gt; r._measurement == <span class=\"string\">&quot;cpu&quot;</span> <span class=\"keyword\">and</span> r.cpu == <span class=\"string\">&quot;cpu-total&quot;</span>)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">aggregateWindow</span>(<span class=\"attribute\">every</span>: <span class=\"number\">1</span>m, <span class=\"attribute\">fn</span>: mean)</span><br></pre></td></tr></table></figure>\n\n<p>Flux 与 InfluxDB v1.8+ 打包在一起，不需要任何额外的安装，但是默认情况下它是禁用的，需要启用。</p>\n<p>通过在 influxdb.conf 的 [http] 部分下将 Flux-enabled 选项设置为 true 来启用 Flux：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">influxdb.conf：</span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    [http]</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      flux-enabled = <span class=\"literal\">true</span> </span><br></pre></td></tr></table></figure>\n\n<p>当 InfluxDB 启动时，Flux 守护进程也会启动，并且可以使用 Flux 查询数据。</p>\n<p>有多种方法可以使用 InfluxDB Enterprise 和 Chronograf v1.8+ 执行 Flux 查询。</p>\n<h2 id=\"3-1、Chronograf的数据浏览器\"><a href=\"#3-1、Chronograf的数据浏览器\" class=\"headerlink\" title=\"3.1、Chronograf的数据浏览器\"></a>3.1、Chronograf的数据浏览器</h2><p>Chronograf v1.8+ 在其 Data Explorer 中支持 Flux。 Flux 查询可以在 Chronograf 用户界面中构建、执行和可视化。</p>\n<h2 id=\"3-2、Influx-CLI\"><a href=\"#3-2、Influx-CLI\" class=\"headerlink\" title=\"3.2、Influx CLI\"></a>3.2、Influx CLI</h2><p>要使用 InfluxDB Enterprise 1.9+ influx CLI 启动交互式 Flux read-eval-print-loop (REPL)，请使用以下标志运行 influx 命令：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">-type</span>=flux</span><br><span class=\"line\"><span class=\"attribute\">-path-prefix</span>=/api/v2/query</span><br><span class=\"line\"></span><br><span class=\"line\">如果在您的 InfluxDB 实例上启用了身份验证，请使用 -username 标志来提供您的 InfluxDB 用户名和 </span><br><span class=\"line\">-password 标志来提供您的密码。</span><br><span class=\"line\"></span><br><span class=\"line\">- 无授权：</span><br><span class=\"line\">influx <span class=\"attribute\">-type</span>=flux <span class=\"attribute\">-path-prefix</span>=/api/v2/query</span><br><span class=\"line\"></span><br><span class=\"line\">- 启用身份验证：</span><br><span class=\"line\">influx <span class=\"attribute\">-type</span>=flux \\</span><br><span class=\"line\">  <span class=\"attribute\">-path-prefix</span>=/api/v2/query \\</span><br><span class=\"line\">  -username myuser \\</span><br><span class=\"line\">  -password PasSw0rd</span><br></pre></td></tr></table></figure>\n\n<p>任何 Flux 查询都可以在 REPL 中执行。</p>\n<h3 id=\"3-2-1、通过参数提交Flux查询\"><a href=\"#3-2-1、通过参数提交Flux查询\" class=\"headerlink\" title=\"3.2.1、通过参数提交Flux查询\"></a>3.2.1、通过参数提交Flux查询</h3><p>Flux 查询也可以使用 influx CLI 的 -type&#x3D;flux 选项和 -execute 参数作为参数传递给 Flux REPL。随附的字符串作为 Flux 查询执行，结果在终端中输出。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 无授权</span><br><span class=\"line\">influx <span class=\"attribute\">-type</span>=flux \\</span><br><span class=\"line\">  <span class=\"attribute\">-path-prefix</span>=/api/v2/query \\</span><br><span class=\"line\">  -execute <span class=\"string\">&#x27;&lt;flux query&gt;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">- 启用身份验证</span><br><span class=\"line\">influx <span class=\"attribute\">-type</span>=flux \\</span><br><span class=\"line\">  <span class=\"attribute\">-path-prefix</span>=/api/v2/query \\</span><br><span class=\"line\">  -username myuser \\</span><br><span class=\"line\">  -password PasSw0rd \\</span><br><span class=\"line\">  -execute <span class=\"string\">&#x27;&lt;flux query&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-2、通过STDIN提交Flux查询\"><a href=\"#3-2-2、通过STDIN提交Flux查询\" class=\"headerlink\" title=\"3.2.2、通过STDIN提交Flux查询\"></a>3.2.2、通过STDIN提交Flux查询</h3><p>Flux 查询通过 STDIN 输入到 influx CLI 中。查询结果在您的终端中输出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 无授权</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;&lt;flux query&gt;&#x27;</span> | influx -<span class=\"built_in\">type</span>=flux -path-prefix=/api/v2/query</span><br><span class=\"line\"></span><br><span class=\"line\">- 启用身份验证</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;&lt;flux query&gt;&#x27;</span> | influx -<span class=\"built_in\">type</span>=flux \\</span><br><span class=\"line\">  -path-prefix=/api/v2/query \\</span><br><span class=\"line\">  -username myuser \\</span><br><span class=\"line\">  -password PasSw0rd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-3、Flux数据库API\"><a href=\"#3-3、Flux数据库API\" class=\"headerlink\" title=\"3.3、Flux数据库API\"></a>3.3、Flux数据库API</h2><p>Flux 可用于通过 InfluxDB 的 &#x2F;api&#x2F;v2&#x2F;query 端点查询 InfluxDB。查询的数据以带注释的 CSV 格式返回。</p>\n<p>在您的请求中，设置以下内容：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept <span class=\"keyword\">header</span> <span class=\"keyword\">to</span> application/csv</span><br><span class=\"line\">Content-<span class=\"keyword\">type</span> <span class=\"keyword\">header</span> <span class=\"keyword\">to</span> application/vnd.flux</span><br><span class=\"line\">如果在您的 InfluxDB 实例上启用了身份验证，则 授权头为 Token &lt;username&gt;:&lt;<span class=\"keyword\">password</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这允许您以纯文本形式发布 Flux 查询并接收带注释的 CSV 响应。</p>\n<p>下面是一个使用 Flux 查询 InfluxDB 的 curl 命令示例：</p>\n<figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -<span class=\"type\">XPOST</span> localhost:<span class=\"number\">8086</span>/api/v2/query -sS \\</span><br><span class=\"line\">  -<span class=\"type\">H</span> <span class=\"symbol\">&#x27;Accept</span>:application/csv&#x27; \\</span><br><span class=\"line\">  -<span class=\"type\">H</span> <span class=\"symbol\">&#x27;Content</span>-<span class=\"keyword\">type</span>:application/vnd.flux&#x27; \\</span><br><span class=\"line\">  -d <span class=\"symbol\">&#x27;from</span>(bucket:<span class=\"string\">&quot;telegraf&quot;</span>)</span><br><span class=\"line\">          |&gt; range(start:-<span class=\"number\">5</span>m)</span><br><span class=\"line\">          |&gt; filter(<span class=\"keyword\">fn</span>:(r) =&gt; r._measurement == <span class=\"string\">&quot;cpu&quot;</span>)<span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>Flux 是 InfluxData 的新功能数据脚本语言，专为查询、分析和处理数据而设计。这个多部分的入门指南介绍了与 Flux 相关的重要概念。它涵盖了使用 Flux 从 InfluxDB 查询时间序列数据，并介绍了 Flux 语法和函数。</p>\n<h2 id=\"4-1、你需要什么\"><a href=\"#4-1、你需要什么\" class=\"headerlink\" title=\"4.1、你需要什么\"></a>4.1、你需要什么</h2><ul>\n<li>InfluxDB v1.8：Flux v0.65 内置于 InfluxDB v1.8 中，可用于查询存储在 InfluxDB 中的数据。</li>\n<li>Chronograf v1.8+：不是必需的，但强烈推荐。 Chronograf v1.8 的 Data Explorer 提供了用于编写 Flux 脚本和可视化结果的用户界面 (UI)。 Chronograf v1.8+ 中的仪表板也支持 Flux 查询。</li>\n</ul>\n<h2 id=\"4-2、关键概念\"><a href=\"#4-2、关键概念\" class=\"headerlink\" title=\"4.2、关键概念\"></a>4.2、关键概念</h2><p>Flux 引入了重要的新概念，您在开始时应该理解。</p>\n<h3 id=\"4-2-1、Buckets（桶）\"><a href=\"#4-2-1、Buckets（桶）\" class=\"headerlink\" title=\"4.2.1、Buckets（桶）\"></a>4.2.1、Buckets（桶）</h3><p>Flux 引入了“buckets”，这是 InfluxDB 的一种新的数据存储概念。存储桶是具有保留策略的存储数据的命名位置。它类似于 InfluxDB v1.x “数据库”，但它是数据库和保留策略的组合。使用多个保留策略时，每个保留策略都被视为其自己的存储桶。</p>\n<p>Flux 的 from() 函数，它定义了一个 InfluxDB 数据源，需要一个桶参数。将 Flux 与 InfluxDB v1.x 一起使用时，请使用以下存储桶命名约定，它将数据库名称和保留策略组合成一个存储桶名称：</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">InfluxDB</span> <span class=\"variable\">v1.x</span>存储桶命名约定：</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">from</span>(<span class=\"variable\">bucket</span>:<span class=\"string\">&quot;&lt;database&gt;/&lt;retention-policy&gt;&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">from</span>(<span class=\"variable\">bucket</span>:<span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-2、Pipe-forward-operator（管道转发运算符）\"><a href=\"#4-2-2、Pipe-forward-operator（管道转发运算符）\" class=\"headerlink\" title=\"4.2.2、Pipe-forward operator（管道转发运算符）\"></a>4.2.2、Pipe-forward operator（管道转发运算符）</h3><p>Flux 广泛使用管道转发运算符 (|&gt;) 将操作链接在一起。在每个函数或操作之后，Flux 返回一个包含数据的表或表集合。管道转发操作符将这些表通过管道传送到下一个函数或操作中，在这些函数或操作中进一步处理或操作它们。</p>\n<h3 id=\"4-2-3、Tables（表）\"><a href=\"#4-2-3、Tables（表）\" class=\"headerlink\" title=\"4.2.3、Tables（表）\"></a>4.2.3、Tables（表）</h3><p>Flux 构造表中的所有数据。当数据从数据源流式传输时，Flux 将其格式化为带注释的逗号分隔值 (CSV)，表示表格。然后函数操作或处理它们并输出新表。这使得将函数链接在一起以构建复杂的查询变得容易。</p>\n<p>Group keys（组键）：每个表都有一个描述表内容的组键。它是一个列列表，表中的每一行都将具有相同的值。每行中具有唯一值的列不属于组键。随着函数处理和转换数据，每个函数都会修改输出表的组键。了解函数如何修改表和组键是正确调整数据以获得所需输出的关键。</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 实例组键：</span><br><span class=\"line\">    [<span class=\"variable\">_start</span>, <span class=\"variable\">_stop</span>, <span class=\"variable\">_field</span>, <span class=\"variable\">_measurement</span>, host]</span><br></pre></td></tr></table></figure>\n\n<p>请注意，_time 和 _value 被排除在示例组键之外，因为它们对于每一行都是唯一的。</p>\n<h2 id=\"4-3、使用Flux的工具\"><a href=\"#4-3、使用Flux的工具\" class=\"headerlink\" title=\"4.3、使用Flux的工具\"></a><strong>4.3、使用Flux的工具</strong></h2><p>您有多种选择来编写和运行 Flux 查询，但在您开始时，我们建议使用以下方法：Chronograf的数据浏览器。Chronograf 的数据资源管理器可以轻松编写您的第一个 Flux 脚本并可视化结果。要使用 Chronograf 的 Flux UI，请打开数据资源管理器并在图表占位符上方的源下拉列表右侧，选择 Flux 作为源类型。这将提供模式、脚本和函数窗格。 Schema 窗格允许您浏览数据。脚本窗格是您编写 Flux 脚本的地方。 Functions 窗格提供了 Flux 查询中可用的函数列表。</p>\n<h2 id=\"4-4、使用Flux查询InfluxDB\"><a href=\"#4-4、使用Flux查询InfluxDB\" class=\"headerlink\" title=\"4.4、使用Flux查询InfluxDB\"></a>4.4、使用Flux查询InfluxDB</h2><p>本指南介绍了使用 Flux 从 InfluxDB 查询数据的基础知识。如果您还没有，请确保安装 InfluxDB v1.8+，启用 Flux，并选择用于编写 Flux 查询的工具。可以使用执行Flux查询中描述的任何方法执行以下查询。请务必为每种方法提供您的 InfluxDB Enterprise 授权凭证。</p>\n<p>每个 Flux 查询都需要以下内容：① 数据源；② 一个时间范围；③ 数据过滤器。</p>\n<h3 id=\"4-4-1、定义你的数据源\"><a href=\"#4-4-1、定义你的数据源\" class=\"headerlink\" title=\"4.4.1、定义你的数据源\"></a>4.4.1、定义你的数据源</h3><p>Flux 的 from() 函数定义了一个 InfluxDB 数据源。它需要一个桶参数。对于此示例，使用 telegraf&#x2F;autogen，这是 TICK 堆栈提供的默认数据库和保留策略的组合。</p>\n<h3 id=\"4-4-2、指定时间范围\"><a href=\"#4-4-2、指定时间范围\" class=\"headerlink\" title=\"4.4.2、指定时间范围\"></a>4.4.2、指定时间范围</h3><p>Flux 在查询时间序列数据时需要时间范围。 “无界”查询非常耗费资源，作为一种保护措施，Flux 不会查询没有指定范围的数据库。使用管道转发运算符 (|&gt;) 将数据从数据源通过管道传输到 range() 函数，该函数指定查询的时间范围。它接受两个属性：开始和停止。范围可以是使用负持续时间的相对范围或使用时间戳的绝对范围。相对范围是相对于“现在”的。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">-</span> 示例：相对时间范围</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"selector-tag\">from</span>(<span class=\"attribute\">bucket</span>:<span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span><br><span class=\"line\">        |&gt; <span class=\"selector-tag\">range</span>(<span class=\"attribute\">start</span>: -<span class=\"number\">1</span>h)</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"selector-tag\">from</span>(<span class=\"attribute\">bucket</span>:<span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span><br><span class=\"line\">        |&gt; <span class=\"selector-tag\">range</span>(<span class=\"attribute\">start</span>: -<span class=\"number\">1</span>h, <span class=\"attribute\">stop</span>: -<span class=\"number\">10</span>m)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">-</span> 示例：绝对时间范围</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span>(<span class=\"attribute\">bucket</span>:<span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span><br><span class=\"line\">        |&gt; <span class=\"selector-tag\">range</span>(<span class=\"attribute\">start</span>: <span class=\"number\">2018</span><span class=\"attribute\">-11-05T23</span>:<span class=\"number\">30</span>:<span class=\"number\">00</span>Z, <span class=\"attribute\">stop</span>: <span class=\"number\">2018</span><span class=\"attribute\">-11-06T00</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span>Z)</span><br><span class=\"line\"></span><br><span class=\"line\">对于本指南，使用相对时间范围 <span class=\"selector-tag\">-15m</span> 将查询结果限制为最近 <span class=\"number\">15</span> 分钟的数据：</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span>(<span class=\"attribute\">bucket</span>:<span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span><br><span class=\"line\">        |&gt; <span class=\"selector-tag\">range</span>(<span class=\"attribute\">start</span>: -<span class=\"number\">15</span>m) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-3、过滤您的数据\"><a href=\"#4-4-3、过滤您的数据\" class=\"headerlink\" title=\"4.4.3、过滤您的数据\"></a>4.4.3、过滤您的数据</h3><p>将您的范围数据传递给 filter() 函数，以根据数据属性或列缩小结果范围。 filter() 函数有一个参数 fn，它需要一个匿名函数，该函数具有基于列或属性过滤数据的逻辑。Flux 的匿名函数语法与 Javascript 非常相似。记录或行作为记录 (r) 传递给 filter() 函数。匿名函数获取记录并评估它以查看它是否与定义的过滤器匹配。使用 AND 关系运算符链接多个过滤器。</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> (r) =&gt; (r.recordProperty comparisonOperator comparisonExpression)</span><br><span class=\"line\"></span><br><span class=\"line\">(r) =&gt; (r._measurement == <span class=\"string\">&quot;cpu&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">(r) =&gt; (r._measurement == <span class=\"string\">&quot;cpu&quot;</span>) and (r._field != <span class=\"string\">&quot;usage_system&quot;</span> )</span><br><span class=\"line\"></span><br><span class=\"line\">对于此示例，按 cpu 测量值、usage_system 字段和 cpu-total 标记值进行过滤：</span><br><span class=\"line\">from(bucket: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span><br><span class=\"line\">    |<span class=\"type\">&gt; range</span>(start: <span class=\"number\">-15</span>m)</span><br><span class=\"line\">    |<span class=\"type\">&gt; filter</span>(fn: (r) =&gt; r._measurement == <span class=\"string\">&quot;cpu&quot;</span> and r._field == <span class=\"string\">&quot;usage_system&quot;</span> and r.cpu == <span class=\"string\">&quot;cpu-total&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-4、输出您的查询数据\"><a href=\"#4-4-4、输出您的查询数据\" class=\"headerlink\" title=\"4.4.4、输出您的查询数据\"></a>4.4.4、输出您的查询数据</h3><p>使用 Flux 的 yield() 函数将过滤后的表作为查询结果输出。</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">from</span>(<span class=\"variable\">bucket</span>: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">range</span>(<span class=\"variable\">start</span>: -<span class=\"number\">15</span><span class=\"variable\">m</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">filter</span>(<span class=\"variable\">fn</span>: (<span class=\"variable\">r</span>) =&gt; <span class=\"variable\">r._measurement</span> == <span class=\"string\">&quot;cpu&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span> <span class=\"variable\">r._field</span> == <span class=\"string\">&quot;usage_system&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span> <span class=\"variable\">r.cpu</span> == <span class=\"string\">&quot;cpu-total&quot;</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">yield</span>()</span></span><br></pre></td></tr></table></figure>\n\n<p>Chronograf 和 influx CLI 在每个脚本的末尾自动假设一个 yield() 函数，以便输出和可视化数据。最佳实践是包含一个 yield() 函数，但这并不总是必要的。</p>\n<h2 id=\"4-5、使用Flux转换数据\"><a href=\"#4-5、使用Flux转换数据\" class=\"headerlink\" title=\"4.5、使用Flux转换数据\"></a>4.5、使用Flux转换数据</h2><p>从 InfluxDB 查询数据时，您通常需要以某种方式转换该数据。常见的示例是将数据聚合为平均值、对数据进行下采样等。本指南演示了如何使用 Flux 函数来转换您的数据。它逐步创建了一个 Flux 脚本，该脚本将数据划分为时间窗口，平均每个窗口中的 _values，并将平均值作为新表输出。了解数据的“形状”如何通过这些操作发生变化非常重要。</p>\n<h3 id=\"4-5-1、查询数据\"><a href=\"#4-5-1、查询数据\" class=\"headerlink\" title=\"4.5.1、查询数据\"></a>4.5.1、查询数据</h3><p>使用之前 InfluxDB 指南中的 Query data 中内置的查询，但更新范围以从最后一小时提取数据：</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">from</span>(<span class=\"variable\">bucket</span>: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">range</span>(<span class=\"variable\">start</span>: -<span class=\"number\">1</span><span class=\"variable\">h</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">filter</span>(<span class=\"variable\">fn</span>: (<span class=\"variable\">r</span>) =&gt; <span class=\"variable\">r._measurement</span> == <span class=\"string\">&quot;cpu&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span> <span class=\"variable\">r._field</span> == <span class=\"string\">&quot;usage_system&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span> <span class=\"variable\">r.cpu</span> == <span class=\"string\">&quot;cpu-total&quot;</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-5-2、Flux函数\"><a href=\"#4-5-2、Flux函数\" class=\"headerlink\" title=\"4.5.2、Flux函数\"></a>4.5.2、Flux函数</h3><p>Flux 提供了许多执行特定操作、转换和任务的函数。您还可以在 Flux 查询中创建自定义函数。 Flux 标准库文档中详细介绍了函数。转换从 InfluxDB 查询的数据时使用的一种常见函数类型是聚合函数。聚合函数采用表中的一组 _values，聚合它们，并将它们转换为新值。</p>\n<p>此示例使用 mean() 函数对时间窗口内的值进行平均。</p>\n<h3 id=\"4-5-3、窗口化您的数据\"><a href=\"#4-5-3、窗口化您的数据\" class=\"headerlink\" title=\"4.5.3、窗口化您的数据\"></a>4.5.3、窗口化您的数据</h3><p>Flux 的 window() 函数根据时间值对记录进行分区。使用 every 参数定义每个窗口的持续时间。every 支持所有有效的持续时间单位，包括日历月 (1mo) 和年 (1y)。</p>\n<p>对于此示例，以五分钟为间隔 (5m) 的窗口数据。</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">from</span>(<span class=\"variable\">bucket</span>: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">range</span>(<span class=\"variable\">start</span>: -<span class=\"number\">1</span><span class=\"variable\">h</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">filter</span>(<span class=\"variable\">fn</span>: (<span class=\"variable\">r</span>) =&gt; <span class=\"variable\">r._measurement</span> == <span class=\"string\">&quot;cpu&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span> <span class=\"variable\">r._field</span> == <span class=\"string\">&quot;usage_system&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span> <span class=\"variable\">r.cpu</span> == <span class=\"string\">&quot;cpu-total&quot;</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">window</span>(<span class=\"variable\">every</span>: <span class=\"number\">5</span><span class=\"variable\">m</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p>随着数据被收集到时间窗口中，每个窗口都作为自己的表格输出。可视化时，每个表都分配有唯一的颜色。</p>\n<h3 id=\"4-5-4、聚合窗口数据\"><a href=\"#4-5-4、聚合窗口数据\" class=\"headerlink\" title=\"4.5.4、聚合窗口数据\"></a>4.5.4、聚合窗口数据</h3><p>Flux 聚合函数获取每个表中的 _values 并以某种方式聚合它们。使用 mean() 函数对每个表的 _values 进行平均。</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">from</span>(<span class=\"variable\">bucket</span>: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">range</span>(<span class=\"variable\">start</span>: -<span class=\"number\">1</span><span class=\"variable\">h</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">filter</span>(<span class=\"variable\">fn</span>: (<span class=\"variable\">r</span>) =&gt; <span class=\"variable\">r._measurement</span> == <span class=\"string\">&quot;cpu&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span> <span class=\"variable\">r._field</span> == <span class=\"string\">&quot;usage_system&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span> <span class=\"variable\">r.cpu</span> == <span class=\"string\">&quot;cpu-total&quot;</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">window</span>(<span class=\"variable\">every</span>: <span class=\"number\">5</span><span class=\"variable\">m</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">mean</span>()</span></span><br></pre></td></tr></table></figure>\n\n<p>由于每个窗口中的行都被聚合，它们的输出表只包含一个具有聚合值的行。窗口化表格仍然是独立的，并且在可视化时将显示为单个未连接的点。</p>\n<h3 id=\"4-5-5、将时间添加到您的聚合中\"><a href=\"#4-5-5、将时间添加到您的聚合中\" class=\"headerlink\" title=\"4.5.5、将时间添加到您的聚合中\"></a>4.5.5、将时间添加到您的聚合中</h3><p>当值被聚合时，结果表没有 _time 列，因为用于聚合的记录都有不同的时间戳。聚合函数不会推断应该将什么时间用于聚合值。因此 _time 列被删除。在下一个操作中需要一个 _time 列。要添加一个，请使用 duplicate() 函数将 _stop 列复制为每个窗口表的 _time 列。</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from(bucket: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span><br><span class=\"line\">    |<span class=\"type\">&gt; range</span>(start: <span class=\"number\">-1</span>h)</span><br><span class=\"line\">    |<span class=\"type\">&gt; filter</span>(fn: (r) =&gt; r._measurement == <span class=\"string\">&quot;cpu&quot;</span> and r._field == <span class=\"string\">&quot;usage_system&quot;</span> and r.cpu == <span class=\"string\">&quot;cpu-total&quot;</span>)</span><br><span class=\"line\">    |<span class=\"type\">&gt; window</span>(every: <span class=\"number\">5</span>m)</span><br><span class=\"line\">    |<span class=\"type\">&gt; mean</span>()</span><br><span class=\"line\">    |<span class=\"type\">&gt; duplicate</span>(column: <span class=\"string\">&quot;_stop&quot;</span>, <span class=\"built_in\">as</span>: <span class=\"string\">&quot;_time&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-5-6、展开聚合表\"><a href=\"#4-5-6、展开聚合表\" class=\"headerlink\" title=\"4.5.6、展开聚合表\"></a>4.5.6、展开聚合表</h3><p>使用带有 every: inf 参数的 window() 函数将所有点聚集到一个单一的无限窗口中。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span>(bucket: &quot;telegraf/autogen&quot;)</span><br><span class=\"line\">    <span class=\"operator\">|</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">range</span>(<span class=\"keyword\">start</span>: <span class=\"number\">-1</span>h)</span><br><span class=\"line\">    <span class=\"operator\">|</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">filter</span>(fn: (r) <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> r._measurement <span class=\"operator\">=</span><span class=\"operator\">=</span> &quot;cpu&quot; <span class=\"keyword\">and</span> r._field <span class=\"operator\">=</span><span class=\"operator\">=</span> &quot;usage_system&quot; <span class=\"keyword\">and</span> r.cpu <span class=\"operator\">=</span><span class=\"operator\">=</span> &quot;cpu-total&quot;)</span><br><span class=\"line\">    <span class=\"operator\">|</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">window</span>(<span class=\"keyword\">every</span>: <span class=\"number\">5</span>m)</span><br><span class=\"line\">    <span class=\"operator\">|</span><span class=\"operator\">&gt;</span> mean()</span><br><span class=\"line\">    <span class=\"operator\">|</span><span class=\"operator\">&gt;</span> duplicate(<span class=\"keyword\">column</span>: &quot;_stop&quot;, <span class=\"keyword\">as</span>: &quot;_time&quot;)</span><br><span class=\"line\">    <span class=\"operator\">|</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">window</span>(<span class=\"keyword\">every</span>: inf)</span><br></pre></td></tr></table></figure>\n\n<p>一旦取消分组并组合成一个表，聚合数据点将在您的可视化中显示为连接。</p>\n<h3 id=\"4-5-7、辅助函数\"><a href=\"#4-5-7、辅助函数\" class=\"headerlink\" title=\"4.5.7、辅助函数\"></a>4.5.7、辅助函数</h3><p>这似乎只是为了构建一个聚合数据的查询而进行的大量编码，但是通过该过程有助于了解数据在通过每个函数时如何改变“形状”。Flux 提供（并允许您创建）抽象许多这些步骤的“帮助”函数。本指南中执行的相同操作可以使用 aggregateWindow() 函数完成。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">from</span>(<span class=\"attribute\">bucket</span>: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">range</span>(<span class=\"attribute\">start</span>: -<span class=\"number\">1</span>h)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">filter</span>(<span class=\"attribute\">fn</span>: (r) =&gt; r._measurement == <span class=\"string\">&quot;cpu&quot;</span> <span class=\"keyword\">and</span> r._field == <span class=\"string\">&quot;usage_system&quot;</span> <span class=\"keyword\">and</span> r.cpu == <span class=\"string\">&quot;cpu-total&quot;</span>)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">aggregateWindow</span>(<span class=\"attribute\">every</span>: <span class=\"number\">5</span>m, <span class=\"attribute\">fn</span>: mean)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-6、Flux语法基础\"><a href=\"#4-6、Flux语法基础\" class=\"headerlink\" title=\"4.6、Flux语法基础\"></a><strong>4.6、Flux语法基础</strong></h2><p>Flux的核心是一种专门为处理数据而设计的脚本语言。本指南介绍了一些简单的表达式以及如何在 Flux 中处理它们。</p>\n<h3 id=\"4-6-1、简单的表达式\"><a href=\"#4-6-1、简单的表达式\" class=\"headerlink\" title=\"4.6.1、简单的表达式\"></a>4.6.1、简单的表达式</h3><figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"number\">1</span> + <span class=\"number\">1</span></span></span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-6-2、变量\"><a href=\"#4-6-2、变量\" class=\"headerlink\" title=\"4.6.2、变量\"></a>4.6.2、变量</h3><figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">s = <span class=\"string\">&quot;this is a string&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">i = <span class=\"number\">1</span> </span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">f = <span class=\"number\">2.0</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\">键入变量的名称以打印其值：</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">s</span></span><br><span class=\"line\">this is a string</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">i</span></span><br><span class=\"line\">1</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">f</span></span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-6-3、记录\"><a href=\"#4-6-3、记录\" class=\"headerlink\" title=\"4.6.3、记录\"></a>4.6.3、记录</h3><p>Flux 还支持记录。记录中的每个值都可以是不同的数据类型。</p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">o = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;Jim&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">42</span>, <span class=\"string\">&quot;favorite color&quot;</span>: <span class=\"string\">&quot;red&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用点表示法访问记录的属性：</p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">o.<span class=\"property\">name</span></span></span><br><span class=\"line\">Jim</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">o.<span class=\"property\">age</span></span></span><br><span class=\"line\">42</span><br></pre></td></tr></table></figure>\n\n<p>或括号表示法：</p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">o[<span class=\"string\">&quot;name&quot;</span>]</span></span><br><span class=\"line\">Jim</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">o[<span class=\"string\">&quot;age&quot;</span>]</span></span><br><span class=\"line\">42</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">o[<span class=\"string\">&quot;favorite color&quot;</span>]</span></span><br><span class=\"line\">red</span><br></pre></td></tr></table></figure>\n\n<p>使用括号表示法来引用属性键中具有特殊或空白字符的记录属性。</p>\n<h3 id=\"4-6-4、列表\"><a href=\"#4-6-4、列表\" class=\"headerlink\" title=\"4.6.4、列表\"></a>4.6.4、列表</h3><p>Flux 支持列表。列表值必须是同一类型。</p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">n = <span class=\"number\">4</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">l = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,n]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">l</span></span><br><span class=\"line\">[1, 2, 3, 4]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-6-5、函数\"><a href=\"#4-6-5、函数\" class=\"headerlink\" title=\"4.6.5、函数\"></a>4.6.5、函数</h3><p>Flux 使用函数来完成大部分繁重的工作。下面是一个对数字 n 求平方的简单函数。</p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">square = <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> n * n</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"title function_\">square</span>(<span class=\"attr\">n</span>:<span class=\"number\">3</span>)</span></span><br><span class=\"line\">9</span><br></pre></td></tr></table></figure>\n\n<p>Flux 不支持位置参数或参数。调用函数时必须始终命名参数。</p>\n<h3 id=\"4-6-6、管道转发运算符\"><a href=\"#4-6-6、管道转发运算符\" class=\"headerlink\" title=\"4.6.6、管道转发运算符\"></a>4.6.6、管道转发运算符</h3><p>Flux 广泛使用管道转发运算符 (|&gt;) 将操作链接在一起。在每个函数或操作之后，Flux 返回一个包含数据的表或表集合。 pipe-forward 操作符将这些表通过管道传送到下一个函数中，在该函数中进一步处理或操作它们。</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> |&gt; someFunction() |&gt; anotherFunction()</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-7、基本语法的实际应用\"><a href=\"#4-7、基本语法的实际应用\" class=\"headerlink\" title=\"4.7、基本语法的实际应用\"></a>4.7、基本语法的实际应用</h2><p>如果您已经阅读过其他入门指南，这可能看起来很熟悉。 Flux 的语法受到 Javascript 和其他函数式脚本语言的启发。当您开始将这些基本原则应用于实际用例（例如创建数据流变量、自定义函数等）时，Flux 的强大功能及其查询和处理数据的能力将变得显而易见。</p>\n<p>下面的示例提供了每个输入命令的多行和单行版本。 Flux 中的回车不是必需的，但有助于提高可读性。单行和多行命令都可以复制并粘贴到以 Flux 模式运行的 influx CLI 中。</p>\n<h3 id=\"4-7-1、多行输入\"><a href=\"#4-7-1、多行输入\" class=\"headerlink\" title=\"4.7.1、多行输入\"></a>4.7.1、多行输入</h3><p>定义数据流变量：Flux 中变量赋值的一个常见用例是为一个或多个输入数据流创建变量。</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">timeRange</span> = -<span class=\"number\">1</span><span class=\"variable\">h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">cpuUsageUser</span> = <span class=\"function\"><span class=\"title\">from</span>(<span class=\"variable\">bucket</span>: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">range</span>(<span class=\"variable\">start</span>: <span class=\"variable\">timeRange</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">filter</span>(<span class=\"variable\">fn</span>: (<span class=\"variable\">r</span>) =&gt; <span class=\"variable\">r._measurement</span> == <span class=\"string\">&quot;cpu&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span> <span class=\"variable\">r._field</span> == <span class=\"string\">&quot;usage_user&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span> <span class=\"variable\">r.cpu</span> == <span class=\"string\">&quot;cpu-total&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">memUsagePercent</span> = <span class=\"function\"><span class=\"title\">from</span>(<span class=\"variable\">bucket</span>: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">range</span>(<span class=\"variable\">start</span>: <span class=\"variable\">timeRange</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">filter</span>(<span class=\"variable\">fn</span>: (<span class=\"variable\">r</span>) =&gt; <span class=\"variable\">r._measurement</span> == <span class=\"string\">&quot;mem&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span> <span class=\"variable\">r._field</span> == <span class=\"string\">&quot;used_percent&quot;</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p>这些变量可以在其他函数中使用，例如 join()，同时保持语法最小和灵活。</p>\n<p>定义自定义函数：创建一个函数，该函数返回输入流中具有最高 _value 的 N 行。为此，请将输入流（表）和要返回的结果数 (n) 传递给自定义函数。然后使用 Flux 的 sort() 和 limit() 函数在数据集中查找前 n 个结果。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">topN = (<span class=\"keyword\">tables</span>=&lt;-, n) =&gt; <span class=\"keyword\">tables</span></span><br><span class=\"line\">    |&gt; sort(<span class=\"keyword\">desc</span>: <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    |&gt; <span class=\"keyword\">limit</span>(n: n)</span><br></pre></td></tr></table></figure>\n\n<p>使用这个新的自定义函数 topN 和上面定义的 cpuUsageUser 数据流变量，找到前五个数据点并产生结果。</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">cpuUsageUser</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">topN</span>(<span class=\"variable\">n</span>: <span class=\"number\">5</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">yield</span>()</span></span><br></pre></td></tr></table></figure>\n\n<p>此查询将返回过去一小时内用户 CPU 使用率最高的五个数据点。</p>\n<h3 id=\"4-7-2、单行输入\"><a href=\"#4-7-2、单行输入\" class=\"headerlink\" title=\"4.7.2、单行输入\"></a>4.7.2、单行输入</h3><p>定义数据流变量：Flux 中变量赋值的一个常见用例是为多个过滤的输入数据流创建变量。</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">timeRange</span> = -<span class=\"number\">1</span><span class=\"variable\">h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">cpuUsageUser</span> = <span class=\"function\"><span class=\"title\">from</span>(<span class=\"variable\">bucket</span>: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">range</span>(<span class=\"variable\">start</span>: <span class=\"variable\">timeRange</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">filter</span>(<span class=\"variable\">fn</span>: (<span class=\"variable\">r</span>) =&gt; <span class=\"variable\">r._measurement</span> == <span class=\"string\">&quot;cpu&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span> <span class=\"variable\">r._field</span> == <span class=\"string\">&quot;usage_user&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span> <span class=\"variable\">r.cpu</span> == <span class=\"string\">&quot;cpu-total&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">memUsagePercent</span> = <span class=\"function\"><span class=\"title\">from</span>(<span class=\"variable\">bucket</span>: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">range</span>(<span class=\"variable\">start</span>: <span class=\"variable\">timeRange</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">filter</span>(<span class=\"variable\">fn</span>: (<span class=\"variable\">r</span>) =&gt; <span class=\"variable\">r._measurement</span> == <span class=\"string\">&quot;mem&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span> <span class=\"variable\">r._field</span> == <span class=\"string\">&quot;used_percent&quot;</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p>这些变量可以在其他函数中使用，例如 join()，同时保持语法最小和灵活。</p>\n<p>定义自定义函数：让我们创建一个函数，它返回输入数据流中具有最高 _value 的 N 行。为此，请将输入流（表）和要返回的结果数 (n) 传递给自定义函数。然后使用 Flux 的 sort() 和 limit() 函数在数据集中查找前 n 个结果。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">topN = (<span class=\"keyword\">tables</span>=&lt;-, n) =&gt; <span class=\"keyword\">tables</span> |&gt; sort(<span class=\"keyword\">desc</span>: <span class=\"keyword\">true</span>) |&gt; <span class=\"keyword\">limit</span>(n: n)</span><br></pre></td></tr></table></figure>\n\n<p>使用上面定义的 cpuUsageUser 数据流变量，使用自定义 topN 函数找到前五个数据点并产生结果。此查询将返回过去一小时内用户 CPU 使用率最高的五个数据点。</p>\n<h2 id=\"4-8、使用Flux查询数据\"><a href=\"#4-8、使用Flux查询数据\" class=\"headerlink\" title=\"4.8、使用Flux查询数据\"></a>4.8、使用Flux查询数据</h2><p>以下指南中提供的许多示例都使用数据变量，它表示按度量和字段过滤数据的基本查询。数据定义为：</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">data</span> = <span class=\"function\"><span class=\"title\">from</span>(<span class=\"variable\">bucket</span>: <span class=\"string\">&quot;db/rp&quot;</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">range</span>(<span class=\"variable\">start</span>: -<span class=\"number\">1</span><span class=\"variable\">h</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">filter</span>(<span class=\"variable\">fn</span>: (<span class=\"variable\">r</span>) =&gt; <span class=\"variable\">r._measurement</span> == <span class=\"string\">&quot;example-measurement&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span> <span class=\"variable\">r._field</span> == <span class=\"string\">&quot;example-field&quot;</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-8-1、查询字段和标签\"><a href=\"#4-8-1、查询字段和标签\" class=\"headerlink\" title=\"4.8.1、查询字段和标签\"></a>4.8.1、查询字段和标签</h3><p>使用 filter() 函数根据字段、标签或任何其他列值查询数据。 filter() 执行类似于 InfluxQL 和其他类似 SQL 的查询语言中的 SELECT 语句和 WHERE 子句的操作。</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">from</span>(<span class=\"variable\">bucket</span>: <span class=\"string\">&quot;db/rp&quot;</span>)</span></span><br><span class=\"line\">  |&gt; <span class=\"function\"><span class=\"title\">range</span>(<span class=\"variable\">start</span>: -<span class=\"number\">1</span><span class=\"variable\">h</span>)</span></span><br><span class=\"line\">  |&gt; <span class=\"function\"><span class=\"title\">filter</span>(<span class=\"variable\">fn</span>: (<span class=\"variable\">r</span>) =&gt;</span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"variable\">r._measurement</span> == <span class=\"string\">&quot;example-measurement&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"variable\">r._field</span> == <span class=\"string\">&quot;example-field&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span></span></span><br><span class=\"line\"><span class=\"function\">      <span class=\"variable\">r.tag</span> == <span class=\"string\">&quot;example-tag&quot;</span></span></span><br><span class=\"line\"><span class=\"function\">  )</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>filter()函数</strong>：filter() 有一个 fn 参数，它需要一个判定函数，一个由一个或多个判定表达式组成的匿名函数。判定函数评估每个输入行。评估结果为 true 的行包含在输出数据中。评估结果为 false 的行将从输出数据中排除。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|&gt; <span class=\"built_in\">filter</span>(fn: <span class=\"function\">(<span class=\"params\">r</span>) =&gt;</span> r._measurement == <span class=\"string\">&quot;example-measurement&quot;</span> )</span><br></pre></td></tr></table></figure>\n\n<p>fn 判定函数需要一个 r 参数，它将每一行表示为 filter() 迭代输入数据。行记录中的键值对表示列及其值。使用点表示法或方括号表示法来引用判定函数中的特定列值。使用逻辑运算符将多个判定表达式链接在一起。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> r = &#123;foo: <span class=\"string\">&quot;bar&quot;</span>, baz: <span class=\"string\">&quot;quz&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(r) =&gt; r.foo == <span class=\"string\">&quot;bar&quot;</span> and r[<span class=\"string\">&quot;baz&quot;</span>] == <span class=\"string\">&quot;quz&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">(r) =&gt; <span class=\"keyword\">true</span> and <span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>按字段和标签过滤</strong>：from()、range() 和 filter() 的组合代表了最基本的 Flux 查询：</p>\n<ul>\n<li>使用 from() 定义您的存储桶。</li>\n<li>使用 range() 按时间限制查询结果。</li>\n<li>使用 filter() 来确定要输出的数据行。</li>\n</ul>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">from</span>(<span class=\"variable\">bucket</span>: <span class=\"string\">&quot;db/rp&quot;</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">range</span>(<span class=\"variable\">start</span>: -<span class=\"number\">1</span><span class=\"variable\">h</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">filter</span>(<span class=\"variable\">fn</span>: (<span class=\"variable\">r</span>) =&gt; <span class=\"variable\">r._measurement</span> == <span class=\"string\">&quot;example-measurement&quot;</span> <span class=\"variable\"><span class=\"keyword\">and</span></span> <span class=\"variable\">r.tag</span> == <span class=\"string\">&quot;example-tag&quot;</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">filter</span>(<span class=\"variable\">fn</span>: (<span class=\"variable\">r</span>) =&gt; <span class=\"variable\">r._field</span> == <span class=\"string\">&quot;example-field&quot;</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-8-2、group-：对InfluxDB中的数据进行分组\"><a href=\"#4-8-2、group-：对InfluxDB中的数据进行分组\" class=\"headerlink\" title=\"4.8.2、group()：对InfluxDB中的数据进行分组\"></a>4.8.2、group()：对InfluxDB中的数据进行分组</h3><p>使用 Flux，您可以按查询数据集中的任何列对数据进行分组。 “分组”将数据分区到表中，其中每一行为指定的列共享一个公共值。本指南介绍了 Flux 中的数据分组，并提供了数据在流程中如何形成的示例。</p>\n<p><strong>group keys（组键）</strong>：每个表都有一个组键——一个列列表，表中的每一行都具有相同的值。</p>\n<p>示例组键：</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"variable\">_start</span>, <span class=\"variable\">_stop</span>, <span class=\"variable\">_field</span>, <span class=\"variable\">_measurement</span>, host]</span><br></pre></td></tr></table></figure>\n\n<p>Flux 中对数据进行分组，本质上就是定义输出表的组键。了解修改组键如何塑造输出数据是成功将数据分组和转换为所需输出的关键。</p>\n<p><strong>group()函数</strong>：Flux 的 group() 函数定义了输出表的组键。使用 group() 函数对特定列中具有共同值的数据进行分组。group()函数具有以下参数：</p>\n<ul>\n<li>columns：在分组操作中包含或排除的列列表（取决于模式）。</li>\n<li>mode：用于定义组和结果组键的方法。可能的值包括 by 和 except。</li>\n</ul>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">data</span></span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">group</span>(<span class=\"attribute\">columns</span>: [<span class=\"string\">&quot;cpu&quot;</span>, <span class=\"string\">&quot;host&quot;</span>], <span class=\"attribute\">mode</span>: <span class=\"string\">&quot;by&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">产生的组键：</span><br><span class=\"line\">    <span class=\"selector-attr\">[cpu, host]</span></span><br></pre></td></tr></table></figure>\n\n<p>输入：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>host</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>host1</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>host2</td>\n<td>2.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>host1</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>host2</td>\n<td>3.0</td>\n</tr>\n</tbody></table>\n<p>输出：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>host</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>host1</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>host1</td>\n<td>1.0</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>host</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>host2</td>\n<td>2.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>host2</td>\n<td>3.0</td>\n</tr>\n</tbody></table>\n<p>为了说明分组的工作原理，定义一个从 db&#x2F;rp 存储桶查询系统 CPU 使用率的 dataSet 变量。过滤 cpu 标记，使其仅返回每个编号的 CPU 内核的结果。</p>\n<p>系统操作为所有编号的 CPU 内核使用的 CPU。它使用正则表达式来过滤仅编号的核心。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSet = <span class=\"keyword\">from</span>(bucket: &quot;db/rp&quot;)</span><br><span class=\"line\">    |&gt; range(<span class=\"keyword\">start</span>: <span class=\"number\">-2</span>m)</span><br><span class=\"line\">    |&gt; <span class=\"keyword\">filter</span>(fn: (r) =&gt; r._field == &quot;usage_system&quot; <span class=\"keyword\">and</span> r.cpu =~ /cpu[<span class=\"number\">0</span><span class=\"number\">-9</span>*]/)</span><br><span class=\"line\">    |&gt; <span class=\"keyword\">drop</span>(<span class=\"keyword\">columns</span>: [&quot;host&quot;])</span><br></pre></td></tr></table></figure>\n\n<p>此示例从返回的数据中删除主机列，因为仅跟踪单个主机的 CPU 数据，并且它简化了输出表。如果监控多个主机，请不要删除主机列。请注意，每个表都会输出组键：表：键：<group-key>。</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [_start, _stop, _field, _measurement, cpu]</span></span><br><span class=\"line\">                   <span class=\"attribute\">_start</span>:time                      _stop:time           _field:string     _measurement:string              cpu:string                      _time:time                  _value:float</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu0  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">7</span>.<span class=\"number\">892107892107892</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu0  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">7</span>.<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu0  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">20</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">7</span>.<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu0  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">30</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">5</span>.<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu0  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">40</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">7</span>.<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu0  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">50</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">7</span>.<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu0  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                          <span class=\"number\">10</span>.<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu0  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">9</span>.<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu0  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">20</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">8</span>.<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu0  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">30</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">8</span>.<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu0  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">40</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">8</span>.<span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu0  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">50</span>.<span class=\"number\">000000000</span>Z                          <span class=\"number\">10</span>.<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu0  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                          <span class=\"number\">10</span>.<span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [_start, _stop, _field, _measurement, cpu]</span></span><br><span class=\"line\">                   <span class=\"attribute\">_start</span>:time                      _stop:time           _field:string     _measurement:string              cpu:string                      _time:time                  _value:float</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu1  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            <span class=\"number\">0</span>.<span class=\"number\">7992007992007992</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu1  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">0</span>.<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu1  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">20</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">0</span>.<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu1  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">30</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">0</span>.<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu1  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">40</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">0</span>.<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu1  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">50</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">0</span>.<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu1  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">1</span>.<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu1  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">1</span>.<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu1  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">20</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">0</span>.<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu1  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">30</span>.<span class=\"number\">000000000</span>Z            <span class=\"number\">0</span>.<span class=\"number\">8991008991008991</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu1  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">40</span>.<span class=\"number\">000000000</span>Z            <span class=\"number\">0</span>.<span class=\"number\">8008008008008008</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu1  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">50</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">0</span>.<span class=\"number\">999000999000999</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            usage_system                     cpu                    cpu1  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            <span class=\"number\">1</span>.<span class=\"number\">1022044088176353</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>按 cpu 列对数据集流进行分组</strong>：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSet</span><br><span class=\"line\">    |&gt; <span class=\"keyword\">group</span>(<span class=\"keyword\">columns</span>: [&quot;cpu&quot;])</span><br></pre></td></tr></table></figure>\n\n<p>这实际上不会改变数据的结构，因为它已经在组键中有 cpu，因此按 cpu 分组。但是，请注意它确实更改了组键：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [cpu]</span></span><br><span class=\"line\">            <span class=\"attribute\">cpu</span>:string                      _stop:time                      _time:time                  _value:float           _field:string     _measurement:string                     _start:time</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"attribute\">cpu0</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">7</span>.<span class=\"number\">892107892107892</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu0</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">7</span>.<span class=\"number\">2</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu0</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">20</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">7</span>.<span class=\"number\">4</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu0</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">30</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">5</span>.<span class=\"number\">5</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu0</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">40</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">7</span>.<span class=\"number\">4</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu0</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">50</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">7</span>.<span class=\"number\">5</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu0</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                          <span class=\"number\">10</span>.<span class=\"number\">3</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu0</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">9</span>.<span class=\"number\">2</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu0</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">20</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">8</span>.<span class=\"number\">4</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu0</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">30</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">8</span>.<span class=\"number\">5</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu0</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">40</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">8</span>.<span class=\"number\">6</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu0</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">50</span>.<span class=\"number\">000000000</span>Z                          <span class=\"number\">10</span>.<span class=\"number\">2</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu0</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                          <span class=\"number\">10</span>.<span class=\"number\">6</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [cpu]</span></span><br><span class=\"line\">            <span class=\"attribute\">cpu</span>:string                      _stop:time                      _time:time                  _value:float           _field:string     _measurement:string                     _start:time</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"attribute\">cpu1</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            <span class=\"number\">0</span>.<span class=\"number\">7992007992007992</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu1</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">0</span>.<span class=\"number\">7</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu1</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">20</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">0</span>.<span class=\"number\">7</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu1</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">30</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">0</span>.<span class=\"number\">4</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu1</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">40</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">0</span>.<span class=\"number\">7</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu1</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">50</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">0</span>.<span class=\"number\">7</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu1</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">1</span>.<span class=\"number\">4</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu1</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">1</span>.<span class=\"number\">2</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu1</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">20</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">0</span>.<span class=\"number\">8</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu1</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">30</span>.<span class=\"number\">000000000</span>Z            <span class=\"number\">0</span>.<span class=\"number\">8991008991008991</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu1</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">40</span>.<span class=\"number\">000000000</span>Z            <span class=\"number\">0</span>.<span class=\"number\">8008008008008008</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu1</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">35</span>:<span class=\"number\">50</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">0</span>.<span class=\"number\">999000999000999</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\">                  <span class=\"attribute\">cpu1</span>  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            <span class=\"number\">1</span>.<span class=\"number\">1022044088176353</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br></pre></td></tr></table></figure>\n\n<p>可视化保持不变。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/47f624fe844e43a5b7f96727e5c1b72d.png\"></p>\n<p>按 _time 列对数据进行分组很好地说明了分组如何更改数据的结构：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSet</span><br><span class=\"line\">    |&gt; <span class=\"keyword\">group</span>(<span class=\"keyword\">columns</span>: [&quot;_time&quot;])</span><br></pre></td></tr></table></figure>\n\n<p>当按 _time 分组时，共享一个公共 _time 值的所有记录将被分组到单独的表中。所以每个输出表代表一个时间点。</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [_time]</span></span><br><span class=\"line\">                    <span class=\"attribute\">_time</span>:time                     _start:time                      _stop:time                  _value:float           _field:string     _measurement:string              cpu:string</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">7</span>.<span class=\"number\">892107892107892</span>            usage_system                     cpu                    cpu0</span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            <span class=\"number\">0</span>.<span class=\"number\">7992007992007992</span>            usage_system                     cpu                    cpu1</span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">4</span>.<span class=\"number\">1</span>            usage_system                     cpu                    cpu2</span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            <span class=\"number\">0</span>.<span class=\"number\">5005005005005005</span>            usage_system                     cpu                    cpu3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [_time]</span></span><br><span class=\"line\">                    <span class=\"attribute\">_time</span>:time                     _start:time                      _stop:time                  _value:float           _field:string     _measurement:string              cpu:string</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">7</span>.<span class=\"number\">2</span>            usage_system                     cpu                    cpu0</span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">0</span>.<span class=\"number\">7</span>            usage_system                     cpu                    cpu1</span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">3</span>.<span class=\"number\">6</span>            usage_system                     cpu                    cpu2</span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                           <span class=\"number\">0</span>.<span class=\"number\">5</span>            usage_system                     cpu                    cpu3</span><br></pre></td></tr></table></figure>\n\n<p>因为每个时间戳都被构造为一个单独的表，所以在可视化时，共享相同时间戳的所有点看起来都是连接的。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/c88d41c085714f049ae9c542f3d5d288.png\"></p>\n<p>通过一些进一步的处理，您可以计算每个时间点所有 CPU 的平均 CPU 使用率，并将它们分组到一个表中，但我们不会在此示例中涉及。如果您有兴趣自己运行和可视化它，查询将如下所示：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSet</span><br><span class=\"line\">    |&gt; <span class=\"keyword\">group</span>(<span class=\"keyword\">columns</span>: [&quot;_time&quot;])</span><br><span class=\"line\">    |&gt; mean()</span><br><span class=\"line\">    |&gt; <span class=\"keyword\">group</span>(<span class=\"keyword\">columns</span>: [&quot;_value&quot;, &quot;_time&quot;], mode: &quot;except&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>按 cpu 和 _time 列分组：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSet</span><br><span class=\"line\">    |&gt; <span class=\"keyword\">group</span>(<span class=\"keyword\">columns</span>: [&quot;cpu&quot;, &quot;_time&quot;])</span><br></pre></td></tr></table></figure>\n\n<p>这会为每个唯一的 cpu 和 _time 组合输出一个表：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [_time, cpu]</span></span><br><span class=\"line\">                    <span class=\"attribute\">_time</span>:time              cpu:string                      _stop:time                  _value:float           _field:string     _measurement:string                     _start:time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    cpu0  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">7</span>.<span class=\"number\">892107892107892</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [_time, cpu]</span></span><br><span class=\"line\">                    <span class=\"attribute\">_time</span>:time              cpu:string                      _stop:time                  _value:float           _field:string     _measurement:string                     _start:time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    cpu1  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">36</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            <span class=\"number\">0</span>.<span class=\"number\">7992007992007992</span>            usage_system                     cpu  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">05</span>T21:<span class=\"number\">34</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z</span><br></pre></td></tr></table></figure>\n\n<p>可视化时，表格显示为单独的、未连接的点。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/70841da3e51446b1bba966fab1d32904.png\"></p>\n<p>按 cpu 和 _time 分组很好地说明了分组的工作原理。</p>\n<h3 id=\"4-8-3、sort-amp-limit-：使用Flux对数据进行排序和限制\"><a href=\"#4-8-3、sort-amp-limit-：使用Flux对数据进行排序和限制\" class=\"headerlink\" title=\"4.8.3、sort() &amp; limit()：使用Flux对数据进行排序和限制\"></a>4.8.3、sort() &amp; limit()：使用Flux对数据进行排序和限制</h3><p>使用 sort() 函数按特定列对每个表中的记录进行排序，使用 limit() 函数将输出表中的记录数限制为固定数 n。</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data</span><br><span class=\"line\">    |&gt; <span class=\"built_in\">sort</span>(<span class=\"built_in\">columns</span>: [<span class=\"string\">&quot;host&quot;</span>, <span class=\"string\">&quot;_value&quot;</span>])</span><br><span class=\"line\">    |&gt; <span class=\"built_in\">limit</span>(n: <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n\n<p>输入：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>host</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>A</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>B</td>\n<td>1.2</td>\n</tr>\n<tr>\n<td>2020-01-01T00:03:00Z</td>\n<td>A</td>\n<td>1.8</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>B</td>\n<td>0.9</td>\n</tr>\n<tr>\n<td>2020-01-01T00:05:00Z</td>\n<td>B</td>\n<td>1.4</td>\n</tr>\n<tr>\n<td>2020-01-01T00:06:00Z</td>\n<td>B</td>\n<td>2.0</td>\n</tr>\n</tbody></table>\n<p>输出：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>host</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:03:00Z</td>\n<td>A</td>\n<td>1.8</td>\n</tr>\n<tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>A</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:06:00Z</td>\n<td>B</td>\n<td>2.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:05:00Z</td>\n<td>B</td>\n<td>1.4</td>\n</tr>\n</tbody></table>\n<p>以下示例首先按区域排序系统正常运行时间region，然后是主机host，然后是值_value。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span>(bucket: &quot;db/rp&quot;)</span><br><span class=\"line\">    |&gt; range(<span class=\"keyword\">start</span>: <span class=\"number\">-12</span>h)</span><br><span class=\"line\">    |&gt; <span class=\"keyword\">filter</span>(fn: (r) =&gt; r._measurement == &quot;system&quot; <span class=\"keyword\">and</span> r._field == &quot;uptime&quot;)</span><br><span class=\"line\">    |&gt; sort(<span class=\"keyword\">columns</span>: [&quot;region&quot;, &quot;host&quot;, &quot;_value&quot;])</span><br></pre></td></tr></table></figure>\n\n<p>limit() 函数将输出表中的记录数限制为固定数 n。以下示例最多显示过去一小时的 10 条记录。</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">from</span>(<span class=\"variable\">bucket</span>:<span class=\"string\">&quot;db/rp&quot;</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">range</span>(<span class=\"variable\">start</span>:-<span class=\"number\">1</span><span class=\"variable\">h</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">limit</span>(<span class=\"variable\">n</span>:<span class=\"number\">10</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p>您可以同时使用 sort() 和 limit() 来显示前 N 条记录。下面的示例返回首先按区域排序的 10 个最高系统正常运行时间值，然后是主机，然后是值。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span>(bucket: &quot;db/rp&quot;)</span><br><span class=\"line\">    |&gt; range(<span class=\"keyword\">start</span>: <span class=\"number\">-12</span>h)</span><br><span class=\"line\">    |&gt; <span class=\"keyword\">filter</span>(fn: (r) =&gt; r._measurement == &quot;system&quot; <span class=\"keyword\">and</span> r._field == &quot;uptime&quot;)</span><br><span class=\"line\">    |&gt; sort(<span class=\"keyword\">columns</span>: [&quot;region&quot;, &quot;host&quot;, &quot;_value&quot;])</span><br><span class=\"line\">    |&gt; <span class=\"keyword\">limit</span>(n: <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<p>您现在已经创建了一个对数据进行排序和限制的 Flux 查询。 Flux 还提供了 top() 和 bottom() 函数来同时执行这两个函数。</p>\n<h3 id=\"4-8-4、Window-amp-aggregate\"><a href=\"#4-8-4、Window-amp-aggregate\" class=\"headerlink\" title=\"4.8.4、Window &amp; aggregate\"></a>4.8.4、Window &amp; aggregate</h3><p>使用时间序列数据执行的常见操作是将数据分组到时间窗口或“窗口化”数据，然后将窗口化值聚合成新值。本指南介绍了使用 Flux 对数据进行窗口化和聚合，并演示了数据在该过程中是如何形成的。</p>\n<p>以下示例深入介绍了窗口化和聚合数据所需的步骤。 aggregateWindow() 函数为您执行这些操作，但了解数据在此过程中的形成方式有助于成功创建所需的输出。</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span></span></span><br><span class=\"line\">    |&gt; aggregateWindow(every: 20m, fn: mean)</span><br></pre></td></tr></table></figure>\n\n<p>输入：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>2020-01-01T00:00:00Z</p>\n<p> | 250 |<br>| </p>\n<p>2020-01-01T00:04:00Z</p>\n<p> | 160 |<br>| </p>\n<p>2020-01-01T00:12:00Z</p>\n<p> | 150 |<br>| </p>\n<p>2020-01-01T00:19:00Z</p>\n<p> | 220 |<br>| </p>\n<p>2020-01-01T00:32:00Z</p>\n<p> | 200 |<br>| </p>\n<p>2020-01-01T00:51:00Z</p>\n<p> | 290 |<br>| </p>\n<p>2020-01-01T01:00:00Z</p>\n<p> | 340 |</p>\n<p>输出：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:20:00Z</td>\n<td>195</td>\n</tr>\n<tr>\n<td>2020-01-01T00:40:00Z</td>\n<td>200</td>\n</tr>\n<tr>\n<td>2020-01-01T01:00:00Z</td>\n<td>290</td>\n</tr>\n<tr>\n<td>2020-01-01T01:20:00Z</td>\n<td>340</td>\n</tr>\n</tbody></table>\n<p>为本指南的目的，定义一个代表您的基础数据集的变量。以下示例查询主机的内存使用情况。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSet = <span class=\"keyword\">from</span>(bucket: &quot;db/rp&quot;)</span><br><span class=\"line\">    |&gt; range(<span class=\"keyword\">start</span>: <span class=\"number\">-5</span>m)</span><br><span class=\"line\">    |&gt; <span class=\"keyword\">filter</span>(fn: (r) =&gt; r._measurement == &quot;mem&quot; <span class=\"keyword\">and</span> r._field == &quot;used_percent&quot;)</span><br><span class=\"line\">    |&gt; <span class=\"keyword\">drop</span>(<span class=\"keyword\">columns</span>: [&quot;host&quot;])</span><br></pre></td></tr></table></figure>\n\n<p>此示例从返回的数据中删除主机列，因为仅跟踪单个主机的内存数据并且它简化了输出表。删除主机列是可选的，如果监视多个主机上的内存，则不建议这样做。dataSet 现在可用于表示您的基础数据，类似于以下内容：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [_start, _stop, _field, _measurement]</span></span><br><span class=\"line\">                   <span class=\"attribute\">_start</span>:time                      _stop:time           _field:string     _measurement:string                      _time:time                  _value:float</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">71</span>.<span class=\"number\">11611366271973</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">67</span>.<span class=\"number\">39630699157715</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">20</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">64</span>.<span class=\"number\">16666507720947</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">30</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">64</span>.<span class=\"number\">19951915740967</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">40</span>.<span class=\"number\">000000000</span>Z              <span class=\"number\">64</span>.<span class=\"number\">2122745513916</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">50</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">64</span>.<span class=\"number\">22209739685059</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z              <span class=\"number\">64</span>.<span class=\"number\">6336555480957</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">64</span>.<span class=\"number\">16516304016113</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">20</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">64</span>.<span class=\"number\">18349742889404</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">30</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">64</span>.<span class=\"number\">20474052429199</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>使用 window() 函数根据时间范围对数据进行分组</strong>。与 window() 一起传递的最常见的参数是 every ，它定义了窗口之间的持续时间。every 参数支持所有有效的持续时间单位，包括日历月 (1mo) 和年 (1y)。其他参数可用，但对于此示例，将基础数据集窗口化为一分钟窗口。</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">dataSet</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">window</span>(<span class=\"variable\">every</span>: <span class=\"number\">1</span><span class=\"variable\">m</span>)</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [_start, _stop, _field, _measurement]</span></span><br><span class=\"line\">                   <span class=\"attribute\">_start</span>:time                      _stop:time           _field:string     _measurement:string                      _time:time                  _value:float</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">71</span>.<span class=\"number\">11611366271973</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">67</span>.<span class=\"number\">39630699157715</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">20</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">64</span>.<span class=\"number\">16666507720947</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">30</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">64</span>.<span class=\"number\">19951915740967</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">40</span>.<span class=\"number\">000000000</span>Z              <span class=\"number\">64</span>.<span class=\"number\">2122745513916</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">50</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">64</span>.<span class=\"number\">22209739685059</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [_start, _stop, _field, _measurement]</span></span><br><span class=\"line\">                   <span class=\"attribute\">_start</span>:time                      _stop:time           _field:string     _measurement:string                      _time:time                  _value:float</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">52</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z              <span class=\"number\">64</span>.<span class=\"number\">6336555480957</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">52</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">64</span>.<span class=\"number\">16516304016113</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">52</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">20</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">64</span>.<span class=\"number\">18349742889404</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">52</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">30</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">64</span>.<span class=\"number\">20474052429199</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">52</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">40</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">68</span>.<span class=\"number\">65062713623047</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">52</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">50</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">67</span>.<span class=\"number\">20139980316162</span></span><br></pre></td></tr></table></figure>\n\n<p>在 InfluxDB UI 中可视化时，每个窗口表都以不同的颜色显示。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/0578b19b101943cb8bdc9f628fdb0550.png\"></p>\n<p><strong>聚合函数获取表中所有行的值并使用它们来执行聚合操作</strong>，结果在单行表中作为新值输出。由于窗口化数据被拆分为单独的表，聚合操作分别针对每个表运行并输出仅包含聚合值的新表。</p>\n<p>对于此示例，使用 mean() 函数输出每个窗口的平均值：</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">dataSet</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">window</span>(<span class=\"variable\">every</span>: <span class=\"number\">1</span><span class=\"variable\">m</span>)</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">mean</span>()</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [_start, _stop, _field, _measurement]</span></span><br><span class=\"line\">                   <span class=\"attribute\">_start</span>:time                      _stop:time           _field:string     _measurement:string                  _value:float</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem             <span class=\"number\">65</span>.<span class=\"number\">88549613952637</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [_start, _stop, _field, _measurement]</span></span><br><span class=\"line\">                   <span class=\"attribute\">_start</span>:time                      _stop:time           _field:string     _measurement:string                  _value:float</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">52</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem             <span class=\"number\">65</span>.<span class=\"number\">50651391347249</span></span><br></pre></td></tr></table></figure>\n\n<p>因为每个数据点都包含在自己的表中，所以在可视化时，它们会显示为单个未连接的点。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/0aae6cf6b4d2403fbd2019c26a1df888.png\"></p>\n<p>请注意 _time 列不在聚合输出表中。因为每个表中的记录都聚合在一起，它们的时间戳不再适用，并且该列从组键和表中删除。另请注意 _start 和 _stop 列仍然存在。这些代表时间窗口的下限和上限。许多 Flux 函数依赖于 _time 列。要在聚合函数之后进一步处理您的数据，您需要重新添加 _time。<strong>使用 duplicate() 函数将 _start 或 _stop 列复制为新的 _time 列</strong>。</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSet</span><br><span class=\"line\">    |<span class=\"type\">&gt; window</span>(every: <span class=\"number\">1</span>m)</span><br><span class=\"line\">    |<span class=\"type\">&gt; mean</span>()</span><br><span class=\"line\">    |<span class=\"type\">&gt; duplicate</span>(column: <span class=\"string\">&quot;_stop&quot;</span>, <span class=\"built_in\">as</span>: <span class=\"string\">&quot;_time&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [_start, _stop, _field, _measurement]</span></span><br><span class=\"line\">                   <span class=\"attribute\">_start</span>:time                      _stop:time           _field:string     _measurement:string                      _time:time                  _value:float</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">65</span>.<span class=\"number\">88549613952637</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [_start, _stop, _field, _measurement]</span></span><br><span class=\"line\">                   <span class=\"attribute\">_start</span>:time                      _stop:time           _field:string     _measurement:string                      _time:time                  _value:float</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">52</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z            used_percent                     mem  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">03</span>T17:<span class=\"number\">52</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z             <span class=\"number\">65</span>.<span class=\"number\">50651391347249</span></span><br></pre></td></tr></table></figure>\n\n<p>将汇总值保存在单独的表中通常不是您想要的数据格式。<strong>使用 window() 函数将数据“展开”到单个无限 (inf) 窗口中</strong>。</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSet</span><br><span class=\"line\">    |<span class=\"type\">&gt; window</span>(every: <span class=\"number\">1</span>m)</span><br><span class=\"line\">    |<span class=\"type\">&gt; mean</span>()</span><br><span class=\"line\">    |<span class=\"type\">&gt; duplicate</span>(column: <span class=\"string\">&quot;_stop&quot;</span>, <span class=\"built_in\">as</span>: <span class=\"string\">&quot;_time&quot;</span>)</span><br><span class=\"line\">    |<span class=\"type\">&gt; window</span>(every: inf)</span><br></pre></td></tr></table></figure>\n\n<p>窗口化需要一个 _time 列，这就是为什么需要在聚合后重新创建 _time 列的原因。</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">未加窗的输出列表：</span><br><span class=\"line\">Table: keys: [_start, _stop, _field, _measurement]</span><br><span class=\"line\">                   _start:time                      _stop:time           _field:string     _measurement:string                      _time:time                  _value:float</span><br><span class=\"line\"></span><br><span class=\"line\">2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:50:00.000000000Z  2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:55:00.000000000Z            used_percent                     mem  2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:51:00.000000000Z             65.88549613952637</span><br><span class=\"line\">2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:50:00.000000000Z  2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:55:00.000000000Z            used_percent                     mem  2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:52:00.000000000Z             65.50651391347249</span><br><span class=\"line\">2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:50:00.000000000Z  2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:55:00.000000000Z            used_percent                     mem  2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:53:00.000000000Z             65.30719598134358</span><br><span class=\"line\">2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:50:00.000000000Z  2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:55:00.000000000Z            used_percent                     mem  2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:54:00.000000000Z             64.39330975214641</span><br><span class=\"line\">2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:50:00.000000000Z  2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:55:00.000000000Z            used_percent                     mem  2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:55:00.000000000Z             64.49386278788249</span><br><span class=\"line\">2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:50:00.000000000Z  2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:55:00.000000000Z            used_percent                     mem  2018<span class=\"string\">-11</span><span class=\"string\">-03</span>T17:55:00.000000000Z             64.49816226959229</span><br></pre></td></tr></table></figure>\n\n<p>通过单个表中的聚合值，可视化中的数据点被连接起来。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/19684508bb584976bf3d13ab3ff06d2d.png\"></p>\n<p>您现在已经创建了一个窗口和聚合数据的 Flux 查询。本指南中概述的数据转换过程应用于所有聚合操作。<strong>Flux 还提供了 aggregateWindow() 函数，它为您执行所有这些单独的函数</strong>。以下 Flux 查询将返回相同的结果：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">dataSet</span></span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">aggregateWindow</span>(<span class=\"attribute\">every</span>: <span class=\"number\">1</span>m, <span class=\"attribute\">fn</span>: mean)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-8-5、用数学运算转换数据\"><a href=\"#4-8-5、用数学运算转换数据\" class=\"headerlink\" title=\"4.8.5、用数学运算转换数据\"></a>4.8.5、用数学运算转换数据</h3><p>Flux 支持数据转换中的数学表达式。本文介绍如何使用 Flux 算术运算符“映射”数据并使用数学运算转换值。</p>\n<p><strong>基本数学运算</strong>：Flux 数学运算中的操作数必须是相同的数据类型。例如，整数不能用于浮点运算。否则，您将收到类似于以下内容的错误：</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Error: </span>type error: float != int</span><br></pre></td></tr></table></figure>\n\n<p>要将操作数转换为相同类型，请使用类型转换函数或手动格式化操作数。操作数数据类型确定输出数据类型。例如：</p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100 </span><br><span class=\"line\">100.0 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"number\">20</span> / <span class=\"number\">8</span></span></span><br><span class=\"line\">2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"number\">20.0</span> / <span class=\"number\">8.0</span></span></span><br><span class=\"line\">2.5</span><br></pre></td></tr></table></figure>\n\n<p>使用 map() 函数重新映射列值并应用数学运算。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data</span><br><span class=\"line\">    |&gt; map(fn: <span class=\"function\"><span class=\"params\">(r)</span> =&gt;</span> (&#123; r <span class=\"keyword\">with</span> _value: r._value * r._value &#125;))</span><br></pre></td></tr></table></figure>\n\n<p>输入：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>2</td>\n</tr>\n<tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>4</td>\n</tr>\n<tr>\n<td>2020-01-01T00:03:00Z</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>5</td>\n</tr>\n</tbody></table>\n<p>输出：</p>\n<p><strong>Flux 允许您创建使用数学运算的自定义函数</strong>。查看以下示例。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 自定义乘法函数：</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">multiply</span> = <span class=\"params\">(x, y)</span> =&gt;</span> x * y</span><br><span class=\"line\">multiply(x: <span class=\"number\">10</span>, y: <span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">- 自定义百分比函数</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">percent</span> = <span class=\"params\">(sample, total)</span> =&gt;</span> (sample / total) * <span class=\"number\">100.0</span></span><br><span class=\"line\">percent(sample: <span class=\"number\">20.0</span>, total: <span class=\"number\">80.0</span>) </span><br></pre></td></tr></table></figure>\n\n<p>要转换输入流中的多个值，您的函数需要：</p>\n<ul>\n<li>处理管道转发数据。</li>\n<li>计算所需的每个操作数都存在于每一行中（参见下面的 Pivot vs join）。</li>\n<li>使用 map() 函数遍历每一行。</li>\n</ul>\n<p>下面的示例 multiplyByX() 函数包括：</p>\n<ul>\n<li>表示输入数据流 (&lt;-) 的表参数。</li>\n<li>一个 x 参数，它是 _value 列中的值相乘的数字。</li>\n<li>遍历输入流中每一行的 map() 函数。它使用 with 运算符来保留每行中的现有列。它还将 _value 列乘以 x。</li>\n</ul>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">multiplyByX</span> = <span class=\"params\">(x, tables=&lt;-)</span> =&gt;</span> tables</span><br><span class=\"line\">    |&gt; map(fn: <span class=\"function\"><span class=\"params\">(r)</span> =&gt;</span> (&#123;r <span class=\"keyword\">with</span> _value: r._value * x&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">data</span><br><span class=\"line\">    |&gt; multiplyByX(x: <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<p>例：将Byte转换为GB。要将活动内存从字节转换为千兆字节 (GB)，请将内存测量中的活动字段除以 1,073,741,824。map() 函数遍历管道转发数据中的每一行，并通过将原始 _value 除以 1073741824 来定义新的 _value。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span>(bucket: <span class=\"string\">&quot;db/rp&quot;</span>)</span><br><span class=\"line\">    |&gt; range(start: <span class=\"number\">-10</span>m)</span><br><span class=\"line\">    |&gt; filter(fn: <span class=\"function\"><span class=\"params\">(r)</span> =&gt;</span> r._measurement == <span class=\"string\">&quot;mem&quot;</span> <span class=\"keyword\">and</span> r._field == <span class=\"string\">&quot;active&quot;</span>)</span><br><span class=\"line\">    |&gt; map(fn: <span class=\"function\"><span class=\"params\">(r)</span> =&gt;</span> (&#123;r <span class=\"keyword\">with</span> _value: r._value / <span class=\"number\">1073741824</span>&#125;))</span><br></pre></td></tr></table></figure>\n\n<p>您可以将相同的计算转换为函数：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">bytesToGB</span> = <span class=\"params\">(tables=&lt;-)</span> =&gt;</span> tables</span><br><span class=\"line\">    |&gt; map(fn: <span class=\"function\"><span class=\"params\">(r)</span> =&gt;</span> (&#123;r <span class=\"keyword\">with</span> _value: r._value / <span class=\"number\">1073741824</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">data</span><br><span class=\"line\">    |&gt; bytesToGB()</span><br></pre></td></tr></table></figure>\n\n<p>因为原始度量（字节）是整数，所以操作的输出是整数并且不包括部分 GB。要计算部分 GB，请使用 float() 函数将 _value 列及其值转换为浮点数，并将除法运算中的分母格式化为浮点数。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">bytesToGB</span> = <span class=\"params\">(tables=&lt;-)</span> =&gt;</span> tables</span><br><span class=\"line\">    |&gt; map(fn: <span class=\"function\"><span class=\"params\">(r)</span> =&gt;</span> (&#123;r <span class=\"keyword\">with</span> _value: float(v: r._value) / <span class=\"number\">1073741824.0</span>&#125;))</span><br></pre></td></tr></table></figure>\n\n<p><strong>要计算百分比，请使用简单除法</strong>，然后将结果乘以 100。</p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\"><span class=\"number\">1.0</span> / <span class=\"number\">4.0</span> * <span class=\"number\">100.0</span></span></span><br><span class=\"line\">25.0</span><br></pre></td></tr></table></figure>\n\n<p>**pivot() &amp; join()**：要在 Flux 中查询和使用数学运算中的值，操作数值必须存在于单行中。 pivot() 和 join() 都会这样做，但两者之间有重要区别：</p>\n<ul>\n<li>pivot性能更高：pivot() 读取和操作单个数据流。 join() 需要两个数据流，读取和组合两个数据流的开销可能很大，尤其是对于较大的数据集。</li>\n<li>对多个数据源使用join()：查询来自不同存储桶或数据源的数据时使用 join()。</li>\n</ul>\n<p>将字段透视到列中以进行数学运算：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">data</span></span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">pivot</span>(<span class=\"attribute\">rowKey</span>: [<span class=\"string\">&quot;_time&quot;</span>], <span class=\"attribute\">columnKey</span>: [<span class=\"string\">&quot;_field&quot;</span>], <span class=\"attribute\">valueColumn</span>: <span class=\"string\">&quot;_value&quot;</span>)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">map</span>(<span class=\"attribute\">fn</span>: (r) =&gt; (&#123;r with <span class=\"attribute\">_value</span>: (r.field1 + r.field2) / r.field3 * <span class=\"number\">100.0</span>&#125;))</span><br></pre></td></tr></table></figure>\n\n<p>加入多个数据源进行数学运算：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &quot;sql&quot;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &quot;influxdata/influxdb/secrets&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">pgUser = secrets.<span class=\"keyword\">get</span>(key: &quot;POSTGRES_USER&quot;)</span><br><span class=\"line\">pgPass = secrets.<span class=\"keyword\">get</span>(key: &quot;POSTGRES_PASSWORD&quot;)</span><br><span class=\"line\">pgHost = secrets.<span class=\"keyword\">get</span>(key: &quot;POSTGRES_HOST&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">t1 = <span class=\"keyword\">sql</span>.<span class=\"keyword\">from</span>(</span><br><span class=\"line\">    driverName: &quot;postgres&quot;,</span><br><span class=\"line\">    dataSourceName: &quot;postgresql://$&#123;pgUser&#125;:$&#123;pgPass&#125;@$&#123;pgHost&#125;&quot;,</span><br><span class=\"line\">    query: &quot;SELECT id, name, available FROM exampleTable&quot;,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">t2 = <span class=\"keyword\">from</span>(bucket: &quot;db/rp&quot;)</span><br><span class=\"line\">    |&gt; range(<span class=\"keyword\">start</span>: <span class=\"number\">-1</span>h)</span><br><span class=\"line\">    |&gt; <span class=\"keyword\">filter</span>(fn: (r) =&gt; r._measurement == &quot;example-measurement&quot; <span class=\"keyword\">and</span> r._field == &quot;example-field&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span>(<span class=\"keyword\">tables</span>: &#123;t1: t1, t2: t2&#125;, <span class=\"keyword\">on</span>: [&quot;id&quot;])</span><br><span class=\"line\">    |&gt; map(fn: (r) =&gt; (&#123;r <span class=\"keyword\">with</span> _value: r._value_t2 / r.available_t1 * <span class=\"number\">100.0</span>&#125;))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-8-6、计算百分比\"><a href=\"#4-8-6、计算百分比\" class=\"headerlink\" title=\"4.8.6、计算百分比\"></a>4.8.6、计算百分比</h3><p>从查询数据计算百分比是时间序列数据的常见用例。要计算Flux中的百分比，操作数必须在每一行中。使用 map() 重新映射行中的值并计算百分比。</p>\n<p><strong>计算百分比：</strong> </p>\n<ol>\n<li>使用 from()、range() 和 filter() 来查询操作数。</li>\n<li>使用 pivot() 或 join() 将操作数值对齐到行中。</li>\n<li>使用 map() 将分子操作数值除以分母操作数值并乘以 100。</li>\n</ol>\n<p>以下示例使用 pivot() 将操作数对​​齐到行中，因为 pivot() 在大多数情况下都有效，并且比 join() 性能更高。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">data</span></span><br><span class=\"line\">  |&gt; <span class=\"selector-tag\">pivot</span>(<span class=\"attribute\">rowKey</span>:[<span class=\"string\">&quot;_time&quot;</span>], <span class=\"attribute\">columnKey</span>: [<span class=\"string\">&quot;_field&quot;</span>], <span class=\"attribute\">valueColumn</span>: <span class=\"string\">&quot;_value&quot;</span>)</span><br><span class=\"line\">  |&gt; <span class=\"selector-tag\">map</span>(</span><br><span class=\"line\">      <span class=\"attribute\">fn</span>: (r) =&gt; (&#123;</span><br><span class=\"line\">          <span class=\"attribute\">_time</span>: r._time,</span><br><span class=\"line\">          <span class=\"attribute\">_field</span>: <span class=\"string\">&quot;used_percent&quot;</span>,</span><br><span class=\"line\">          <span class=\"attribute\">_value</span>: <span class=\"built_in\">float</span>(<span class=\"attribute\">v</span>: r.used) / <span class=\"built_in\">float</span>(<span class=\"attribute\">v</span>: r.total) * <span class=\"number\">100.0</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n\n<p>输入：</p>\n<table>\n<thead>\n<tr>\n<th>_time_时间</th>\n<th>_field_场地</th>\n<th>_value_价值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:00:00Z2020-01-01T00:00:00Z</td>\n<td>used用过的</td>\n<td>2.5</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:10Z2020-01-01T00:00:10Z</td>\n<td>used用过的</td>\n<td>3.1</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:20Z2020-01-01T00:00:20Z</td>\n<td>used用过的</td>\n<td>4.2</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>_time_时间</th>\n<th>_field_场地</th>\n<th>_value_价值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:00:00Z2020-01-01T00:00:00Z</td>\n<td>total全部的</td>\n<td>8.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:10Z2020-01-01T00:00:10Z</td>\n<td>total全部的</td>\n<td>8.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:20Z2020-01-01T00:00:20Z</td>\n<td>total全部的</td>\n<td>8.0</td>\n</tr>\n</tbody></table>\n<p>输出：</p>\n<table>\n<thead>\n<tr>\n<th>_time_时间</th>\n<th>_field_场地</th>\n<th>_value_价值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:00:00Z2020-01-01T00:00:00Z</td>\n<td>used_percentused_percent</td>\n<td>31.25</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:10Z2020-01-01T00:00:10Z</td>\n<td>used_percentused_percent</td>\n<td>38.75</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:20Z2020-01-01T00:00:20Z</td>\n<td>used_percentused_percent</td>\n<td>52.50</td>\n</tr>\n</tbody></table>\n<p><strong>示例1</strong>：以下示例从 gpu-monitor 存储桶中查询数据并计算一段时间内使用的 GPU 内存百分比。数据包括以下内容：</p>\n<ul>\n<li>gpu 测量；</li>\n<li>mem_used 字段：使用的 GPU 内存（以字节为单位）</li>\n<li>mem_total 字段：以字节为单位的总 GPU 内存</li>\n</ul>\n<p>查询mem_used和mem_total字段：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span>(bucket: <span class=\"string\">&quot;gpu-monitor&quot;</span>)</span><br><span class=\"line\">    |&gt; range(start: <span class=\"number\">2020</span><span class=\"number\">-01</span><span class=\"number\">-01</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>Z)</span><br><span class=\"line\">    |&gt; filter(fn: <span class=\"function\"><span class=\"params\">(r)</span> =&gt;</span> r._measurement == <span class=\"string\">&quot;gpu&quot;</span> <span class=\"keyword\">and</span> r._field =~ <span class=\"regexp\">/mem_/</span>)</span><br></pre></td></tr></table></figure>\n\n<p>返回以下两个表流：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_measurement</th>\n<th>_field</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:00:00Z</td>\n<td>gpu</td>\n<td>mem_used</td>\n<td>2517924577</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:10Z</td>\n<td>gpu</td>\n<td>mem_used</td>\n<td>2695091978</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:20Z</td>\n<td>gpu</td>\n<td>mem_used</td>\n<td>2576980377</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:30Z</td>\n<td>gpu</td>\n<td>mem_used</td>\n<td>3006477107</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:40Z</td>\n<td>gpu</td>\n<td>mem_used</td>\n<td>3543348019</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:50Z</td>\n<td>gpu</td>\n<td>mem_used</td>\n<td>4402341478</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_measurement</th>\n<th>_field</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:00:00Z</td>\n<td>gpu</td>\n<td>mem_total</td>\n<td>8589934592</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:10Z</td>\n<td>gpu</td>\n<td>mem_total</td>\n<td>8589934592</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:20Z</td>\n<td>gpu</td>\n<td>mem_total</td>\n<td>8589934592</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:30Z</td>\n<td>gpu</td>\n<td>mem_total</td>\n<td>8589934592</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:40Z</td>\n<td>gpu</td>\n<td>mem_total</td>\n<td>8589934592</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:50Z</td>\n<td>gpu</td>\n<td>mem_total</td>\n<td>8589934592</td>\n</tr>\n</tbody></table>\n<p>使用 pivot() 将 mem_used 和 mem_total 字段转换为列。输出包括 mem_used 和 mem_total 列，其中包含每个对应 _time 的值。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|&gt; <span class=\"selector-tag\">pivot</span>(<span class=\"attribute\">rowKey</span>:[<span class=\"string\">&quot;_time&quot;</span>], <span class=\"attribute\">columnKey</span>: [<span class=\"string\">&quot;_field&quot;</span>], <span class=\"attribute\">valueColumn</span>: <span class=\"string\">&quot;_value&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_measurement</th>\n<th>mem_used</th>\n<th>mem_total</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:00:00Z</td>\n<td>gpu</td>\n<td>2517924577</td>\n<td>8589934592</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:10Z</td>\n<td>gpu</td>\n<td>2695091978</td>\n<td>8589934592</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:20Z</td>\n<td>gpu</td>\n<td>2576980377</td>\n<td>8589934592</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:30Z</td>\n<td>gpu</td>\n<td>3006477107</td>\n<td>8589934592</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:40Z</td>\n<td>gpu</td>\n<td>3543348019</td>\n<td>8589934592</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:50Z</td>\n<td>gpu</td>\n<td>4402341478</td>\n<td>8589934592</td>\n</tr>\n</tbody></table>\n<p>现在每一行都包含计算百分比所需的值。使用 map() 重新映射每行中的值。将 mem_used 除以 mem_total 并乘以 100 以返回百分比。（要返回包含小数点的精确浮点百分比值，下面的示例将整数字段值转换为浮点数并乘以浮点值 (100.0)。）</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|&gt; <span class=\"selector-tag\">map</span>(</span><br><span class=\"line\">       <span class=\"attribute\">fn</span>: (r) =&gt; (&#123;</span><br><span class=\"line\">           <span class=\"attribute\">_time</span>: r._time,</span><br><span class=\"line\">           <span class=\"attribute\">_measurement</span>: r._measurement,</span><br><span class=\"line\">           <span class=\"attribute\">_field</span>: <span class=\"string\">&quot;mem_used_percent&quot;</span>,</span><br><span class=\"line\">           <span class=\"attribute\">_value</span>: <span class=\"built_in\">float</span>(<span class=\"attribute\">v</span>: r.mem_used) / <span class=\"built_in\">float</span>(<span class=\"attribute\">v</span>: r.mem_total) * <span class=\"number\">100.0</span></span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">   )</span><br></pre></td></tr></table></figure>\n\n<p>查询结果：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_measurement</th>\n<th>_field</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:00:00Z</td>\n<td>gpu</td>\n<td>mem_used_percent</td>\n<td>29.31</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:10Z</td>\n<td>gpu</td>\n<td>mem_used_percent</td>\n<td>31.37</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:20Z</td>\n<td>gpu</td>\n<td>mem_used_percent</td>\n<td>30.00</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:30Z</td>\n<td>gpu</td>\n<td>mem_used_percent</td>\n<td>35.00</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:40Z</td>\n<td>gpu</td>\n<td>mem_used_percent</td>\n<td>41.25</td>\n</tr>\n<tr>\n<td>2020-01-01T00:00:50Z</td>\n<td>gpu</td>\n<td>mem_used_percent</td>\n<td>51.25</td>\n</tr>\n</tbody></table>\n<p>完整查询：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">from</span>(<span class=\"attribute\">bucket</span>: <span class=\"string\">&quot;gpu-monitor&quot;</span>)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">range</span>(<span class=\"attribute\">start</span>: <span class=\"number\">2020</span><span class=\"attribute\">-01-01T00</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span>Z)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">filter</span>(<span class=\"attribute\">fn</span>: (r) =&gt; r._measurement == <span class=\"string\">&quot;gpu&quot;</span> <span class=\"keyword\">and</span> r._field =~ /mem_/ )</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">pivot</span>(<span class=\"attribute\">rowKey</span>:[<span class=\"string\">&quot;_time&quot;</span>], <span class=\"attribute\">columnKey</span>: [<span class=\"string\">&quot;_field&quot;</span>], <span class=\"attribute\">valueColumn</span>: <span class=\"string\">&quot;_value&quot;</span>)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">map</span>(</span><br><span class=\"line\">        <span class=\"attribute\">fn</span>: (r) =&gt; (&#123;</span><br><span class=\"line\">            <span class=\"attribute\">_time</span>: r._time,</span><br><span class=\"line\">            <span class=\"attribute\">_measurement</span>: r._measurement,</span><br><span class=\"line\">            <span class=\"attribute\">_field</span>: <span class=\"string\">&quot;mem_used_percent&quot;</span>,</span><br><span class=\"line\">            <span class=\"attribute\">_value</span>: <span class=\"built_in\">float</span>(<span class=\"attribute\">v</span>: r.mem_used) / <span class=\"built_in\">float</span>(<span class=\"attribute\">v</span>: r.mem_total) * <span class=\"number\">100.0</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例2</strong>：使用多个字段计算百分比。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">from</span>(<span class=\"attribute\">bucket</span>: <span class=\"string\">&quot;db/rp&quot;</span>)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">range</span>(<span class=\"attribute\">start</span>: -<span class=\"number\">1</span>h)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">filter</span>(<span class=\"attribute\">fn</span>: (r) =&gt; r._measurement == <span class=\"string\">&quot;example-measurement&quot;</span>)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">filter</span>(<span class=\"attribute\">fn</span>: (r) =&gt; r._field == <span class=\"string\">&quot;used_system&quot;</span> or r._field == <span class=\"string\">&quot;used_user&quot;</span> or r._field == <span class=\"string\">&quot;total&quot;</span>)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">pivot</span>(<span class=\"attribute\">rowKey</span>: [<span class=\"string\">&quot;_time&quot;</span>], <span class=\"attribute\">columnKey</span>: [<span class=\"string\">&quot;_field&quot;</span>], <span class=\"attribute\">valueColumn</span>: <span class=\"string\">&quot;_value&quot;</span>)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">map</span>(<span class=\"attribute\">fn</span>: (r) =&gt; (&#123;r with <span class=\"attribute\">_value</span>: <span class=\"built_in\">float</span>(<span class=\"attribute\">v</span>: r.used_system + r.used_user) / <span class=\"built_in\">float</span>(<span class=\"attribute\">v</span>: r.total) * <span class=\"number\">100.0</span>&#125;))</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例3</strong>：使用多个测量计算百分比：</p>\n<ul>\n<li>确保测量值在同一个桶中。</li>\n<li>使用 filter() 包含来自两个测量的数据。</li>\n<li>使用 group() 取消分组数据并返回单个表。</li>\n<li>使用 pivot() 将字段旋转到列中。</li>\n<li>使用 map() 重新映射行并执行百分比计算。</li>\n</ul>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">from</span><span class=\"params\">(bucket: <span class=\"string\">&quot;db/rp&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    |&gt; <span class=\"title\">range</span><span class=\"params\">(start: -<span class=\"number\">1</span>h)</span></span></span><br><span class=\"line\"><span class=\"function\">    |&gt; <span class=\"title\">filter</span><span class=\"params\">(fn: (r)</span> =&gt; <span class=\"params\">(r._measurement == <span class=\"string\">&quot;m1&quot;</span> or r._measurement == <span class=\"string\">&quot;m2&quot;</span>)</span> <span class=\"title\">and</span> <span class=\"params\">(r._field == <span class=\"string\">&quot;field1&quot;</span> or r._field == <span class=\"string\">&quot;field2&quot;</span>)</span>)</span></span><br><span class=\"line\"><span class=\"function\">    |&gt; <span class=\"title\">group</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    |&gt; <span class=\"title\">pivot</span><span class=\"params\">(rowKey: [<span class=\"string\">&quot;_time&quot;</span>], columnKey: [<span class=\"string\">&quot;_field&quot;</span>], valueColumn: <span class=\"string\">&quot;_value&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    |&gt; <span class=\"title\">map</span><span class=\"params\">(fn: (r)</span> =&gt; <span class=\"params\">(&#123;r with _value: r.field1 / r.field2 * <span class=\"number\">100.0</span>&#125;)</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例4</strong>：使用多个数据源计算百分比。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &quot;sql&quot;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &quot;influxdata/influxdb/secrets&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">pgUser = secrets.<span class=\"keyword\">get</span>(key: &quot;POSTGRES_USER&quot;)</span><br><span class=\"line\">pgPass = secrets.<span class=\"keyword\">get</span>(key: &quot;POSTGRES_PASSWORD&quot;)</span><br><span class=\"line\">pgHost = secrets.<span class=\"keyword\">get</span>(key: &quot;POSTGRES_HOST&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">t1 = <span class=\"keyword\">sql</span>.<span class=\"keyword\">from</span>(</span><br><span class=\"line\">    driverName: &quot;postgres&quot;,</span><br><span class=\"line\">    dataSourceName: &quot;postgresql://$&#123;pgUser&#125;:$&#123;pgPass&#125;@$&#123;pgHost&#125;&quot;,</span><br><span class=\"line\">    query: &quot;SELECT id, name, available FROM exampleTable&quot;,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">t2 = <span class=\"keyword\">from</span>(bucket: &quot;db/rp&quot;)</span><br><span class=\"line\">    |&gt; range(<span class=\"keyword\">start</span>: <span class=\"number\">-1</span>h)</span><br><span class=\"line\">    |&gt; <span class=\"keyword\">filter</span>(fn: (r) =&gt; r._measurement == &quot;example-measurement&quot; <span class=\"keyword\">and</span> r._field == &quot;example-field&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span>(<span class=\"keyword\">tables</span>: &#123;t1: t1, t2: t2&#125;, <span class=\"keyword\">on</span>: [&quot;id&quot;])</span><br><span class=\"line\">    |&gt; map(fn: (r) =&gt; (&#123;r <span class=\"keyword\">with</span> _value: r._value_t2 / r.available_t1 * <span class=\"number\">100.0</span>&#125;))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-8-7、increase-：跟踪表中多个列的增加\"><a href=\"#4-8-7、increase-：跟踪表中多个列的增加\" class=\"headerlink\" title=\"4.8.7、increase()：跟踪表中多个列的增加\"></a>4.8.7、increase()：跟踪表中多个列的增加</h3><p>当跟踪随时间推移或定期重置的计数器值的变化时，此功能特别有用。increase() 返回表中行之间非负差异的累积总和。</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span></span></span><br><span class=\"line\">    |&gt; increase()</span><br></pre></td></tr></table></figure>\n\n<p>输入：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>2</td>\n</tr>\n<tr>\n<td>2020-01-01T00:03:00Z</td>\n<td>8</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>10</td>\n</tr>\n<tr>\n<td>2020-01-01T00:05:00Z</td>\n<td>0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:06:00Z</td>\n<td>4</td>\n</tr>\n</tbody></table>\n<p>输出：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2020-01-01T00:03:00Z</td>\n<td>7</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>9</td>\n</tr>\n<tr>\n<td>2020-01-01T00:05:00Z</td>\n<td>9</td>\n</tr>\n<tr>\n<td>2020-01-01T00:06:00Z</td>\n<td>13</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-8-8、movingAverage-amp-timedMovingAverage-：移动平均值\"><a href=\"#4-8-8、movingAverage-amp-timedMovingAverage-：移动平均值\" class=\"headerlink\" title=\"4.8.8、movingAverage() &amp; timedMovingAverage() ：移动平均值\"></a>4.8.8、movingAverage() &amp; timedMovingAverage() ：移动平均值</h3><p>使用movingAverage() 或timedMovingAverage() 函数返回数据的移动平均值：</p>\n<ul>\n<li><p>movingAverage()：对于表中的每一行，movingAverage() 返回当前值和先前值的平均值，其中 n 是用于计算平均值的值的总数。</p>\n</li>\n<li><p>timedMovingAverage()：返回当前值和上一周期（持续时间）中所有行值的平均值。它以每个参数定义的频率返回移动平均值。下图中的每种颜色代表用于计算平均值的时间段以及返回表示平均值的点的时间。如果every &#x3D; 30m 且period &#x3D; 1h：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2047518868e24483908305bbecfb5077.png\"></p>\n</li>\n</ul>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span></span></span><br><span class=\"line\">    |&gt; movingAverage(n: <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>输入：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>1.2</td>\n</tr>\n<tr>\n<td>2020-01-01T00:03:00Z</td>\n<td>1.8</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>0.9</td>\n</tr>\n<tr>\n<td>2020-01-01T00:05:00Z</td>\n<td>1.4</td>\n</tr>\n<tr>\n<td>2020-01-01T00:06:00Z</td>\n<td>2.0</td>\n</tr>\n</tbody></table>\n<p>输出：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:03:00Z</td>\n<td>1.33</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>1.30</td>\n</tr>\n<tr>\n<td>2020-01-01T00:05:00Z</td>\n<td>1.36</td>\n</tr>\n<tr>\n<td>2020-01-01T00:06:00Z</td>\n<td>1.43</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span></span></span><br><span class=\"line\">    |&gt; timedMovingAverage(every: 2m, period: 4m)</span><br></pre></td></tr></table></figure>\n\n<p>输入：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>1.2</td>\n</tr>\n<tr>\n<td>2020-01-01T00:03:00Z</td>\n<td>1.8</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>0.9</td>\n</tr>\n<tr>\n<td>2020-01-01T00:05:00Z</td>\n<td>1.4</td>\n</tr>\n<tr>\n<td>2020-01-01T00:06:00Z</td>\n<td>2.0</td>\n</tr>\n</tbody></table>\n<p>输出：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>1.000</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>1.333</td>\n</tr>\n<tr>\n<td>2020-01-01T00:06:00Z</td>\n<td>1.325</td>\n</tr>\n<tr>\n<td>2020-01-01T00:06:00Z</td>\n<td>1.150</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-8-9、计算变化率\"><a href=\"#4-8-9、计算变化率\" class=\"headerlink\" title=\"4.8.9、计算变化率\"></a>4.8.9、计算变化率</h3><p>使用 derivative() 函数计算后续值之间的变化率，或使用 aggregate.rate() 函数计算每个时间窗口的平均变化率。如果点之间的时间发生变化，这些函数会将点标准化为一个共同的时间间隔，从而使值易于比较。</p>\n<p>derivative()：计算后续非空值之间每单位时间的变化率。默认情况下，derivative() 仅返回正导数值，并将负值替换为 null。计算值作为浮点数返回。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data</span><br><span class=\"line\">    |&gt; <span class=\"title function_ invoke__\">derivative</span>(<span class=\"attr\">unit</span>: <span class=\"number\">1</span>m, <span class=\"attr\">nonNegative</span>: <span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n\n<p>输入：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:00:00Z</td>\n<td>250</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>160</td>\n</tr>\n<tr>\n<td>2020-01-01T00:12:00Z</td>\n<td>150</td>\n</tr>\n<tr>\n<td>2020-01-01T00:19:00Z</td>\n<td>220</td>\n</tr>\n<tr>\n<td>2020-01-01T00:32:00Z</td>\n<td>200</td>\n</tr>\n<tr>\n<td>2020-01-01T00:51:00Z</td>\n<td>290</td>\n</tr>\n<tr>\n<td>2020-01-01T01:00:00Z</td>\n<td>340</td>\n</tr>\n</tbody></table>\n<p>输出：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:04:00Z</td>\n<td></td>\n</tr>\n<tr>\n<td>2020-01-01T00:12:00Z</td>\n<td></td>\n</tr>\n<tr>\n<td>2020-01-01T00:19:00Z</td>\n<td>10.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:32:00Z</td>\n<td></td>\n</tr>\n<tr>\n<td>2020-01-01T00:51:00Z</td>\n<td>4.74</td>\n</tr>\n<tr>\n<td>2020-01-01T01:00:00Z</td>\n<td>5.56</td>\n</tr>\n</tbody></table>\n<p>要返回负导数值，请将 nonNegative 参数设置为 false。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|&gt; <span class=\"title function_ invoke__\">derivative</span>(<span class=\"attr\">unit</span>: <span class=\"number\">1</span>m, <span class=\"attr\">nonNegative</span>: <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n\n<p>输入：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:00:00Z</td>\n<td>250</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>160</td>\n</tr>\n<tr>\n<td>2020-01-01T00:12:00Z</td>\n<td>150</td>\n</tr>\n<tr>\n<td>2020-01-01T00:19:00Z</td>\n<td>220</td>\n</tr>\n<tr>\n<td>2020-01-01T00:32:00Z</td>\n<td>200</td>\n</tr>\n<tr>\n<td>2020-01-01T00:51:00Z</td>\n<td>290</td>\n</tr>\n<tr>\n<td>2020-01-01T01:00:00Z</td>\n<td>340</td>\n</tr>\n</tbody></table>\n<p>输出：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>-22.5</td>\n</tr>\n<tr>\n<td>2020-01-01T00:12:00Z</td>\n<td>-1.25</td>\n</tr>\n<tr>\n<td>2020-01-01T00:19:00Z</td>\n<td>10.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:32:00Z</td>\n<td>-1.54</td>\n</tr>\n<tr>\n<td>2020-01-01T00:51:00Z</td>\n<td>4.74</td>\n</tr>\n<tr>\n<td>2020-01-01T01:00:00Z</td>\n<td>5.56</td>\n</tr>\n</tbody></table>\n<p>使用 aggregate.rate() 函数计算每个时间窗口的平均变化率。aggregate.rate() 返回由 every 定义的时间间隔的每单位平均变化率（作为浮点数）。负值替换为 null。aggregate.rate() 不支持 nonNegative: false。</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &quot;experimental/aggregate&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span></span></span><br><span class=\"line\">    |&gt; aggregate.rate(every: 20m, unit: 1m)</span><br></pre></td></tr></table></figure>\n\n<p>输入：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:00:00Z</td>\n<td>250</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>160</td>\n</tr>\n<tr>\n<td>2020-01-01T00:12:00Z</td>\n<td>150</td>\n</tr>\n<tr>\n<td>2020-01-01T00:19:00Z</td>\n<td>220</td>\n</tr>\n<tr>\n<td>2020-01-01T00:32:00Z</td>\n<td>200</td>\n</tr>\n<tr>\n<td>2020-01-01T00:51:00Z</td>\n<td>290</td>\n</tr>\n<tr>\n<td>2020-01-01T01:00:00Z</td>\n<td>340</td>\n</tr>\n</tbody></table>\n<p>输出：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:20:00Z</td>\n<td></td>\n</tr>\n<tr>\n<td>2020-01-01T00:40:00Z</td>\n<td>10.0</td>\n</tr>\n<tr>\n<td>2020-01-01T01:00:00Z</td>\n<td>4.74</td>\n</tr>\n<tr>\n<td>2020-01-01T01:20:00Z</td>\n<td>5.56</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-8-10、使用Flux创建直方图\"><a href=\"#4-8-10、使用Flux创建直方图\" class=\"headerlink\" title=\"4.8.10、使用Flux创建直方图\"></a>4.8.10、使用Flux创建直方图</h3><p>直方图为您的数据分布提供了宝贵的洞察力。本指南介绍如何使用 Flux 的 histogram() 函数将数据转换为累积直方图。</p>\n<p><strong>histogram()函数</strong>：通过计算“bins”列表的数据频率来近似数据集的累积分布。 bin 只是数据点所在的范围。所有小于或等于边界的数据点都计入 bin。在直方图输出中，添加了一列 (le)，表示每个 bin 的上限。 Bin 计数是累积的。</p>\n<p>Flux 提供了两个辅助函数来生成直方图 的bins。每个都生成并输出一个浮点数组，设计用于 histogram() 函数的 bins 参数。</p>\n<ul>\n<li>linearBins()：生成线性分隔的浮点数列表。&#96;&#96;&#96;<br>linearBins(start: 0.0, width: 10.0, count: 10) <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">*   <span class=\"title function_ invoke__\">logarithmicBins</span>()：生成一个以指数方式分隔的浮点数列表。```</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">logarithmicBins</span>(<span class=\"attr\">start</span>: <span class=\"number\">1.0</span>, <span class=\"attr\">factor</span>: <span class=\"number\">2.0</span>, <span class=\"attr\">count</span>: <span class=\"number\">10</span>, <span class=\"attr\">infinty</span>: <span class=\"literal\">true</span>) </span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>示例1</strong>：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data</span><br><span class=\"line\">    |&gt; histogram(</span><br><span class=\"line\"><span class=\"symbol\">        column:</span> <span class=\"string\">&quot;_value&quot;</span>,</span><br><span class=\"line\"><span class=\"symbol\">        upperBoundColumn:</span> <span class=\"string\">&quot;le&quot;</span>,</span><br><span class=\"line\"><span class=\"symbol\">        countColumn:</span> <span class=\"string\">&quot;_value&quot;</span>,</span><br><span class=\"line\"><span class=\"symbol\">        bins:</span> [<span class=\"number\">100.0</span>, <span class=\"number\">200.0</span>, <span class=\"number\">300.0</span>, <span class=\"number\">400.0</span>],</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<p>输入：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:00:00Z</td>\n<td>250.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>160.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>150.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:03:00Z</td>\n<td>220.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>200.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:05:00Z</td>\n<td>290.0</td>\n</tr>\n<tr>\n<td>2020-01-01T01:00:00Z</td>\n<td>340.0</td>\n</tr>\n</tbody></table>\n<p>输出：</p>\n<table>\n<thead>\n<tr>\n<th>le</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>100.0</td>\n<td>0.0</td>\n</tr>\n<tr>\n<td>200.0</td>\n<td>3.0</td>\n</tr>\n<tr>\n<td>300.0</td>\n<td>6.0</td>\n</tr>\n<tr>\n<td>400.0</td>\n<td>7.0</td>\n</tr>\n</tbody></table>\n<p><strong>示例2</strong>：使用线性bin生成直方图。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">from</span>(<span class=\"attribute\">bucket</span>: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">range</span>(<span class=\"attribute\">start</span>: -<span class=\"number\">5</span>m)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">filter</span>(<span class=\"attribute\">fn</span>: (r) =&gt; r._measurement == <span class=\"string\">&quot;mem&quot;</span> <span class=\"keyword\">and</span> r._field == <span class=\"string\">&quot;used_percent&quot;</span>)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">histogram</span>(<span class=\"attribute\">bins</span>: <span class=\"built_in\">linearBins</span>(<span class=\"attribute\">start</span>: <span class=\"number\">65.5</span>, <span class=\"attribute\">width</span>: <span class=\"number\">0.5</span>, <span class=\"attribute\">count</span>: <span class=\"number\">20</span>, <span class=\"attribute\">infinity</span>: false))</span><br></pre></td></tr></table></figure>\n\n<p>输出表：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [_start, _stop, _field, _measurement, host]</span></span><br><span class=\"line\">                   <span class=\"attribute\">_start</span>:time                      _stop:time           _field:string     _measurement:string               host:string                      le:float                  _value:float</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                          <span class=\"number\">65</span>.<span class=\"number\">5</span>                             <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                            <span class=\"number\">66</span>                             <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                          <span class=\"number\">66</span>.<span class=\"number\">5</span>                             <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                            <span class=\"number\">67</span>                             <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                          <span class=\"number\">67</span>.<span class=\"number\">5</span>                             <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                            <span class=\"number\">68</span>                            <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                          <span class=\"number\">68</span>.<span class=\"number\">5</span>                            <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                            <span class=\"number\">69</span>                            <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                          <span class=\"number\">69</span>.<span class=\"number\">5</span>                            <span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                            <span class=\"number\">70</span>                            <span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                          <span class=\"number\">70</span>.<span class=\"number\">5</span>                            <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                            <span class=\"number\">71</span>                            <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                          <span class=\"number\">71</span>.<span class=\"number\">5</span>                            <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                            <span class=\"number\">72</span>                            <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                          <span class=\"number\">72</span>.<span class=\"number\">5</span>                            <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                            <span class=\"number\">73</span>                            <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                          <span class=\"number\">73</span>.<span class=\"number\">5</span>                            <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                            <span class=\"number\">74</span>                            <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                          <span class=\"number\">74</span>.<span class=\"number\">5</span>                            <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">19</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">24</span>:<span class=\"number\">58</span>.<span class=\"number\">423658000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                            <span class=\"number\">75</span>                            <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例3</strong>：使用对数bin生成直方图。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">from</span>(<span class=\"attribute\">bucket</span>: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">range</span>(<span class=\"attribute\">start</span>: -<span class=\"number\">5</span>m)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">filter</span>(<span class=\"attribute\">fn</span>: (r) =&gt; r._measurement == <span class=\"string\">&quot;mem&quot;</span> <span class=\"keyword\">and</span> r._field == <span class=\"string\">&quot;used_percent&quot;</span>)</span><br><span class=\"line\">    |&gt; <span class=\"selector-tag\">histogram</span>(<span class=\"attribute\">bins</span>: <span class=\"built_in\">logarithmicBins</span>(<span class=\"attribute\">start</span>: <span class=\"number\">0.5</span>, <span class=\"attribute\">factor</span>: <span class=\"number\">2.0</span>, <span class=\"attribute\">count</span>: <span class=\"number\">10</span>, <span class=\"attribute\">infinity</span>: false))</span><br></pre></td></tr></table></figure>\n\n<p>输出表：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [_start, _stop, _field, _measurement, host]</span></span><br><span class=\"line\">                   <span class=\"attribute\">_start</span>:time                      _stop:time           _field:string     _measurement:string               host:string                      le:float                  _value:float</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">23</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">28</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                           <span class=\"number\">0</span>.<span class=\"number\">5</span>                             <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">23</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">28</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                             <span class=\"number\">1</span>                             <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">23</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">28</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                             <span class=\"number\">2</span>                             <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">23</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">28</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                             <span class=\"number\">4</span>                             <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">23</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">28</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                             <span class=\"number\">8</span>                             <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">23</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">28</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                            <span class=\"number\">16</span>                             <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">23</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">28</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                            <span class=\"number\">32</span>                             <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">23</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">28</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                            <span class=\"number\">64</span>                             <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">23</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">28</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                           <span class=\"number\">128</span>                            <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">23</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">07</span>T22:<span class=\"number\">28</span>:<span class=\"number\">36</span>.<span class=\"number\">860664000</span>Z            used_percent                     mem  Scotts-MacBook-Pro.local                           <span class=\"number\">256</span>                            <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-8-11、填充\"><a href=\"#4-8-11、填充\" class=\"headerlink\" title=\"4.8.11、填充\"></a>4.8.11、填充</h3><p>使用 fill() 函数将空值替换为：</p>\n<ul>\n<li>前一个非空值：要使用前一个非空值填充空值，请将 usePrevious 参数设置为 true。&#96;&#96;&#96;<br>data<br>|&gt; fill(usePrevious: true)<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">*   一个指定的值。```</span><br><span class=\"line\">    data</span><br><span class=\"line\"><span class=\"title\">        |&gt; fill(value:</span> <span class=\"number\">0.0</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>fill() 函数不会填充空的时间窗口。它只替换现有数据中的空值。填充空的时间窗口需要时间插值（参见 influxdata&#x2F;flux#2428）。</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">data</span></span><br><span class=\"line\">    |&gt; <span class=\"function\"><span class=\"title\">fill</span>(<span class=\"variable\">usePrevious</span>: <span class=\"variable\"><span class=\"literal\">true</span></span>)</span></span><br></pre></td></tr></table></figure>\n\n<p>输入：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>null</td>\n</tr>\n<tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>0.8</td>\n</tr>\n<tr>\n<td>2020-01-01T00:03:00Z</td>\n<td>null</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>null</td>\n</tr>\n<tr>\n<td>2020-01-01T00:05:00Z</td>\n<td>1.4</td>\n</tr>\n</tbody></table>\n<p>输出：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>null</td>\n</tr>\n<tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>0.8</td>\n</tr>\n<tr>\n<td>2020-01-01T00:03:00Z</td>\n<td>0.8</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>0.8</td>\n</tr>\n<tr>\n<td>2020-01-01T00:05:00Z</td>\n<td>1.4</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span></span></span><br><span class=\"line\">    |&gt; fill(value: <span class=\"number\">0.0</span>)</span><br></pre></td></tr></table></figure>\n\n<p>输入：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>null</td>\n</tr>\n<tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>0.8</td>\n</tr>\n<tr>\n<td>2020-01-01T00:03:00Z</td>\n<td>null</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>null</td>\n</tr>\n<tr>\n<td>2020-01-01T00:05:00Z</td>\n<td>1.4</td>\n</tr>\n</tbody></table>\n<p>输出：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>0.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>0.8</td>\n</tr>\n<tr>\n<td>2020-01-01T00:03:00Z</td>\n<td>0.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>0.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:05:00Z</td>\n<td>1.4</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-8-12、查找中值\"><a href=\"#4-8-12、查找中值\" class=\"headerlink\" title=\"4.8.12、查找中值\"></a>4.8.12、查找中值</h3><p>使用 median() 函数返回一个表示输入数据的 0.5 分位数（第 50 个百分位数）或中位数的值。</p>\n<p>选择以下方法之一来计算中位数：</p>\n<ul>\n<li><p>estimate_tdigest（估计）：（默认）一种聚合方法，它使用 t-digest 数据结构来计算大型数据源的准确 0.5 分位数估计。输出表由包含计算中位数的单行组成。使用默认方法“estimate_tdigest”返回表中包含表中第 50 个百分位数据的值的所有行。&#96;&#96;&#96;<br>data<br>|&gt; median()</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">    |<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">    |<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:01:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:02:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:03:00Z </span>|<span class=\"string\"> 2.0 </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:04:00Z </span>|<span class=\"string\"> 3.0 </span>|</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"symbol\">*</span>   exact\\_mean（精确平均）：一种聚合方法，取最接近 0.5 分位数的两个点的平均值。输出表由包含计算中位数的单行组成。使用exact\\_mean 方法返回每个输入表的单行，其中包含最接近表中数据的数学中位数的两个值的平均值。```</span><br><span class=\"line\">    data</span><br><span class=\"line\">        |<span class=\"string\">&gt; median(method: &quot;exact_mean&quot;)</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:03:00Z</td>\n<td>2.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>3.0</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>exact_selector（精确选择器）：一种选择器方法，它返回至少 50% 的点小于的数据点。输出表由包含计算中位数的单行组成。&#96;&#96;&#96;<br>data<br>|&gt; median(method: “exact_selector”)</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">    |<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">    |<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:01:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:02:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:03:00Z </span>|<span class=\"string\"> 2.0 </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:04:00Z </span>|<span class=\"string\"> 3.0 </span>|</span><br><span class=\"line\">    </span><br><span class=\"line\">    |<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">    |<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:02:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">将median() 和 aggregateWindow() 一起使用：aggregateWindow() 将数据分割成时间窗口，将每个窗口中的数据聚合成一个点，然后去除基于时间的分割。它主要用于对数据进行下采样。要在 aggregateWindow() 中指定中值计算方法，请使用完整的函数语法：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>data<br>|&gt; aggregateWindow(every: 5m, fn: (tables&#x3D;&lt;-, column) &#x3D;&gt; tables |&gt; median(method: “exact_selector”))</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 4.8.13、查找百分位数和分位数</span></span><br><span class=\"line\"></span><br><span class=\"line\">使用 quantile() 函数返回输入数据的 q 分位数或百分位数内的所有值。百分位数和分位数非常相似，只是用于计算返回值的数字不同。百分位数使用 0 到 100 之间的数字计算。分位数使用 0.0 和 1.0 之间的数字计算。例如，0.5 分位数与第 50 个百分位数相同。</span><br><span class=\"line\"></span><br><span class=\"line\">选择以下方法之一来计算分位数：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">*</span>   estimate_tdigest（估计）：（默认）一种聚合方法，它使用 t-digest 数据结构来计算大型数据源的分位数估计。输出表由包含计算的分位数的单行组成。如果计算 0.5 分位数或第 50 个百分位数：</span><br><span class=\"line\">    </span><br><span class=\"line\">    |<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">    |<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:01:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:02:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:03:00Z </span>|<span class=\"string\"> 2.0 </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:04:00Z </span>|<span class=\"string\"> 3.0 </span>|</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"symbol\">*</span>   exact_mean（精确平均）：一种聚合方法，取最接近分位数的两个点的平均值。输出表由包含计算的分位数的单行组成。如果计算 0.5 分位数或第 50 个百分位数：</span><br><span class=\"line\">    </span><br><span class=\"line\">    |<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">    |<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:01:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:02:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:03:00Z </span>|<span class=\"string\"> 2.0 </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:04:00Z </span>|<span class=\"string\"> 3.0 </span>|</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"symbol\">*</span>   exact_selector（精确选择器）：一个选择器方法，它返回至少 q 个点小于的数据点。输出表由包含计算的分位数的单行组成。如果计算 0.5 分位数或第 50 个百分位数：</span><br><span class=\"line\">    </span><br><span class=\"line\">    |<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">    |<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:01:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:02:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:03:00Z </span>|<span class=\"string\"> 2.0 </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:04:00Z </span>|<span class=\"string\"> 3.0 </span>|</span><br><span class=\"line\">    </span><br><span class=\"line\">    |<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">    |<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">    |<span class=\"string\"> 2020-01-01T00:02:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">使用默认方法“estimate_tdigest”返回表中包含表中第 99 个百分位数据的值的所有行：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>data<br>|&gt; quantile(q: 0.99)</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">使用exact_mean 方法返回每个输入表的单行，其中包含最接近表中数据的数学分位数的两个值的平均值。例如，要计算 0.99 分位数：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>data<br>|&gt; quantile(q: 0.99, method: “exact_mean”)</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">使用exact_selector 方法为每个输入表返回一行，其中包含表中<span class=\"selector-tag\">q</span> * <span class=\"number\">100%</span> 的值小于的值。例如，要计算 <span class=\"number\">0.99</span> 分位数：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>data<br>|&gt; quantile(q: 0.99, method: “exact_selector”)</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">使用 <span class=\"built_in\">quantile</span>() 和 <span class=\"built_in\">aggregateWindow</span>()：<span class=\"built_in\">aggregateWindow</span>() 将数据分割成时间窗口，将每个窗口中的数据聚合成一个点，然后去除基于时间的分割。它主要用于对数据进行下采样。要在 <span class=\"built_in\">aggregateWindow</span>() 中指定分位数计算方法，请使用完整的函数语法：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>data<br>|&gt; aggregateWindow(<br>every: 5m,<br>fn: (tables&#x3D;&lt;-, column) &#x3D;&gt; tables<br>    |&gt; quantile(q: 0.99, method: “exact_selector”),<br>)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">4.8</span><span class=\"number\">.14</span>、<span class=\"keyword\">Join</span>（加入）：使用Flux连接数据</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span>() 函数将两个或多个输入流（其值在一组公共列上相等）合并为单个输出流。 Flux 允许您连接两个数据流之间共有的任何列，并为交叉测量连接和跨测量数学等操作打开了大门。为了说明连接操作，使用 Telegraf 捕获并存储在 InfluxDB 中的数据 <span class=\"operator\">-</span> 内存使用和进程。在本指南中，我们将连接两个数据流，一个代表内存使用量，另一个代表正在运行的进程总数，然后计算每个正在运行的进程的平均内存使用量。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">*</span><span class=\"operator\">*</span>为了执行连接，您必须有两个数据流<span class=\"operator\">*</span><span class=\"operator\">*</span>。为每个数据流分配一个变量。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">*</span>   定义一个 memUsed 变量，用于过滤 mem 度量和 used 字段。这将返回使用的内存量（以字节为单位）。```</span><br><span class=\"line\">    memUsed <span class=\"operator\">=</span> <span class=\"keyword\">from</span>(bucket: &quot;db/rp&quot;)</span><br><span class=\"line\">        <span class=\"operator\">|</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">range</span>(<span class=\"keyword\">start</span>: <span class=\"number\">-5</span>m)</span><br><span class=\"line\">        <span class=\"operator\">|</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">filter</span>(fn: (r) <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> r._measurement <span class=\"operator\">=</span><span class=\"operator\">=</span> &quot;mem&quot; <span class=\"keyword\">and</span> r._field <span class=\"operator\">=</span><span class=\"operator\">=</span> &quot;used&quot;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Table</span>: keys:<span class=\"meta\"> [_start, _stop, _field, _measurement, host]</span></span><br><span class=\"line\">                   <span class=\"attribute\">_start</span>:time                      _stop:time           _field:string     _measurement:string               host:string                      _time:time                  _value:int</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    used                     mem               host1.local  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                 <span class=\"number\">10956333056</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    used                     mem               host1.local  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z                 <span class=\"number\">11014008832</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    used                     mem               host1.local  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">20</span>.<span class=\"number\">000000000</span>Z                 <span class=\"number\">11373428736</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    used                     mem               host1.local  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">30</span>.<span class=\"number\">000000000</span>Z                 <span class=\"number\">11001421824</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    used                     mem               host1.local  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">40</span>.<span class=\"number\">000000000</span>Z                 <span class=\"number\">10985852928</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    used                     mem               host1.local  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">50</span>.<span class=\"number\">000000000</span>Z                 <span class=\"number\">10992279552</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    used                     mem               host1.local  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">51</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                 <span class=\"number\">11053568000</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    used                     mem               host1.local  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">51</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z                 <span class=\"number\">11092242432</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    used                     mem               host1.local  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">51</span>:<span class=\"number\">20</span>.<span class=\"number\">000000000</span>Z                 <span class=\"number\">11612774400</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    used                     mem               host1.local  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">51</span>:<span class=\"number\">30</span>.<span class=\"number\">000000000</span>Z                 <span class=\"number\">11131961344</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    used                     mem               host1.local  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">51</span>:<span class=\"number\">40</span>.<span class=\"number\">000000000</span>Z                 <span class=\"number\">11124805632</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    used                     mem               host1.local  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">51</span>:<span class=\"number\">50</span>.<span class=\"number\">000000000</span>Z                 <span class=\"number\">11332464640</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    used                     mem               host1.local  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">52</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                 <span class=\"number\">11176923136</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    used                     mem               host1.local  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">52</span>:<span class=\"number\">10</span>.<span class=\"number\">000000000</span>Z                 <span class=\"number\">11181068288</span></span><br><span class=\"line\"><span class=\"attribute\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">50</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">55</span>:<span class=\"number\">00</span>.<span class=\"number\">000000000</span>Z                    used                     mem               host1.local  <span class=\"number\">2018</span>-<span class=\"number\">11</span>-<span class=\"number\">06</span>T05:<span class=\"number\">52</span>:<span class=\"number\">20</span>.<span class=\"number\">000000000</span>Z                 <span class=\"number\">11182579712</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义一个 procTotal 变量，用于过滤流程测量和总计字段。这将返回正在运行的进程数。&#96;&#96;&#96;<br>procTotal &#x3D; from(bucket: “db&#x2F;rp”)<br>|&gt; range(start: -5m)<br>|&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “processes” and r._field &#x3D;&#x3D; “total”)</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<p>Table: keys: [_start, _stop, _field, _measurement, host]<br>               _start:time                      _stop:time           _field:string     _measurement:string               host:string                      _time:time                  _value:int<br>2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z                   total               processes               host1.local  2018-11-06T05:50:00.000000000Z                         470<br>2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z                   total               processes               host1.local  2018-11-06T05:50:10.000000000Z                         470<br>2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z                   total               processes               host1.local  2018-11-06T05:50:20.000000000Z                         471<br>2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z                   total               processes               host1.local  2018-11-06T05:50:30.000000000Z                         470<br>2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z                   total               processes               host1.local  2018-11-06T05:50:40.000000000Z                         469<br>2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z                   total               processes               host1.local  2018-11-06T05:50:50.000000000Z                         471<br>2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z                   total               processes               host1.local  2018-11-06T05:51:00.000000000Z                         470<br>2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z                   total               processes               host1.local  2018-11-06T05:51:10.000000000Z                         470<br>2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z                   total               processes               host1.local  2018-11-06T05:51:20.000000000Z                         470<br>2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z                   total               processes               host1.local  2018-11-06T05:51:30.000000000Z                         470</p>\n<figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">加入两个数据流：定义了两个数据流后，使用 <span class=\"keyword\">join</span>() 函数将它们连接在一起。 <span class=\"keyword\">join</span>() 需要两个参数：</span><br><span class=\"line\"></span><br><span class=\"line\">*   tables（表）：一个表的映射，用于连接它们将被别名的键。在下面的示例中，mem 是 memUsed 的别名，<span class=\"keyword\">proc</span> 是<span class=\"title\"> procTotal</span> 的别名。</span><br><span class=\"line\">*<span class=\"title\">   on：一个字符串数组，定义表将在其上连接的列。两个表都必须具有此列表中指定的所有列。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>join(tables: {mem: memUsed, proc: procTotal}, on: [“_time”, “_stop”, “_start”, “host”])</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Table: keys: [_field_mem, _field_proc, _measurement_mem, _measurement_proc, _start, _stop, host]<br>     _field_mem:string      _field_proc:string  _measurement_mem:string  _measurement_proc:string                     _start:time                      _stop:time               host:string                      _time:time              _value_mem:int             _value_proc:int</p>\n<pre><code>              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:50:00.000000000Z                 10956333056                         470\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:50:10.000000000Z                 11014008832                         470\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:50:20.000000000Z                 11373428736                         471\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:50:30.000000000Z                 11001421824                         470\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:50:40.000000000Z                 10985852928                         469\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:50:50.000000000Z                 10992279552                         471\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:51:00.000000000Z                 11053568000                         470\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:51:10.000000000Z                 11092242432                         470\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:51:20.000000000Z                 11612774400                         470\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:51:30.000000000Z                 11131961344                         470\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:51:40.000000000Z                 11124805632                         469\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:51:50.000000000Z                 11332464640                         471\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:52:00.000000000Z \n</code></pre>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">请注意，输出表包括以下列，这些列为具有两个输入表唯一值的列。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">*   </span>\\_field\\_mem：</span><br><span class=\"line\"><span class=\"bullet\">*   </span>\\_field\\_proc：</span><br><span class=\"line\"><span class=\"bullet\">*   </span>\\_measurement\\_mem：</span><br><span class=\"line\"><span class=\"bullet\">*   </span>\\_measurement\\_proc：</span><br><span class=\"line\"><span class=\"bullet\">*   </span>\\_value\\_mem：</span><br><span class=\"line\"><span class=\"bullet\">*   </span>\\_value\\_proc：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**计算并创建一个新表**</span>：将两个数据流连接到一个表中，使用 map() 函数通过将现有的 \\_time 列映射到新的 \\_time 列并将 \\_value\\_mem 除以 \\_value\\_proc 并将其映射到新的 _value 列来构建新表。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>join(tables: {mem: memUsed, proc: procTotal}, on: [“_time”, “_stop”, “_start”, “host”])<br>    |&gt; map(fn: (r) &#x3D;&gt; ({_time: r._time, _value: r._value_mem &#x2F; r._value_proc}))</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Table: keys: [_field_mem, _field_proc, _measurement_mem, _measurement_proc, _start, _stop, host]<br>     _field_mem:string      _field_proc:string  _measurement_mem:string  _measurement_proc:string                     _start:time                      _stop:time               host:string                      _time:time                  _value:int</p>\n<pre><code>              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:50:00.000000000Z                    23311346\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:50:10.000000000Z                    23434061\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:50:20.000000000Z                    24147407\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:50:30.000000000Z                    23407280\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:50:40.000000000Z                    23423993\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:50:50.000000000Z                    23338173\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:51:00.000000000Z                    23518229\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:51:10.000000000Z                    23600515\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:51:20.000000000Z                    24708030\n              used                   total                      mem                 processes  2018-11-06T05:50:00.000000000Z  2018-11-06T05:55:00.000000000Z  Scotts-MacBook-Pro.local  2018-11-06T05:51:30.000000000Z \n</code></pre>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">此表表示每个正在运行的进程的平均内存量（以字节为单位）。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**现实世界的例子**</span>：以下函数通过连接来自 httpd 的字段和写入测量值来计算写入 InfluxDB 集群的批量大小，以便比较 pointReq 和 writeReq。结果按集群 ID 分组，因此您可以跨集群进行比较。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>batchSize &#x3D; (cluster_id, start&#x3D;-1m, interval&#x3D;10s) &#x3D;&gt; {<br>    httpd &#x3D; from(bucket: “telegraf”)<br>        |&gt; range(start: start)<br>        |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “influxdb_httpd” and r._field &#x3D;&#x3D; “writeReq” and r.cluster_id &#x3D;&#x3D; cluster_id)<br>        |&gt; aggregateWindow(every: interval, fn: mean)<br>        |&gt; derivative(nonNegative: true, unit: 60s)</p>\n<pre><code>write = from(bucket: &quot;telegraf&quot;)\n    |&gt; range(start: start)\n    |&gt; filter(fn: (r) =&gt; r._measurement == &quot;influxdb_write&quot; and r._field == &quot;pointReq&quot; and r.cluster_id == cluster_id)\n    |&gt; aggregateWindow(every: interval, fn: max)\n    |&gt; derivative(nonNegative: true, unit: 60s)\n\nreturn join(tables: &#123;httpd: httpd, write: write&#125;, on: [&quot;_time&quot;, &quot;_stop&quot;, &quot;_start&quot;, &quot;host&quot;])\n    |&gt; map(fn: (r) =&gt; (&#123;_time: r._time, _value: r._value_httpd / r._value_write&#125;))\n    |&gt; group(columns: cluster_id)\n</code></pre>\n<p>}</p>\n<p>batchSize(cluster_id: “enter cluster id here”)</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">4.8</span><span class=\"number\">.15</span>、查询累计总和</span><br><span class=\"line\"></span><br><span class=\"line\">使用cumulativeSum() 函数计算值的运行总计。 cumulativeSum 对后续记录的值求和，并返回使用总和更新的每一行。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>data<br>    |&gt; cumulativeSum()</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">输入：</span><br><span class=\"line\"></span><br><span class=\"line\">|<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">|<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:01:00Z </span>|<span class=\"string\"> 1 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:02:00Z </span>|<span class=\"string\"> 2 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:03:00Z </span>|<span class=\"string\"> 1 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:04:00Z </span>|<span class=\"string\"> 3 </span>|</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"></span><br><span class=\"line\">|<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">|<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:01:00Z </span>|<span class=\"string\"> 1 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:02:00Z </span>|<span class=\"string\"> 3 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:03:00Z </span>|<span class=\"string\"> 4 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:04:00Z </span>|<span class=\"string\"> 7 </span>|</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">*</span><span class=\"symbol\">*</span>将 cumulativeSum() 与 aggregateWindow()一起使用<span class=\"symbol\">*</span><span class=\"symbol\">*</span>：aggregateWindow() 将数据分段为时间窗口，将每个窗口中的数据聚合为一个点，然后删除基于时间的分段。它主要用于对数据进行下采样。aggregateWindow() 需要一个聚合函数，它为每个时间窗口返回一行。要将cumulativeSum() 与aggregateWindow 一起使用，请在aggregateWindow() 中使用sum，然后使用cumulativeSum() 计算聚合值的总和。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>data<br>    |&gt; aggregateWindow(every: 5m, fn: sum)<br>    |&gt; cumulativeSum()</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">4.8</span><span class=\"selector-class\">.16</span>、<span class=\"built_in\">first</span>() &amp; <span class=\"built_in\">last</span>()：查询第<span class=\"number\">1</span>个和最后一个值</span><br><span class=\"line\"></span><br><span class=\"line\">使用 <span class=\"built_in\">first</span>() 或 <span class=\"built_in\">last</span>() 函数返回输入表中的第一个或最后一条记录。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>data<br>    |&gt; first()</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">输入：</span><br><span class=\"line\"></span><br><span class=\"line\">|<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">|<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:01:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:02:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:03:00Z </span>|<span class=\"string\"> 2.0 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:04:00Z </span>|<span class=\"string\"> 3.0 </span>|</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"></span><br><span class=\"line\">|<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">|<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:01:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>data<br>    |&gt; last()</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">输入：</span><br><span class=\"line\"></span><br><span class=\"line\">|<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">|<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:01:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:02:00Z </span>|<span class=\"string\"> 1.0 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:03:00Z </span>|<span class=\"string\"> 2.0 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:04:00Z </span>|<span class=\"string\"> 3.0 </span>|</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"></span><br><span class=\"line\">|<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">|<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:04:00Z </span>|<span class=\"string\"> 3.0 </span>|</span><br><span class=\"line\"></span><br><span class=\"line\">将 first() 或 last() 与 aggregateWindow()一起使用：使用 first() 和 last() 与 aggregateWindow() 选择基于时间的组中的第一条或最后一条记录。 aggregateWindow() 将数据分割成时间窗口，使用聚合或选择器函数将每个窗口中的数据聚合成一个点，然后删除基于时间的分割。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>|&gt; aggregateWindow(<br>    every: 1h,<br>    fn: first,<br>)</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">输入：</span><br><span class=\"line\"></span><br><span class=\"line\">|<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">|<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:00:00Z </span>|<span class=\"string\"> 10 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:00:15Z </span>|<span class=\"string\"> 12 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:00:45Z </span>|<span class=\"string\"> 9 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:01:05Z </span>|<span class=\"string\"> 9 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:01:10Z </span>|<span class=\"string\"> 15 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:02:30Z </span>|<span class=\"string\"> 11 </span>|</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"></span><br><span class=\"line\">|<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">|<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:00:59Z </span>|<span class=\"string\"> 10 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:01:59Z </span>|<span class=\"string\"> 9 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:02:59Z </span>|<span class=\"string\"> 11 </span>|</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 4.8.17、exists 运算符</span></span><br><span class=\"line\"></span><br><span class=\"line\">使用 Flux exists 运算符检查记录是否包含键或该键的值是否为空。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>p &#x3D; {firstName: “John”, lastName: “Doe”, age: 42}</p>\n<p>exists p.firstName</p>\n<p>exists p.height </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">将exists与行函数（<span class=\"attribute\">filter</span>()、<span class=\"built_in\">map</span>()、<span class=\"built_in\">reduce</span>()）一起使用来检查行是否包含列或该列的值是否为空。</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"number\">1</span>、过滤空值：** </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>from(bucket: “db&#x2F;rp”)<br>    |&gt; range(start: -5m)<br>    |&gt; filter(fn: (r) &#x3D;&gt; exists r._value)</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**2、基于存在映射值：**</span> </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>from(bucket: “default”)<br>    |&gt; range(start: -30s)<br>    |&gt; map(<br>        fn: (r) &#x3D;&gt; ({r with<br>            human_readable: if exists r._value then<br>                “${r._field} is ${string(v: r._value)}.”<br>            else<br>                “${r._field} has no value.”,<br>        }),<br>    )</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**3、忽略自定义聚合函数中的值**</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>customSumProduct &#x3D; (tables&#x3D;&lt;-) &#x3D;&gt; tables<br>    |&gt; reduce(<br>        identity: {sum: 0.0, product: 1.0},<br>        fn: (r, accumulator) &#x3D;&gt; ({r with<br>            sum: if exists r._value then<br>                r._value + accumulator.sum<br>            else<br>                accumulator.sum,<br>            product: if exists r._value then<br>                r.value * accumulator.product<br>            else<br>                accumulator.product,<br>        }),<br>    )</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">4.8</span><span class=\"selector-class\">.18</span>、用Flux提取标量值</span><br><span class=\"line\"></span><br><span class=\"line\">使用 Flux 流和表函数从 Flux 查询输出中提取标量值。例如，这使您可以使用查询结果动态设置变量。</span><br><span class=\"line\"></span><br><span class=\"line\">从输出中提取标量值：</span><br><span class=\"line\"></span><br><span class=\"line\">*   提取表。</span><br><span class=\"line\">*   从表中提取一列或从表中提取一行。</span><br><span class=\"line\"></span><br><span class=\"line\">目前的限制：</span><br><span class=\"line\"></span><br><span class=\"line\">*   InfluxDB 用户界面 (UI) 当前不支持原始标量输出。使用 <span class=\"built_in\">map</span>() 将标量值添加到输出数据。</span><br><span class=\"line\">*   Flux REPL 目前不支持 Flux 流和表函数（也称为“动态查询”）。请参阅<span class=\"selector-id\">#15321</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"number\">1</span>、<span class=\"built_in\">tableFind</span>()：提取表**</span><br><span class=\"line\"></span><br><span class=\"line\">Flux 将查询结果格式化为表流。要从表流中提取标量值，您必须首先提取单个表。如果查询结果只包含一个表，它仍然被格式化为表流。您仍然必须从流中提取该表。使用 <span class=\"built_in\">tableFind</span>() 提取组键值与 fn 判别函数匹配的第一个表。判别函数需要一个key记录，它表示每个表的组键。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>sampleData<br>    |&gt; tableFind(fn: (key) &#x3D;&gt; key._field &#x3D;&#x3D; “temp” and key.location &#x3D;&#x3D; “sfo”)</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">上面的示例返回一个表：</span><br><span class=\"line\"></span><br><span class=\"line\">|<span class=\"string\"> _time </span>|<span class=\"string\"> location </span>|<span class=\"string\"> _field </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">|<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2019-11-01T12:00:00Z </span>|<span class=\"string\"> sfo </span>|<span class=\"string\"> temp </span>|<span class=\"string\"> 65.1 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2019-11-01T13:00:00Z </span>|<span class=\"string\"> sfo </span>|<span class=\"string\"> temp </span>|<span class=\"string\"> 66.2 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2019-11-01T14:00:00Z </span>|<span class=\"string\"> sfo </span>|<span class=\"string\"> temp </span>|<span class=\"string\"> 66.3 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2019-11-01T15:00:00Z </span>|<span class=\"string\"> sfo </span>|<span class=\"string\"> temp </span>|<span class=\"string\"> 66.8 </span>|</span><br><span class=\"line\"></span><br><span class=\"line\">提取正确的表：Flux 函数不保证表顺序，并且 tableFind() 仅返回与 fn 判别匹配的第一个表。要提取包含您实际需要的数据的表，请在您的判别函数中非常具体，或者过滤和转换您的数据以最小化通过管道转发到 tableFind() 的表的数量。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">*</span><span class=\"symbol\">*</span>2、getColumn()：从表中提取一列<span class=\"symbol\">*</span><span class=\"symbol\">*</span></span><br><span class=\"line\"></span><br><span class=\"line\">使用 getColumn() 函数从提取的表中的特定列输出值数组。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>sampleData<br>    |&gt; tableFind(fn: (key) &#x3D;&gt; key._field &#x3D;&#x3D; “temp” and key.location &#x3D;&#x3D; “sfo”)<br>    |&gt; getColumn(column: “_value”) </p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**使用提取的列值**</span>：使用变量来存储值数组。在下面的示例中，SFOTemps 表示值数组。引用数组中的特定索引（从 0 开始的整数）以返回该索引处的值。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>SFOTemps &#x3D; sampleData<br>    |&gt; tableFind(fn: (key) &#x3D;&gt; key._field &#x3D;&#x3D; “temp” and key.location &#x3D;&#x3D; “sfo”)<br>    |&gt; getColumn(column: “_value”)</p>\n<p>SFOTemps</p>\n<p>SFOTemps[0]</p>\n<p>SFOTemps[2] </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">**<span class=\"number\">3</span>、<span class=\"built_in\">getRecord</span>()：从表中提取一行**</span><br><span class=\"line\"></span><br><span class=\"line\">使用 <span class=\"built_in\">getRecord</span>() 函数从提取的表中的单行输出数据。使用 idx 参数指定要输出的行的索引。该函数为每列输出一个包含键值对的记录</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>sampleData<br>    |&gt; tableFind(fn: (key) &#x3D;&gt; key._field &#x3D;&#x3D; “temp” and key.location &#x3D;&#x3D; “sfo”)<br>    |&gt; getRecord(idx: 0) </p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**使用提取的行记录**</span>：使用变量来存储提取的行记录。在下面的示例中， tempInfo 表示提取的行。使用点表示法来引用记录中的键。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>tempInfo &#x3D; sampleData<br>    |&gt; tableFind(fn: (key) &#x3D;&gt; key._field &#x3D;&#x3D; “temp” and key.location &#x3D;&#x3D; “sfo”)<br>    |&gt; getRecord(idx: 0)</p>\n<p>tempInfo</p>\n<p>tempInfo._time</p>\n<p>tempInfo.location </p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**4、辅助函数示例**</span></span><br><span class=\"line\"></span><br><span class=\"line\">创建自定义辅助函数以从查询输出中提取标量值。</span><br><span class=\"line\"></span><br><span class=\"line\">提取标量字段值：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> getFieldValue &#x3D; (tables&#x3D;&lt;-, field) &#x3D;&gt; {<br>    extract &#x3D; tables<br>        |&gt; tableFind(fn: (key) &#x3D;&gt; key._field &#x3D;&#x3D; field)<br>        |&gt; getColumn(column: “_value”)</p>\n<pre><code>return extract[0]\n</code></pre>\n<p>}</p>\n<p>lastJFKTemp &#x3D; sampleData<br>    |&gt; filter(fn: (r) &#x3D;&gt; r.location &#x3D;&#x3D; “kjfk”)<br>    |&gt; last()<br>    |&gt; getFieldValue(field: “temp”)</p>\n<p>lastJFKTemp </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">提取标量行数据：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> getRow &#x3D; (tables&#x3D;&lt;-, field, idx&#x3D;0) &#x3D;&gt; {<br>    extract &#x3D; tables<br>        |&gt; tableFind(fn: (key) &#x3D;&gt; true)<br>        |&gt; getRecord(idx: idx)</p>\n<pre><code>return extract\n</code></pre>\n<p>}</p>\n<p>lastReported &#x3D; sampleData<br>    |&gt; last()<br>    |&gt; getRow(field: “temp”)</p>\n<p>“The last location to report was ${lastReported.location}.<br>The temperature was ${string(v: lastReported._value)}°F.” </p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">**<span class=\"number\">5</span>、样本数据**</span><br><span class=\"line\"></span><br><span class=\"line\">以下示例数据集代表从三个位置收集的虚构温度指标。它采用带注释的 CSV 格式，并使用 <span class=\"built_in\">csv</span>.<span class=\"keyword\">from</span>() 函数导入到 Flux 查询中。将以下内容放在查询的开头以使用示例数据：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>import “csv”</p>\n<p>sampleData &#x3D; csv.from(csv: “<br>#datatype,string,long,dateTime:RFC3339,string,string,double<br>#group,false,true,false,true,true,false<br>#default,,,,,,<br>,result,table,_time,location,_field,_value<br>,,0,2019-11-01T12:00:00Z,sfo,temp,65.1<br>,,0,2019-11-01T13:00:00Z,sfo,temp,66.2<br>,,0,2019-11-01T14:00:00Z,sfo,temp,66.3<br>,,0,2019-11-01T15:00:00Z,sfo,temp,66.8<br>,,1,2019-11-01T12:00:00Z,kjfk,temp,69.4<br>,,1,2019-11-01T13:00:00Z,kjfk,temp,69.9<br>,,1,2019-11-01T14:00:00Z,kjfk,temp,71.0<br>,,1,2019-11-01T15:00:00Z,kjfk,temp,71.2<br>,,2,2019-11-01T12:00:00Z,kord,temp,46.4<br>,,2,2019-11-01T13:00:00Z,kord,temp,46.3<br>,,2,2019-11-01T14:00:00Z,kord,temp,42.7<br>,,2,2019-11-01T15:00:00Z,kord,temp,38.9<br>“)</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 4.8.19、操作时间戳</span></span><br><span class=\"line\"></span><br><span class=\"line\">存储在 InfluxDB 中的每个点都有一个关联的时间戳。使用 Flux 处理和操作时间戳以满足您的需求。</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"number\">1</span>、转换时间戳格式**</span><br><span class=\"line\"></span><br><span class=\"line\">*   Unix纳秒转换为RFC3339：使用 <span class=\"built_in\">time</span>() 函数将 Unix 纳秒时间戳转换为 RFC3339 时间戳。```</span><br><span class=\"line\">    <span class=\"built_in\">time</span>(v: <span class=\"number\">1568808000000000000</span>) </span><br></pre></td></tr></table></figure>\n<ul>\n<li>RFC3339转换为Unix纳秒：&#96;&#96;&#96;<br>uint(v: 2019-09-18T12:00:00.000000000Z) <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">    </span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"strong\">**2、计算2个时间戳之间的持续时间**</span></span><br><span class=\"line\"></span><br><span class=\"line\">Flux 不支持使用时间类型值的数学运算。要计算两个时间戳之间的持续时间：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">*</span>   使用 uint() 函数将每个时间戳转换为 Unix 纳秒时间戳。</span><br><span class=\"line\"><span class=\"bullet\">*</span>   该 Unix 纳秒时间戳减去另一个。</span><br><span class=\"line\"><span class=\"bullet\">*</span>   使用 duration() 函数将结果转换为持续时间。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\ntime1 &#x3D; uint(v: 2019-09-17T21:12:05Z)<br>time2 &#x3D; uint(v: 2019-09-18T22:16:35Z)</li>\n</ul>\n<p>duration(v: time2 - time1) </p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">Flux</span> 不支持持续时间列类型。要将持续时间存储在列中，请使用 <span class=\"function\"><span class=\"title\">string</span>() 函数将持续时间转换为字符串。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">**<span class=\"number\">3</span>、检索当前时间**</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">*   当前<span class=\"variable\">UTC</span>时间：使用 <span class=\"title\"><span class=\"built_in\">now</span></span>() 函数以 <span class=\"variable\">RFC3339</span> 格式返回当前 <span class=\"variable\">UTC</span> 时间。<span class=\"title\"><span class=\"built_in\">now</span></span>() 在运行时被缓存，因此 <span class=\"variable\">Flux</span> 脚本中的所有 <span class=\"title\"><span class=\"built_in\">now</span></span>() 实例都返回相同的值。```</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\"><span class=\"built_in\">now</span></span>()</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>当前系统时间：导入system包，使用system.time()函数以RFC3339格式返回宿主机当前系统时间。system.time() 返回执行的时间，因此 Flux 脚本中的每个 system.time() 实例都返回一个唯一值。&#96;&#96;&#96;<br>import “system”</p>\n<p>system.time()</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"number\">4</span>、标准化不规则时间戳**</span><br><span class=\"line\"></span><br><span class=\"line\">要标准化不规则时间戳，请使用 <span class=\"built_in\">truncateTimeColumn</span>() 函数将所有 _time 值截断为指定单位。这在点应按时间对齐的 <span class=\"built_in\">join</span>() 和 <span class=\"built_in\">pivot</span>() 操作中很有用，但时间戳略有不同。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>data<br>    |&gt; truncateTimeColumn(unit: 1m)</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">输入：</span><br><span class=\"line\"></span><br><span class=\"line\">|<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">|<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:00:49Z </span>|<span class=\"string\"> 2.0 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:01:01Z </span>|<span class=\"string\"> 1.9 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:03:22Z </span>|<span class=\"string\"> 1.8 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:04:04Z </span>|<span class=\"string\"> 1.9 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:05:38Z </span>|<span class=\"string\"> 2.1 </span>|</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"></span><br><span class=\"line\">|<span class=\"string\"> _time </span>|<span class=\"string\"> _value </span>|</span><br><span class=\"line\">|<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:00:00Z </span>|<span class=\"string\"> 2.0 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:01:00Z </span>|<span class=\"string\"> 1.9 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:03:00Z </span>|<span class=\"string\"> 1.8 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:04:00Z </span>|<span class=\"string\"> 1.9 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2020-01-01T00:05:00Z </span>|<span class=\"string\"> 2.1 </span>|</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">*</span><span class=\"symbol\">*</span>5、一起使用时间戳（timestamp）和持续时间（duration）<span class=\"symbol\">*</span><span class=\"symbol\">*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">*</span>   为时间戳添加持续时间：Experimental.addDuration() 函数将持续时间添加到指定时间并返回结果时间。通过使用experimental.addDuration()，您接受实验功能的风险。```</span><br><span class=\"line\">    import <span class=\"string\">&quot;experimental&quot;</span></span><br><span class=\"line\">    experimental.addDuration(d: 6h, to: 2019-09-16T12:00:00Z) </span><br></pre></td></tr></table></figure>\n<ul>\n<li>从时间戳中减去持续时间：Experimental.subDuration() 函数从指定时间中减去一个持续时间并返回结果时间。通过使用 experimental.subDuration()，您接受实验功能的风险。&#96;&#96;&#96;<br>import “experimental”<br>experimental.subDuration(d: 6h, from: 2019-09-16T12:00:00Z) <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">    </span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"section\">### 4.8.20、监控状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">Flux 可帮助您监控指标和事件中的状态：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">*</span>   找出一个状态持续多久；</span><br><span class=\"line\"><span class=\"bullet\">*</span>   计算连续状态的数量；</span><br><span class=\"line\"><span class=\"bullet\">*</span>   检测状态变化。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**1、找出一个状态持续多久**</span></span><br><span class=\"line\"></span><br><span class=\"line\">使用 stateDuration() 函数计算列值保持相同值（或状态）的时间。包括以下信息：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">*</span>   要搜索的列：任何标签键、标签值、字段键、字段值或度量。</span><br><span class=\"line\"><span class=\"bullet\">*</span>   值：要在指定列中搜索的值（或状态）。</span><br><span class=\"line\"><span class=\"bullet\">*</span>   状态持续时间列：用于存储状态持续时间的新列——指定值持续的时间长度。</span><br><span class=\"line\"><span class=\"bullet\">*</span>   Unit：用于增加状态持续时间的时间单位（1s（默认）、1m、1h）。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\ndata<br>|&gt; stateDuration(<br>fn: (r) &#x3D;&gt; r._column_to_search &#x3D;&#x3D; “value_to_search_for”,<br>column: “state_duration”,<br>unit: 1s,<br>)<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">使用 <span class=\"keyword\">state</span>Duration() 搜索每个点的指定值：</span><br><span class=\"line\"></span><br><span class=\"line\">*   对于评估为 true 的第一个点，状态持续时间设置为 <span class=\"number\">0</span>。对于评估为 true 的每个连续点，状态持续时间增加每个连续点之间的时间间隔（以指定单位）。</span><br><span class=\"line\">*   如果状态为假，则状态持续时间重置为 -<span class=\"number\">1</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">使用<span class=\"keyword\">state</span>Duration()的示例查询：以下查询在过去 <span class=\"number\">5</span> 分钟内搜索门存储桶以查找门已关闭的秒数：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nfrom(bucket: “doors”)<br>|&gt; range(start: -5m)<br>|&gt; stateDuration(<br>fn: (r) &#x3D;&gt; r._value &#x3D;&#x3D; “closed”,<br>column: “door_closed”,<br>unit: 1s,<br>)<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">在此示例中，door\\<span class=\"variable\">_closed</span> 是状态持续时间列。如果您每分钟将数据写入门存储桶，则状态持续时间会在 \\<span class=\"variable\">_value</span> 关闭的每个连续点增加 <span class=\"number\">60</span> 秒。如果 <span class=\"variable\">_value</span> 未关闭，则状态持续时间重置为 <span class=\"number\">0</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">上面示例查询的结果可能如下所示（为简单起见，我们省略了测量、标签和字段列）：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n_time                   _value        door_closed<br>2019-10-26T17:39:16Z    closed        0<br>2019-10-26T17:40:16Z    closed        60<br>2019-10-26T17:41:16Z    closed        120<br>2019-10-26T17:42:16Z    open          -1<br>2019-10-26T17:43:16Z    closed        0<br>2019-10-26T17:44:27Z    closed        60<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">**<span class=\"number\">2</span>、计算连续状态的数量**</span><br><span class=\"line\"></span><br><span class=\"line\">使用 <span class=\"keyword\">state</span>Count() 函数并包含以下信息：</span><br><span class=\"line\"></span><br><span class=\"line\">*   要搜索的列：任何标签键、标签值、字段键、字段值或度量。</span><br><span class=\"line\">*   值：在指定列中搜索。</span><br><span class=\"line\">*   状态计数列：用于存储状态计数的新列─指定值存在的连续记录数。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\ndata<br>|&gt; stateCount(<br>fn: (r) &#x3D;&gt; r._column_to_search &#x3D;&#x3D; “value_to_search_for”,<br>column: “state_count”<br>)<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">使用<span class=\"keyword\">state</span>Count()在每个点中搜索指定值：</span><br><span class=\"line\"></span><br><span class=\"line\">*   对于评估为 true 的第一个点，状态计数设置为 <span class=\"number\">1</span>。对于评估为 true 的每个连续点，状态计数增加 <span class=\"number\">1</span>。</span><br><span class=\"line\">*   如果状态为假，则状态计数重置为 -<span class=\"number\">1</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">使用<span class=\"keyword\">state</span>Count()的示例查询：以下查询在过去 <span class=\"number\">5</span> 分钟内搜索门存储桶，并计算已关闭的点数作为它们的 _value：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nfrom(bucket: “doors”)<br>|&gt; range(start: -5m)<br>|&gt; stateCount(fn: (r) &#x3D;&gt; r._value &#x3D;&#x3D; “closed”, column: “door_closed”)<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">此示例将状态计数存储在 door\\<span class=\"variable\">_closed</span> 列中。如果您每分钟将数据写入门存储桶，则状态计数会在 \\<span class=\"variable\">_value</span> 关闭的每个连续点增加 <span class=\"number\">1</span>。如果 <span class=\"variable\">_value</span> 未关闭，则状态计数重置为 -<span class=\"number\">1</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">上面示例查询的结果可能如下所示（为简单起见，我们省略了测量、标签和字段列）：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n_time                   _value        door_closed<br>2019-10-26T17:39:16Z    closed        1<br>2019-10-26T17:40:16Z    closed        2<br>2019-10-26T17:41:16Z    closed        3<br>2019-10-26T17:42:16Z    open          -1<br>2019-10-26T17:43:16Z    closed        1<br>2019-10-26T17:44:27Z    closed        2<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">机器状态计数的示例查询：以下查询每分钟检查一次机器状态（空闲、已分配或忙碌）。 InfluxDB 在过去一小时内搜索服务器存储桶并计算机器状态为空闲、已分配或忙碌的记录。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nfrom(bucket: “servers”)<br>|&gt; range(start: -1h)<br>|&gt; filter(fn: (r) &#x3D;&gt; r.machine_state &#x3D;&#x3D; “idle” or r.machine_state &#x3D;&#x3D; “assigned” or r.machine_state &#x3D;&#x3D; “busy”)<br>|&gt; stateCount(fn: (r) &#x3D;&gt; r.machine_state &#x3D;&#x3D; “busy”, column: “_count”)<br>|&gt; stateCount(fn: (r) &#x3D;&gt; r.machine_state &#x3D;&#x3D; “assigned”, column: “_count”)<br>|&gt; stateCount(fn: (r) &#x3D;&gt; r.machine_state &#x3D;&#x3D; “idle”, column: “_count”)<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">4.8</span><span class=\"number\">.21</span>、查询<span class=\"keyword\">SQL</span>数据源</span><br><span class=\"line\"></span><br><span class=\"line\">Flux <span class=\"keyword\">sql</span> 包提供了处理 <span class=\"keyword\">SQL</span> 数据源的函数。 <span class=\"keyword\">sql</span>.<span class=\"keyword\">from</span>() 让您可以查询 PostgreSQL、MySQL 和 SQLite 等 <span class=\"keyword\">SQL</span> 数据源，并将结果用于 InfluxDB 仪表板、任务和其他操作。</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"number\">1</span>、查询<span class=\"keyword\">SQL</span>数据源**</span><br><span class=\"line\"></span><br><span class=\"line\">查询 <span class=\"keyword\">SQL</span> 数据源：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span>  在 Flux 查询中导入 <span class=\"keyword\">sql</span> 包</span><br><span class=\"line\"><span class=\"number\">2.</span>  使用 <span class=\"keyword\">sql</span>.<span class=\"keyword\">from</span>() 函数指定用于从 <span class=\"keyword\">SQL</span> 数据源查询数据的驱动程序、数据源名称 (DSN) 和查询：```</span><br><span class=\"line\">    <span class=\"keyword\">import</span> &quot;sql&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">sql</span>.<span class=\"keyword\">from</span>(</span><br><span class=\"line\">        driverName: &quot;mysql&quot;,</span><br><span class=\"line\">        dataSourceName: &quot;user:password@tcp(localhost:3306)/db&quot;,</span><br><span class=\"line\">        query: &quot;SELECT * FROM example_table&quot;,</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>2、将SQL数据与InfluxDB中的数据连接起来</strong></p>\n<p>从 InfluxDB 查询 SQL 数据源的主要好处之一是能够使用存储在 InfluxDB 之外的数据来丰富查询结果。使用下面的空气传感器示例数据，以下查询将存储在 InfluxDB 中的空气传感器指标与存储在 PostgreSQL 中的传感器信息连接起来。连接的数据允许您根据未存储在 InfluxDB 中的传感器信息查询和过滤结果。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">import</span> &quot;sql&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">sensorInfo = <span class=\"keyword\">sql</span>.<span class=\"keyword\">from</span>(</span><br><span class=\"line\">    driverName: &quot;postgres&quot;,</span><br><span class=\"line\">    dataSourceName: &quot;postgresql://localhost?sslmode=disable&quot;,</span><br><span class=\"line\">    query: &quot;SELECT * FROM sensors&quot;,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">sensorMetrics = <span class=\"keyword\">from</span>(bucket: &quot;telegraf/autogen&quot;)</span><br><span class=\"line\">    |&gt; range(<span class=\"keyword\">start</span>: <span class=\"number\">-1</span>h)</span><br><span class=\"line\">    |&gt; <span class=\"keyword\">filter</span>(fn: (r) =&gt; r._measurement == &quot;airSensors&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span>(<span class=\"keyword\">tables</span>: &#123;metric: sensorMetrics, <span class=\"keyword\">info</span>: sensorInfo&#125;, <span class=\"keyword\">on</span>: [&quot;sensor_id&quot;])</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、样本传感器数据</strong></p>\n<p>样本数据生成器和样本传感器信息模拟一组传感器，用于测量整个建筑物房间内的温度、湿度和一氧化碳。每个收集的数据点都存储在 InfluxDB 中，带有一个 sensor_id 标签，用于标识它来自的特定传感器。示例传感器信息存储在 PostgreSQL 中。</p>\n<p>样本数据包括：</p>\n<ul>\n<li>从每个传感器收集的模拟数据并存储在 InfluxDB 中的 airSensors 测量中：① temperature；② humidity；③ co。</li>\n<li>有关存储在 PostgreSQL 中的传感器表中的每个传感器的信息：① sensor_id；② location；③ model_number；④ last_inspected。</li>\n</ul>\n<p>》导入并生成示例传感器数据：</p>\n<p>1）下载并运行示例数据生成器</p>\n<ol>\n<li><p>air-sensor-data.rb 是一个生成空气传感器数据并将数据存储在 InfluxDB 中的脚本。要使用 air-sensor-data.rb：</p>\n</li>\n<li><p>创建一个数据库来存储数据。</p>\n</li>\n<li><p>下载示例数据生成器。此工具需要 Ruby。</p>\n</li>\n<li><p>赋予 air-sensor-data.rb 可执行权限：&#96;&#96;&#96;<br>chmod +x air-sensor-data.rb</p>\n<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">5</span>.  启动启动器。指定您的数据库。```</span><br><span class=\"line\">    ./air-sensor-data.rb -d database-name</span><br></pre></td></tr></table></figure>\n\n<p>生成器开始向 InfluxDB 写入数据，并将一直持续到停止。使用 ctrl-c 停止生成器。<em>注意：使用 –help 标志查看其他配置选项。</em></p>\n</li>\n<li><p>查询您的目标数据库以确保生成的数据写入成功。生成器不会从写入请求中捕获错误，因此即使数据没有成功写入 InfluxDB，它也会继续运行。&#96;&#96;&#96;<br>from(bucket: “database-name&#x2F;autogen”)<br>   |&gt; range(start: -1m)<br>   |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “airSensors”)</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>）导入样本传感器信息</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span>  下载并安装 PostgreSQL。</span><br><span class=\"line\"><span class=\"number\">2.</span>  下载示例传感器信息 CSV。</span><br><span class=\"line\"><span class=\"number\">3.</span>  使用 PostgreSQL 客户端（psql 或 GUI）创建传感器表：```</span><br><span class=\"line\">    <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> sensors (</span><br><span class=\"line\">      sensor_id <span class=\"type\">character</span> <span class=\"type\">varying</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">      <span class=\"keyword\">location</span> <span class=\"type\">character</span> <span class=\"type\">varying</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">      model_number <span class=\"type\">character</span> <span class=\"type\">varying</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">      last_inspected <span class=\"type\">date</span></span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>导入下载的 CSV 样本数据。将 FROM 文件路径更新为下载的 CSV 样本数据的路径。&#96;&#96;&#96;<br>COPY sensors(sensor_id,location,model_number,last_inspected)<br>FROM ‘&#x2F;path&#x2F;to&#x2F;sample-sensor-info.csv’ DELIMITER ‘,’ CSV HEADER;</p>\n<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">5</span>.  查询表以确保数据正确导入：```</span><br><span class=\"line\">    SELECT * FROM sensors<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"4-8-22、条件逻辑\"><a href=\"#4-8-22、条件逻辑\" class=\"headerlink\" title=\"4.8.22、条件逻辑\"></a>4.8.22、条件逻辑</h3><p>Flux 提供了 if、then 和 else 条件表达式，允许强大而灵活的 Flux 查询。本指南介绍如何使用 Flux 条件表达式来查询和转换数据。 Flux 从左到右评估语句，一旦条件匹配就停止评估。</p>\n<p>条件表达式语法：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">if</span> <span class=\"symbol\">&lt;condition&gt;</span> then <span class=\"symbol\">&lt;action&gt;</span> <span class=\"keyword\">else</span> <span class=\"symbol\">&lt;alternative-action&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> color == <span class=\"string\">&quot;green&quot;</span> then <span class=\"string\">&quot;008000&quot;</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;ffffff&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>条件表达式在以下情况下最有用：</p>\n<ul>\n<li>定义变量时。</li>\n<li>使用一次对单行操作的函数时（filter()、map()、reduce()）。</li>\n</ul>\n<p><strong>1、评估条件表达式</strong></p>\n<p>Flux 按顺序评估语句，并在条件匹配时停止评估。例如，给定以下语句：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if r._value &gt; <span class=\"number\">95.0000001</span> and r._value &lt;<span class=\"operator\">=</span> <span class=\"number\">100.0</span> then</span><br><span class=\"line\">    <span class=\"string\">&quot;critical&quot;</span></span><br><span class=\"line\">else if r._value &gt; <span class=\"number\">85.0000001</span> and r._value &lt;<span class=\"operator\">=</span> <span class=\"number\">95.0</span> then</span><br><span class=\"line\">    <span class=\"string\">&quot;warning&quot;</span></span><br><span class=\"line\">else if r._value &gt; <span class=\"number\">70.0000001</span> and r._value &lt;<span class=\"operator\">=</span> <span class=\"number\">85.0</span> then</span><br><span class=\"line\">    <span class=\"string\">&quot;high&quot;</span></span><br><span class=\"line\">else</span><br><span class=\"line\">    <span class=\"string\">&quot;normal&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>当 r._value 为 96 时，输出为“critical”并且不评估剩余条件。</p>\n<p><strong>2、例子</strong></p>\n<p>1）有条件地设置变量的值：下面的示例根据 dueDate 变量与 now() 的关系设置过期变量：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dueDate</span> = <span class=\"number\">2019</span>-<span class=\"number\">05</span>-<span class=\"number\">01</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>Z</span><br><span class=\"line\"><span class=\"attr\">overdue</span> = if dueDate &lt; now() then <span class=\"literal\">true</span> else <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>2）创建条件过滤器：以下示例使用示例度量变量来更改查询过滤数据的方式。 metric 有三个可能的值：Memeory、CPU、Disk。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metric = <span class=\"string\">&quot;Memory&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span>(bucket: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span><br><span class=\"line\">    |&gt; range(start: <span class=\"number\">-1</span>h)</span><br><span class=\"line\">    |&gt; filter(</span><br><span class=\"line\">        fn: <span class=\"function\"><span class=\"params\">(r)</span> =&gt;</span> <span class=\"keyword\">if</span> v.metric == <span class=\"string\">&quot;Memory&quot;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            r._measurement == <span class=\"string\">&quot;mem&quot;</span> <span class=\"keyword\">and</span> r._field == <span class=\"string\">&quot;used_percent&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> v.metric == <span class=\"string\">&quot;CPU&quot;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            r._measurement == <span class=\"string\">&quot;cpu&quot;</span> <span class=\"keyword\">and</span> r._field == <span class=\"string\">&quot;usage_user&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> v.metric == <span class=\"string\">&quot;Disk&quot;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            r._measurement == <span class=\"string\">&quot;disk&quot;</span> <span class=\"keyword\">and</span> r._field == <span class=\"string\">&quot;used_percent&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            r._measurement != <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<p>3）使用map()有条件地转换列值：以下示例使用 map() 函数有条件地转换列值。它将级别列设置为基于 _value 列的特定字符串。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span>(bucket: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span><br><span class=\"line\">    |&gt; range(start: <span class=\"number\">-5</span>m)</span><br><span class=\"line\">    |&gt; filter(fn: <span class=\"function\"><span class=\"params\">(r)</span> =&gt;</span> r._measurement == <span class=\"string\">&quot;mem&quot;</span> <span class=\"keyword\">and</span> r._field == <span class=\"string\">&quot;used_percent&quot;</span>)</span><br><span class=\"line\">    |&gt; map(</span><br><span class=\"line\">        fn: <span class=\"function\"><span class=\"params\">(r)</span> =&gt;</span> (&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            r <span class=\"keyword\">with</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            level: <span class=\"keyword\">if</span> r._value &gt;= <span class=\"number\">95.0000001</span> <span class=\"keyword\">and</span> r._value &lt;= <span class=\"number\">100.0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">                <span class=\"string\">&quot;critical&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> r._value &gt;= <span class=\"number\">85.0000001</span> <span class=\"keyword\">and</span> r._value &lt;= <span class=\"number\">95.0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">                <span class=\"string\">&quot;warning&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> r._value &gt;= <span class=\"number\">70.0000001</span> <span class=\"keyword\">and</span> r._value &lt;= <span class=\"number\">85.0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">                <span class=\"string\">&quot;high&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"string\">&quot;normal&quot;</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<p>4、使用reduce()有条件地增加一个计数：以下示例使用 aggregateWindow() 和 reduce() 函数计算每五分钟窗口中超过定义阈值的记录数。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">threshold = <span class=\"number\">65.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span>(bucket: <span class=\"string\">&quot;telegraf/autogen&quot;</span>)</span><br><span class=\"line\">    |&gt; range(start: <span class=\"number\">-1</span>h)</span><br><span class=\"line\">    |&gt; filter(fn: <span class=\"function\"><span class=\"params\">(r)</span> =&gt;</span> r._measurement == <span class=\"string\">&quot;mem&quot;</span> <span class=\"keyword\">and</span> r._field == <span class=\"string\">&quot;used_percent&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    |&gt; aggregateWindow(</span><br><span class=\"line\">        every: <span class=\"number\">5</span>m,</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        fn: <span class=\"function\"><span class=\"params\">(column, tables=&lt;-)</span> =&gt;</span> tables</span><br><span class=\"line\">            |&gt; reduce(</span><br><span class=\"line\">                identity: &#123;above_threshold_count: <span class=\"number\">0.0</span>&#125;,</span><br><span class=\"line\">                fn: <span class=\"function\"><span class=\"params\">(r, accumulator)</span> =&gt;</span> (&#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    </span><br><span class=\"line\">                    above_threshold_count: <span class=\"keyword\">if</span> r._value &gt;= threshold <span class=\"keyword\">then</span></span><br><span class=\"line\">                        accumulator.above_threshold_count + <span class=\"number\">1.0</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        accumulator.above_threshold_count + <span class=\"number\">0.0</span>,</span><br><span class=\"line\">                &#125;),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-8-23、正则表达式\"><a href=\"#4-8-23、正则表达式\" class=\"headerlink\" title=\"4.8.23、正则表达式\"></a>4.8.23、正则表达式</h3><p>在匹配大量数据集合中的模式时，正则表达式（正则表达式）非常强大。使用 Flux，正则表达式主要用于判别函数中的评估逻辑，例如过滤行、删除和保留列、状态检测等。本指南展示了如何在 Flux 脚本中使用正则表达式。</p>\n<p><strong>1、Go 正则表达式语法</strong></p>\n<p>Flux 使用 Go 的 regexp 包进行正则表达式搜索。</p>\n<p><strong>2、正则表达式运算符</strong></p>\n<p>Flux 提供了两个用于正则表达式的比较运算符。</p>\n<ul>\n<li>&#x3D;~：当左边的表达式匹配右边的正则表达式时，它的计算结果为真。</li>\n<li>!~：当左边的表达式与右边的正则表达式不匹配时，它的计算结果为真。</li>\n</ul>\n<p><strong>3、Flux中的正则表达式</strong></p>\n<p>在 Flux 脚本中使用正则表达式匹配时，用 &#x2F; 将正则表达式括起来。以下是基本的正则表达式比较语法：</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expression =~ <span class=\"regexp\">/regex/</span></span><br><span class=\"line\">expression !~ <span class=\"regexp\">/regex/</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>4、例子</strong></p>\n<p>1）使用正则表达式按标签值过滤：以下示例按 cpu 标签过滤记录。它只保留 cpu 为 cpu0、cpu1 或 cpu2 的记录。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span>(bucket: <span class=\"string\">&quot;db/rp&quot;</span>)</span><br><span class=\"line\">    |&gt; range(start: <span class=\"number\">-15</span>m)</span><br><span class=\"line\">    |&gt; filter(fn: <span class=\"function\"><span class=\"params\">(r)</span> =&gt;</span> r._measurement == <span class=\"string\">&quot;cpu&quot;</span> <span class=\"keyword\">and</span> r._field == <span class=\"string\">&quot;usage_user&quot;</span> <span class=\"keyword\">and</span> r.cpu =~ <span class=\"regexp\">/cpu[0-2]/</span>)</span><br></pre></td></tr></table></figure>\n\n<p>2）使用正则表达式按字段键过滤：以下示例排除了字段键中没有 _percent 的记录。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span>(bucket: <span class=\"string\">&quot;db/rp&quot;</span>)</span><br><span class=\"line\">    |&gt; range(start: <span class=\"number\">-15</span>m)</span><br><span class=\"line\">    |&gt; filter(fn: <span class=\"function\"><span class=\"params\">(r)</span> =&gt;</span> r._measurement == <span class=\"string\">&quot;mem&quot;</span> <span class=\"keyword\">and</span> r._field =~ <span class=\"regexp\">/_percent/</span>)</span><br></pre></td></tr></table></figure>\n\n<p>3）删除与正则表达式匹配的列：以下示例删除名称不带 _ 的列。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span>(bucket: <span class=\"string\">&quot;db/rp&quot;</span>)</span><br><span class=\"line\">    |&gt; range(start: <span class=\"number\">-15</span>m)</span><br><span class=\"line\">    |&gt; filter(fn: <span class=\"function\"><span class=\"params\">(r)</span> =&gt;</span> r._measurement == <span class=\"string\">&quot;mem&quot;</span>)</span><br><span class=\"line\">    |&gt; drop(fn: <span class=\"function\"><span class=\"params\">(column)</span> =&gt;</span> column !~ <span class=\"regexp\">/_.*/</span>)</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data</span><br><span class=\"line\">    |&gt; <span class=\"built_in\">filter</span>(fn: <span class=\"function\">(<span class=\"params\">r</span>) =&gt;</span> r.tag =~ <span class=\"regexp\">/^foo[1-3]/</span>)</span><br></pre></td></tr></table></figure>\n\n<p>输入：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>tag</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>foo1</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:02:00Z</td>\n<td>foo5</td>\n<td>1.2</td>\n</tr>\n<tr>\n<td>2020-01-01T00:03:00Z</td>\n<td>bar3</td>\n<td>1.8</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>foo3</td>\n<td>0.9</td>\n</tr>\n<tr>\n<td>2020-01-01T00:05:00Z</td>\n<td>foo2</td>\n<td>1.4</td>\n</tr>\n<tr>\n<td>2020-01-01T00:06:00Z</td>\n<td>bar1</td>\n<td>2.0</td>\n</tr>\n</tbody></table>\n<p>输出：</p>\n<table>\n<thead>\n<tr>\n<th>_time</th>\n<th>tag</th>\n<th>_value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-01-01T00:01:00Z</td>\n<td>foo1</td>\n<td>1.0</td>\n</tr>\n<tr>\n<td>2020-01-01T00:04:00Z</td>\n<td>foo3</td>\n<td>0.9</td>\n</tr>\n<tr>\n<td>2020-01-01T00:05:00Z</td>\n<td>foo2</td>\n<td>1.4</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-8-24、地理时态数据\"><a href=\"#4-8-24、地理时态数据\" class=\"headerlink\" title=\"4.8.24、地理时态数据\"></a>4.8.24、地理时态数据</h3><p>使用 Flux Geo 包过滤地理时态数据并按地理位置或轨迹分组。Geo 软件包是实验性的，可能随时更改。使用它，即表示您同意实验功能的风险。</p>\n<p>要使用地理时态数据：</p>\n<ol>\n<li>导入experimental&#x2F;geo包。&#96;&#96;&#96;<br>import “experimental&#x2F;geo”<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">    </span></span><br><span class=\"line\">2.  加载地时数据。有关示例地时数据，请参见下文。</span><br><span class=\"line\">3.  执行以下一项或多项操作：① 形状数据与Geo包一起使用；② 按区域过滤数据（使用严格或非严格过滤器）；③ 按区域或按轨道对数据进行分组。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**1、形状数据与Geo包一起使用**</span>：Flux Geo 包中的函数需要 lat 和 lon 字段以及 s2\\_cell\\_id 标签。重命名纬度和经度字段并生成 S2 小区 ID 令牌。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nimport “experimental&#x2F;geo”</li>\n</ol>\n<p>sampleGeoData<br>  |&gt; geo.shapeData(latField: “latitude”, lonField: “longitude”, level: 10)</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**2、按区域过滤时空数据**</span>：使用 geo.filterRows 函数按箱形、圆形或多边形地理区域过滤地理时态数据。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>import “experimental&#x2F;geo”</p>\n<p>sampleGeoData<br>  |&gt; geo.filterRows(<br>    region: {lat: 30.04, lon: 31.23, radius: 200.0},<br>    strict: true<br>  )</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">**<span class=\"number\">3</span>、分组地时数据**：使用 geo.groupByArea<span class=\"comment\">()</span> 按区域对地理时态数据进行分组，使用 geo.asTracks<span class=\"comment\">()</span> 将数据分组为轨迹或路线。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>import “experimental&#x2F;geo”</p>\n<p>sampleGeoData<br>  |&gt; geo.groupByArea(newColumn: “geoArea”, level: 5)<br>  |&gt; geo.asTracks(groupBy: [“id”],orderBy: [“_time”])</p>\n<figure class=\"highlight capnproto\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">》样本数据：本节中的许多示例都使用了一个 sampleGeoData 变量，该变量表示地理时态数据的样本集。 GitHub 上的 Bird Migration Sample <span class=\"type\">Data</span> 提供了满足 Flux Geo 包要求的示例地理时态数据。</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"number\">1</span>）加载带注释的CSV样本数据**：使用实验性 csv.<span class=\"keyword\">from</span>() 函数从 GitHub 加载样本鸟迁徙注释 CSV 数据：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>import <code>experimental/csv</code></p>\n<p>sampleGeoData &#x3D; csv.from(<br>  url: “<a href=\"https://github.com/influxdata/influxdb2-sample-data/blob/master/bird-migration-data/bird-migration.csv\">https://github.com/influxdata/influxdb2-sample-data/blob/master/bird-migration-data/bird-migration.csv</a>“<br>)</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">csv.<span class=\"keyword\">from</span>(url: ...) 每次执行查询时都会下载示例数据 (~<span class=\"number\">1.3</span> MB)。如果带宽是一个问题，使用 <span class=\"keyword\">to</span>() 函数将数据写入存储桶，然后使用 <span class=\"keyword\">from</span>() 查询存储桶。</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"number\">2</span>）使用线路协议将样本数据写入InfluxDB**：使用 curl 和 influx <span class=\"built_in\">write</span> 命令将鸟类迁徙线路协议写入 InfluxDB。将 db/rp 替换为您的目标存储桶：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>curl https:<br>influx write -b db&#x2F;rp @.&#x2F;tmp-data<br>rm -f .&#x2F;tmp-data</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">使用 Flux 查询鸟类迁徙数据并将其分配给 sampleGeoData 变量：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>sampleGeoData &#x3D; from(bucket: “db&#x2F;rp”)<br>    |&gt; range(start: 2019-01-01T00:00:00Z, stop: 2019-12-31T23:59:59Z)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “migration”)</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">5.1、使用pushdowns启动查询</span><br><span class=\"line\">-------------------</span><br><span class=\"line\"></span><br><span class=\"line\">pushdowns是将数据操作推送到底层数据源而不是对内存中的数据进行操作的函数或函数组合。使用pushdowns启动查询以提高查询性能。一旦非pushdowns函数运行，Flux 会将数据拉入内存并在那里运行所有后续操作。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 5.1.1、下推功能和功能组合</span></span><br><span class=\"line\"></span><br><span class=\"line\">InfluxDB Enterprise 1.9+ 支持以下下推。</span><br><span class=\"line\"></span><br><span class=\"line\">|<span class=\"string\"> Functions </span>|<span class=\"string\"> Supported </span>|</span><br><span class=\"line\">|<span class=\"string\"> --- </span>|<span class=\"string\"> --- </span>|</span><br><span class=\"line\">|<span class=\"string\"> **count()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **drop()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **duplicate()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **filter()** * </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **fill()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **first()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **group()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **keep()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **last()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **max()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **mean()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **min()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **range()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **rename()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **sum()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **window()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> _Function combinations_ </span>|<span class=\"string\">   </span>|</span><br><span class=\"line\">|<span class=\"string\"> **window()** </span>|<span class=\"string\">\\&gt; **count()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **window()** </span>|<span class=\"string\">\\&gt; **first()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **window()** </span>|<span class=\"string\">\\&gt; **last()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **window()** </span>|<span class=\"string\">\\&gt; **max()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **window()** </span>|<span class=\"string\">\\&gt; **min()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\">|<span class=\"string\"> **window()** </span>|<span class=\"string\">\\&gt; **sum()** </span>|<span class=\"string\"> √ </span>|</span><br><span class=\"line\"></span><br><span class=\"line\">\\<span class=\"symbol\">*</span> filter() 仅在所有参数值为静态时下推。请参阅避免内联处理过滤器。</span><br><span class=\"line\"></span><br><span class=\"line\">在查询开始时使用下推函数和函数组合。一旦非下推函数运行，Flux 会将数据拉入内存并在那里运行所有后续操作。</span><br><span class=\"line\"></span><br><span class=\"line\">下推使用中的函数：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>from(bucket: “db&#x2F;rp”)<br>    |&gt; range(start: -1h)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r.sensor &#x3D;&#x3D; “abc123”)<br>    |&gt; group(columns: [“_field”, “host”])<br>    |&gt; aggregateWindow(every: 5m, fn: max)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._value &gt;&#x3D; 90.0)     </p>\n<pre><code>|&gt; top(n: 10) \n</code></pre>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">5.2、避免内联过滤处理器</span></span><br><span class=\"line\"><span class=\"section\">-------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">避免使用数学运算或内联字符串操作来定义数据过滤器。内联处理过滤器值可防止 filter() 将其操作下推到底层数据源，因此前一个函数返回的数据会加载到内存中。这通常会导致严重的性能损失。</span><br><span class=\"line\"></span><br><span class=\"line\">例如，以下查询使用 Chronograf 仪表板模板变量和字符串连接来定义要过滤的区域。因为 filter() 使用内联字符串连接，所以它无法将其操作推送到底层数据源并将从 range() 返回的所有数据加载到内存中。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>from(bucket: “db&#x2F;rp”)<br>    |&gt; range(start: -1h)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r.region &#x3D;&#x3D; v.provider + v.region)</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">要动态设置过滤器并保持 <span class=\"attribute\">filter</span>() 函数的下推能力，请使用变量在 <span class=\"attribute\">filter</span>() 之外定义过滤器值：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>region &#x3D; v.provider + v.region</p>\n<p>from(bucket: “db&#x2F;rp”)<br>    |&gt; range(start: -1h)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r.region &#x3D;&#x3D; region)</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">5.3、避免短窗口持续时间</span></span><br><span class=\"line\"><span class=\"section\">-------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">开窗（根据时间间隔对数据进行分组）通常用于聚合和下采样数据。通过避免较短的窗口持续时间来提高性能。更多的窗口需要更多的计算能力来评估每行应该分配到哪个窗口。合理的窗口时长取决于查询的总时间范围。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">5.4、谨慎使用“繁重”的函数</span></span><br><span class=\"line\"><span class=\"section\">---------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">以下函数比其他函数使用更多的内存或 CPU。在使用它们之前，请考虑它们在您的数据处理中的必要性：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">*   </span>map()；</span><br><span class=\"line\"><span class=\"bullet\">*   </span>reduce()；</span><br><span class=\"line\"><span class=\"bullet\">*   </span>join()；</span><br><span class=\"line\"><span class=\"bullet\">*   </span>union()；</span><br><span class=\"line\"><span class=\"bullet\">*   </span>pivot()；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">5.5、尽可能使用set()而不是map()</span></span><br><span class=\"line\"><span class=\"section\">----------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">set()、experimental.set() 和 map 都可以设置数据中的列值，但是 set 函数比 map() 具有性能优势。使用以下准则来确定使用哪个：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">*   </span>如果将列值设置为预定义的静态值，请使用 set() 或 experimental.set()。</span><br><span class=\"line\"><span class=\"bullet\">*   </span>如果使用现有行数据动态设置列值，请使用 map()。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**1、将列值设置为静态值**</span>：以下查询在功能上相同，但使用 set() 比使用 map() 更高效。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>data<br>    |&gt; map(fn: (r) &#x3D;&gt; ({ r with foo: “bar” }))</p>\n<p>data<br>    |&gt; set(key: “foo”, value: “bar”)</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**2、使用现有行数据动态设置列值**</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>data<br>    |&gt; map(fn: (r) &#x3D;&gt; ({ r with foo: r.bar }))</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">5.6、平衡时间范围和数据精度</span></span><br><span class=\"line\"><span class=\"section\">---------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">为确保查询是高性能的，请平衡数据的时间范围和精度。例如，如果您查询每秒存储的数据并请求六个月的数据，则每个系列的结果将包括约 1550 万个点。根据 filter()(cardinality) 之后返回的序列数，这很快就会变成数十亿个点。 Flux 必须将这些点存储在内存中以生成响应。使用下推优化内存中存储的点数。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">5.7、使用Flux分析器测量查询性能</span></span><br><span class=\"line\"><span class=\"section\">-------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">使用 Flux Profiler 包测量查询性能并将性能指标附加到查询输出中。以下Flux分析器可用：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">*   </span>query：提供有关整个 Flux 脚本执行的统计信息。</span><br><span class=\"line\"><span class=\"bullet\">*   </span>operator：提供有关查询中每个操作的统计信息。</span><br><span class=\"line\"></span><br><span class=\"line\">导入分析器包并使用 profile.enabledProfilers 选项启用分析器。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>import “profiler”<br>option profiler.enabledProfilers &#x3D; [“query”, “operator”] </p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Flux 是 InfluxQL 和其他类似 SQL 的查询语言的替代品，用于查询和分析数据。 Flux 使用函数式语言模式，使其非常强大、灵活，并且能够克服 InfluxQL 的许多限制。本文概述了使用 Flux 而不是 InfluxQL 可能执行的许多任务，并提供有关 Flux 和 InfluxQL 奇偶校验的信息。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">6.1、可以使用Flux的情形</span></span><br><span class=\"line\"><span class=\"section\">---------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">### 6.1.1、Joins（连接）</span><br><span class=\"line\"></span><br><span class=\"line\">InfluxQL 从不支持连接。它们可以使用 TICKscript 来完成，但即使是 TICKscript 的连接能力也是有限的。 Flux 的 join() 函数允许您连接来自任何存储桶、任何度量和任何列的数据，只要每个数据集都包含要连接它们的列。这为真正强大和有用的操作打开了大门。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>dataStream1 &#x3D; from(bucket: “bucket1”)<br>    |&gt; range(start: -1h)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “network” and r._field &#x3D;&#x3D; “bytes-transferred”)</p>\n<p>dataStream2 &#x3D; from(bucket: “bucket1”)<br>    |&gt; range(start: -1h)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “httpd” and r._field &#x3D;&#x3D; “requests-per-sec”)</p>\n<p>join(tables: {d1: dataStream1, d2: dataStream2}, on: [“_time”, “_stop”, “_start”, “host”])</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">6.1</span><span class=\"number\">.2</span>、跨测量数学</span><br><span class=\"line\"></span><br><span class=\"line\">能够执行交叉测量连接还允许您使用来自单独测量的数据运行计算——这是 InfluxData 社区高度要求的功能。下面的示例从单独的测量、mem和processes中获取两个数据流，将它们连接起来，然后计算每个正在运行的进程使用的平均内存量：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> memUsed &#x3D; from(bucket: “telegraf&#x2F;autogen”)<br>    |&gt; range(start: -1h)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “mem” and r._field &#x3D;&#x3D; “used”)</p>\n<p>procTotal &#x3D; from(bucket: “telegraf&#x2F;autogen”)<br>    |&gt; range(start: -1h)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “processes” and r._field &#x3D;&#x3D; “total”)</p>\n<p>join(tables: {mem: memUsed, proc: procTotal}, on: [“_time”, “_stop”, “_start”, “host”])<br>    |&gt; map(fn: (r) &#x3D;&gt; ({_time: r._time, _value: r._value_mem &#x2F; r._value_proc &#x2F; 1000000}))</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 6.1.3、按标签排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">Inf</span>luxQL 的排序功能非常有限，只允许您使用 <span class=\"keyword\">ORDER</span> <span class=\"title\">BY</span> 时间子句控制时间的排序顺序。 Flux 的 sort() 函数根据列列表对记录进行排序。根据列类型，记录按字典顺序、数字顺序或时间顺序排序。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>from(bucket: “telegraf&#x2F;autogen”)<br>    |&gt; range(start: -12h)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “system” and r._field &#x3D;&#x3D; “uptime”)<br>    |&gt; sort(columns: [“region”, “host”, “_value”])</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">6.1</span><span class=\"number\">.4</span>、按任意列分组</span><br><span class=\"line\"></span><br><span class=\"line\">InfluxQL 允许您按标签或按时间间隔分组，但仅此而已。 Flux 允许您按数据集中的任何列进行分组，包括 _value。使用 Flux group() 函数定义对数据进行分组的列。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>from(bucket:”telegraf&#x2F;autogen”)<br>    |&gt; range(start:-12h)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “system” and r._field &#x3D;&#x3D; “uptime” )<br>    |&gt; group(columns:[“host”, “_value”])</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 6.1.5、按日历月和年的窗口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">InfluxQL</span> 不支持按日历月和年的窗口数据，因为它们的长度不同。 Flux 支持日历月和年的持续时间单位（<span class=\"number\">1</span>mo、<span class=\"number\">1</span>y），并允许您按日历月和年窗口和聚合数据。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>from(bucket:”telegraf&#x2F;autogen”)<br>    |&gt; range(start:-1y)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “mem” and r._field &#x3D;&#x3D; “used_percent” )<br>    |&gt; aggregateWindow(every: 1mo, fn: mean)</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">6.1</span><span class=\"number\">.6</span>、使用多个数据源</span><br><span class=\"line\"></span><br><span class=\"line\">InfluxQL 只能查询存储在 InfluxDB 中的数据。 Flux 可以从 CSV、PostgreSQL、MySQL、Google BigTable 等其他数据源查询数据。将该数据与 InfluxDB 中的数据相结合，以丰富查询结果。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>import “csv”<br>import “sql”</p>\n<p>csvData &#x3D; csv.from(csv: rawCSV)<br>sqlData &#x3D; sql.from(<br>    driverName: “postgres”,<br>    dataSourceName: “postgresql:&#x2F;&#x2F;user:password@localhost”,<br>    query: “SELECT * FROM example_table”,<br>)<br>data &#x3D; from(bucket: “telegraf&#x2F;autogen”)<br>    |&gt; range(start: -24h)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “sensor”)</p>\n<p>auxData &#x3D; join(tables: {csv: csvData, sql: sqlData}, on: [“sensor_id”])<br>enrichedData &#x3D; join(tables: {data: data, aux: auxData}, on: [“sensor_id”])</p>\n<p>enrichedData<br>    |&gt; yield(name: “enriched_data”)</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">6.1</span><span class=\"number\">.7</span>、类DatePart查询</span><br><span class=\"line\"></span><br><span class=\"line\">InfluxQL 不支持仅在一天中的指定时间返回结果的类似 DatePart 的查询。 Flux hourSelection 函数仅返回时间值在指定小时范围内的数据。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>from(bucket: “telegraf&#x2F;autogen”)<br>    |&gt; range(start: -1h)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “cpu” and r.cpu &#x3D;&#x3D; “cpu-total”)<br>    |&gt; hourSelection(start: 9, stop: 17)</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">6.1</span><span class=\"number\">.8</span>、Pivot</span><br><span class=\"line\"></span><br><span class=\"line\">InfluxQL 从未支持透视数据表。 Flux pivot() 函数提供了通过指定 rowKey、columnKey 和 valueColumn 参数来透视数据表的能力。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>from(bucket: “telegraf&#x2F;autogen”)<br>    |&gt; range(start: -1h)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “cpu” and r.cpu &#x3D;&#x3D; “cpu-total”)<br>    |&gt; pivot(rowKey: [“_time”], columnKey: [“_field”], valueColumn: “_value”)</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">6.1</span><span class=\"number\">.9</span>、直方图</span><br><span class=\"line\"></span><br><span class=\"line\">生成直方图的能力一直是 InfluxQL 非常需要的功能，但从未得到支持。 Flux 的 histogram() 函数使用输入数据生成累积直方图，并支持未来的其他直方图类型。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>from(bucket: “telegraf&#x2F;autogen”)<br>    |&gt; range(start: -1h)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “mem” and r._field &#x3D;&#x3D; “used_percent”)<br>    |&gt; histogram(buckets: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100,])</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">6.1</span><span class=\"selector-class\">.10</span>、协方差</span><br><span class=\"line\"></span><br><span class=\"line\">Flux 提供了简单的协方差计算函数。 <span class=\"built_in\">covariance</span>() 函数计算两列之间的协方差，<span class=\"built_in\">cov</span>() 函数计算两个数据流之间的协方差。</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"number\">1</span>、两列之间的协方差**</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>from(bucket: “telegraf&#x2F;autogen”)<br>    |&gt; range(start: -5m)<br>    |&gt; covariance(columns: [“x”, “y”])</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**2、两个数据流之间的协方差**</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>table1 &#x3D; from(bucket: “telegraf&#x2F;autogen”)<br>    |&gt; range(start: -15m)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “measurement_1”)</p>\n<p>table2 &#x3D; from(bucket: “telegraf&#x2F;autogen”)<br>    |&gt; range(start: -15m)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “measurement_2”)</p>\n<p>cov(x: table1, y: table2, on: [“_time”, “_field”])</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">6.1</span><span class=\"number\">.11</span>、将布尔值转换为整数</span><br><span class=\"line\"></span><br><span class=\"line\">InfluxQL 支持类型转换，但仅适用于数字数据类型（浮点数到整数，反之亦然）。 Flux 类型转换函数为类型转换提供了更广泛的支持，并允许您执行一些长期请求的操作，例如将布尔值转换为整数。</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"number\">1</span>、将布尔字段值转换为整数**</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>from(bucket: “telegraf&#x2F;autogen”)<br>    |&gt; range(start: -1h)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “m” and r._field &#x3D;&#x3D; “bool_field”)<br>    |&gt; toInt()</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">6.1</span><span class=\"number\">.12</span>、字符串操作和数据整形</span><br><span class=\"line\"></span><br><span class=\"line\">InfluxQL 在查询数据时不支持字符串操作。 Flux Strings 包是对字符串数据进行操作的函数集合。当与 map() 函数结合使用时，字符串包中的函数允许进行字符串清理和规范化等操作。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>import “strings”</p>\n<p>from(bucket: “telegraf&#x2F;autogen”)<br>    |&gt; range(start: -1h)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “weather” and r._field &#x3D;&#x3D; “temp”)<br>    |&gt; map(<br>        fn: (r) &#x3D;&gt; ({<br>            r with<br>            location: strings.toTitle(v: r.location),<br>            sensor: strings.replaceAll(v: r.sensor, t: “ “, u: “-“),<br>            status: strings.substring(v: r.status, start: 0, end: 8),<br>        })<br>    )</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### <span class=\"number\">6.1</span><span class=\"number\">.13</span>、使用地时数据</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>import “experimental&#x2F;geo”</p>\n<p>from(bucket: “geo&#x2F;autogen”)<br>    |&gt; range(start: -1w)<br>    |&gt; filter(fn: (r) &#x3D;&gt; r._measurement &#x3D;&#x3D; “taxi”)<br>    |&gt; geo.shapeData(latField: “latitude”, lonField: “longitude”, level: 20)<br>    |&gt; geo.filterRows(region: {lat: 40.69335938, lon: -73.30078125, radius: 20.0}, strict: true)<br>    |&gt; geo.asTracks(groupBy: [“fare-id”])</p>\n<pre><code>\n6.2、使用 InfluxQL 和 Flux parity\n-----------------------------\n\nFlux 正在努力实现与 InfluxQL 的完全平等，并为此添加了新功能。下表显示了 InfluxQL 语句、子句和函数及其等效的 Flux 函数。\n\n*to()函数只写入InfluxDB 2.0\n</code></pre>\n","text":"Flux数据脚本语言官方文档：Flux data scripting language | InfluxDB Enterprise 1.9 Documentat...","permalink":"/post/MIDDLEWARE/Flux数据脚本语言","photos":[],"count_time":{"symbolsCount":"110k","symbolsTime":"1:40"},"categories":[{"name":"Flux","slug":"Flux","count":1,"path":"api/categories/Flux.json"},{"name":"MIDDLEWARE","slug":"Flux/MIDDLEWARE","count":1,"path":"api/categories/Flux/MIDDLEWARE.json"}],"tags":[{"name":"使用","slug":"使用","count":5,"path":"api/tags/使用.json"},{"name":"time","slug":"time","count":1,"path":"api/tags/time.json"},{"name":"value","slug":"value","count":1,"path":"api/tags/value.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Flux%E6%95%B0%E6%8D%AE%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80\"><span class=\"toc-text\">Flux数据脚本语言</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1%E3%80%81Chronograf%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%8F%E8%A7%88%E5%99%A8\"><span class=\"toc-text\">3.1、Chronograf的数据浏览器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2%E3%80%81Influx-CLI\"><span class=\"toc-text\">3.2、Influx CLI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-1%E3%80%81%E9%80%9A%E8%BF%87%E5%8F%82%E6%95%B0%E6%8F%90%E4%BA%A4Flux%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">3.2.1、通过参数提交Flux查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-2%E3%80%81%E9%80%9A%E8%BF%87STDIN%E6%8F%90%E4%BA%A4Flux%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">3.2.2、通过STDIN提交Flux查询</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3%E3%80%81Flux%E6%95%B0%E6%8D%AE%E5%BA%93API\"><span class=\"toc-text\">3.3、Flux数据库API</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1%E3%80%81%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">4.1、你需要什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2%E3%80%81%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">4.2、关键概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-1%E3%80%81Buckets%EF%BC%88%E6%A1%B6%EF%BC%89\"><span class=\"toc-text\">4.2.1、Buckets（桶）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-2%E3%80%81Pipe-forward-operator%EF%BC%88%E7%AE%A1%E9%81%93%E8%BD%AC%E5%8F%91%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%89\"><span class=\"toc-text\">4.2.2、Pipe-forward operator（管道转发运算符）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-3%E3%80%81Tables%EF%BC%88%E8%A1%A8%EF%BC%89\"><span class=\"toc-text\">4.2.3、Tables（表）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3%E3%80%81%E4%BD%BF%E7%94%A8Flux%E7%9A%84%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">4.3、使用Flux的工具</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-4%E3%80%81%E4%BD%BF%E7%94%A8Flux%E6%9F%A5%E8%AF%A2InfluxDB\"><span class=\"toc-text\">4.4、使用Flux查询InfluxDB</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-1%E3%80%81%E5%AE%9A%E4%B9%89%E4%BD%A0%E7%9A%84%E6%95%B0%E6%8D%AE%E6%BA%90\"><span class=\"toc-text\">4.4.1、定义你的数据源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-2%E3%80%81%E6%8C%87%E5%AE%9A%E6%97%B6%E9%97%B4%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">4.4.2、指定时间范围</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-3%E3%80%81%E8%BF%87%E6%BB%A4%E6%82%A8%E7%9A%84%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4.4.3、过滤您的数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-4%E3%80%81%E8%BE%93%E5%87%BA%E6%82%A8%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4.4.4、输出您的查询数据</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-5%E3%80%81%E4%BD%BF%E7%94%A8Flux%E8%BD%AC%E6%8D%A2%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4.5、使用Flux转换数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-1%E3%80%81%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4.5.1、查询数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-2%E3%80%81Flux%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.5.2、Flux函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-3%E3%80%81%E7%AA%97%E5%8F%A3%E5%8C%96%E6%82%A8%E7%9A%84%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4.5.3、窗口化您的数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-4%E3%80%81%E8%81%9A%E5%90%88%E7%AA%97%E5%8F%A3%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4.5.4、聚合窗口数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-5%E3%80%81%E5%B0%86%E6%97%B6%E9%97%B4%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%82%A8%E7%9A%84%E8%81%9A%E5%90%88%E4%B8%AD\"><span class=\"toc-text\">4.5.5、将时间添加到您的聚合中</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-6%E3%80%81%E5%B1%95%E5%BC%80%E8%81%9A%E5%90%88%E8%A1%A8\"><span class=\"toc-text\">4.5.6、展开聚合表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-7%E3%80%81%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.5.7、辅助函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-6%E3%80%81Flux%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">4.6、Flux语法基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-1%E3%80%81%E7%AE%80%E5%8D%95%E7%9A%84%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">4.6.1、简单的表达式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-2%E3%80%81%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">4.6.2、变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-3%E3%80%81%E8%AE%B0%E5%BD%95\"><span class=\"toc-text\">4.6.3、记录</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-4%E3%80%81%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">4.6.4、列表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-5%E3%80%81%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">4.6.5、函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-6%E3%80%81%E7%AE%A1%E9%81%93%E8%BD%AC%E5%8F%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">4.6.6、管道转发运算符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-7%E3%80%81%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">4.7、基本语法的实际应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-7-1%E3%80%81%E5%A4%9A%E8%A1%8C%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">4.7.1、多行输入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-7-2%E3%80%81%E5%8D%95%E8%A1%8C%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">4.7.2、单行输入</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-8%E3%80%81%E4%BD%BF%E7%94%A8Flux%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4.8、使用Flux查询数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-1%E3%80%81%E6%9F%A5%E8%AF%A2%E5%AD%97%E6%AE%B5%E5%92%8C%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">4.8.1、查询字段和标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-2%E3%80%81group-%EF%BC%9A%E5%AF%B9InfluxDB%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%88%86%E7%BB%84\"><span class=\"toc-text\">4.8.2、group()：对InfluxDB中的数据进行分组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-3%E3%80%81sort-amp-limit-%EF%BC%9A%E4%BD%BF%E7%94%A8Flux%E5%AF%B9%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F%E5%92%8C%E9%99%90%E5%88%B6\"><span class=\"toc-text\">4.8.3、sort() &amp; limit()：使用Flux对数据进行排序和限制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-4%E3%80%81Window-amp-aggregate\"><span class=\"toc-text\">4.8.4、Window &amp; aggregate</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-5%E3%80%81%E7%94%A8%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97%E8%BD%AC%E6%8D%A2%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4.8.5、用数学运算转换数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-6%E3%80%81%E8%AE%A1%E7%AE%97%E7%99%BE%E5%88%86%E6%AF%94\"><span class=\"toc-text\">4.8.6、计算百分比</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-7%E3%80%81increase-%EF%BC%9A%E8%B7%9F%E8%B8%AA%E8%A1%A8%E4%B8%AD%E5%A4%9A%E4%B8%AA%E5%88%97%E7%9A%84%E5%A2%9E%E5%8A%A0\"><span class=\"toc-text\">4.8.7、increase()：跟踪表中多个列的增加</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-8%E3%80%81movingAverage-amp-timedMovingAverage-%EF%BC%9A%E7%A7%BB%E5%8A%A8%E5%B9%B3%E5%9D%87%E5%80%BC\"><span class=\"toc-text\">4.8.8、movingAverage() &amp; timedMovingAverage() ：移动平均值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-9%E3%80%81%E8%AE%A1%E7%AE%97%E5%8F%98%E5%8C%96%E7%8E%87\"><span class=\"toc-text\">4.8.9、计算变化率</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-10%E3%80%81%E4%BD%BF%E7%94%A8Flux%E5%88%9B%E5%BB%BA%E7%9B%B4%E6%96%B9%E5%9B%BE\"><span class=\"toc-text\">4.8.10、使用Flux创建直方图</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-11%E3%80%81%E5%A1%AB%E5%85%85\"><span class=\"toc-text\">4.8.11、填充</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-12%E3%80%81%E6%9F%A5%E6%89%BE%E4%B8%AD%E5%80%BC\"><span class=\"toc-text\">4.8.12、查找中值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-22%E3%80%81%E6%9D%A1%E4%BB%B6%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">4.8.22、条件逻辑</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-23%E3%80%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">4.8.23、正则表达式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-24%E3%80%81%E5%9C%B0%E7%90%86%E6%97%B6%E6%80%81%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4.8.24、地理时态数据</span></a></li></ol></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Kafka Consumer 重置 Offset","uid":"de6c24354e140e6b852bef14e54f1711","slug":"MIDDLEWARE/Kafka Consumer 重置 Offset","date":"2023-05-06T18:33:12.000Z","updated":"2025-09-30T03:26:47.699Z","comments":true,"path":"api/articles/MIDDLEWARE/Kafka Consumer 重置 Offset.json","keywords":"XuGuangSheng","cover":"/covers/kafka-consumer-offset.jpg","text":"Kafka Consumer 重置 Offset在Kafka Version为0.11.0.0之后，Consumer的Offset信息不再默认保存在Zookee...","permalink":"/post/MIDDLEWARE/Kafka Consumer 重置 Offset","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"offset","slug":"offset","count":1,"path":"api/categories/offset.json"},{"name":"MIDDLEWARE","slug":"offset/MIDDLEWARE","count":1,"path":"api/categories/offset/MIDDLEWARE.json"}],"tags":[{"name":"consumer","slug":"consumer","count":2,"path":"api/tags/consumer.json"},{"name":"topic","slug":"topic","count":2,"path":"api/tags/topic.json"},{"name":"Offset","slug":"Offset","count":1,"path":"api/tags/Offset.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SpringBoot3.x原生镜像-Native Image尝鲜","uid":"6f7565fb2acf3311af859a2ea4b76698","slug":"JAVA/SpringBoot3.x原生镜像-Native Image尝鲜","date":"2023-04-26T16:52:21.000Z","updated":"2025-09-30T03:26:21.161Z","comments":true,"path":"api/articles/JAVA/SpringBoot3.x原生镜像-Native Image尝鲜.json","keywords":"XuGuangSheng","cover":"/covers/springboot3-x-native-image.jpg","text":"SpringBoot3.x原生镜像-Native Image尝鲜前提#Spring团队致力于为Spring应用程序提供原生映像支持已经有一段时间了。在Sprin...","permalink":"/post/JAVA/SpringBoot3.x原生镜像-Native Image尝鲜","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"native","slug":"native","count":1,"path":"api/categories/native.json"},{"name":"JAVA","slug":"native/JAVA","count":1,"path":"api/categories/native/JAVA.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"spring","slug":"spring","count":4,"path":"api/tags/spring.json"},{"name":"boot","slug":"boot","count":1,"path":"api/tags/boot.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}