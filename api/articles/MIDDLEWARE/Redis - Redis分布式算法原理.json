{"title":"Redis - Redis分布式算法原理","uid":"fb69e728d1b56159eab29357e4640574","slug":"MIDDLEWARE/Redis - Redis分布式算法原理","date":"2023-07-06T17:05:32.000Z","updated":"2025-09-30T03:26:50.152Z","comments":true,"path":"api/articles/MIDDLEWARE/Redis - Redis分布式算法原理.json","keywords":"XuGuangSheng","cover":"/covers/redis-redis.jpg","content":"<h1 id=\"Redis-Redis分布式算法原理\"><a href=\"#Redis-Redis分布式算法原理\" class=\"headerlink\" title=\"Redis - Redis分布式算法原理\"></a>Redis - Redis分布式算法原理</h1><h3 id=\"一、Redis集群的使用\"><a href=\"#一、Redis集群的使用\" class=\"headerlink\" title=\"一、Redis集群的使用\"></a><strong>一、Redis集群的使用</strong></h3><p>我们在使用Redis的时候，为了保证Redis的高可用，提高Redis的读写性能，最简单的方式我们会做主从复制，组成Master-Master或者Master-Slave的形式，或者搭建Redis集群，进行数据的读写分离，类似于数据库的主从复制和读写分离。如下所示：</p>\n<p><img src=\"https://ucc.alicdn.com/images/user-upload-01/2020033113520410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RyZWFtX1dlYXZl,size_16,color_FFFFFF,t_70\"></p>\n<p>同样类似于数据库，当单表数据大于500W的时候需要对其进行分库分表，当数据量很大的时候（标准可能不一样，要看Redis服务器容量）我们同样可以对Redis进行类似的操作，就是分库分表。</p>\n<p>假设，我们有一个社交网站，需要使用Redis存储图片资源，存储的格式为键值对，key值为图片名称，value为该图片所在文件服务器的路径，我们需要根据文件名查找该文件所在文件服务器上的路径，数据量大概有2000W左右，按照我们约定的规则进行分库，<strong>规则就是随机分配</strong>，我们可以部署8台缓存服务器，每台服务器大概含有500W条数据，并且进行主从复制，示意图如下：</p>\n<p><img src=\"https://ucc.alicdn.com/images/user-upload-01/20200331135229376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RyZWFtX1dlYXZl,size_16,color_FFFFFF,t_70\"></p>\n<p>由于规则是随机的，所有我们的一条数据都有可能存储在任何一组Redis中，例如上图我们用户查找一张名称为”a.png”的图片，由于规则是随机的，我们不确定具体是在哪一个Redis服务器上的，因此我们需要进行1、2、3、4，4次查询才能够查询到（也就是遍历了所有的Redis服务器），这显然不是我们想要的结果，有了解过的小伙伴可能会想到，随机的规则不行，可以使用类似于数据库中的分库分表规则：按照Hash值、取模、按照类别、按照某一个字段值等等常见的规则就可以出来了！好，按照我们的主题，我们就使用Hash的方式。</p>\n<h3 id=\"二、为Redis集群使用Hash\"><a href=\"#二、为Redis集群使用Hash\" class=\"headerlink\" title=\"二、为Redis集群使用Hash\"></a><strong>二、为Redis集群使用Hash</strong></h3><p>可想而知，如果我们使用Hash的方式，每一张图片在进行分库的时候都可以定位到特定的服务器，示意图如下：</p>\n<p><img src=\"https://ucc.alicdn.com/images/user-upload-01/20200331135305696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RyZWFtX1dlYXZl,size_16,color_FFFFFF,t_70\"></p>\n<p>上图中，假设我们查找的是”a.png”，由于有4台服务器（排除从库），因此公式为 hash(a.png) % 4 &#x3D; 2，可知定位到了第2号服务器，这样的话就不会遍历所有的服务器，大大提升了性能！</p>\n<h3 id=\"三、使用Hash的问题\"><a href=\"#三、使用Hash的问题\" class=\"headerlink\" title=\"三、使用Hash的问题\"></a>三、使用Hash的问题</h3><p>上述的方式虽然提升了性能，我们不再需要对整个Redis服务器进行遍历！但是，使用上述Hash算法进行缓存时，会出现一些缺陷，主要体现在服务器数量变动的时候，所有缓存的位置都要发生改变！</p>\n<p>试想一下，如果4台缓存服务器已经不能满足我们的缓存需求，那么我们应该怎么做呢？很简单，多增加几台缓存服务器不就行了！假设：我们增加了一台缓存服务器，那么缓存服务器的数量就由4台变成了5台。那么原本hash(a.png) % 4 &#x3D; 2 的公式就变成了hash(a.png) % 5 &#x3D; ？ ， 可想而知这个结果肯定不是2的，这种情况带来的结果就是当服务器数量变动时，所有缓存的位置都要发生改变！换句话说，当服务器数量发生改变时，所有缓存在一定时间内是失效的，当应用无法从缓存中获取数据时，则会向后端数据库请求数据（还记得上一篇的《缓存雪崩》吗？）！</p>\n<p>同样的，假设4台缓存中突然有一台缓存服务器出现了故障，无法进行缓存，那么我们则需要将故障机器移除，但是如果移除了一台缓存服务器，那么缓存服务器数量从4台变为3台，也是会出现上述的问题！</p>\n<p>所以，我们应该想办法不让这种情况发生，但是由于上述Hash算法本身的缘故，使用取模法进行缓存时，这种情况是无法避免的，为了解决这些问题，Hash一致性算法（一致性Hash算法）诞生了！</p>\n<h3 id=\"四、一致性Hash算法的神秘面纱\"><a href=\"#四、一致性Hash算法的神秘面纱\" class=\"headerlink\" title=\"四、一致性Hash算法的神秘面纱\"></a><strong>四、一致性Hash算法的神秘面纱</strong></h3><p>一致性Hash算法也是使用取模的方法，只是，刚才描述的取模法是对服务器的数量进行取模，而一致性Hash算法是对2^32取模，什么意思呢？简单来说，一致性Hash算法将整个<a href=\"https://so.csdn.net/so/search?q=%E5%93%88%E5%B8%8C&spm=1001.2101.3001.7020\">哈希</a>值空间组织成一个虚拟的圆环，如假设某哈希函数H的值空间为0-2^32-1（即哈希值是一个32位无符号整形），整个哈希环如下：</p>\n<p><img src=\"https://ucc.alicdn.com/images/user-upload-01/20200331135633831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RyZWFtX1dlYXZl,size_16,color_FFFFFF,t_70\"></p>\n<p>整个空间按<strong>顺时针方向组织</strong>，圆环的正上方的点代表0，0点右侧的第一个点代表1，以此类推，2、3、4、5、6……直到2^32-1，也就是说0点左侧的第一个点代表2^32-1， 0和2^32-1在零点中方向重合，我们把这个由2^32个点组成的圆环称为<strong>Hash环</strong>。</p>\n<p>下一步将各个服务器使用Hash进行一个哈希，具体可以选择服务器的<strong>IP或主机名</strong>作为关键字进行哈希，这样每台机器就能确定其在哈希环上的位置，这里假设将上文中四台服务器使用IP地址哈希后在环空间的位置如下：</p>\n<p><img src=\"https://ucc.alicdn.com/images/user-upload-01/20200331135752122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RyZWFtX1dlYXZl,size_16,color_FFFFFF,t_70\"></p>\n<p>接下来使用如下算法定位数据访问到相应服务器：将数据key使用相同的函数Hash计算出哈希值，并确定此数据在环上的位置，从此位置沿环顺时针“行走”，第一台遇到的服务器就是其应该定位到的服务器！</p>\n<p>例如我们有Object A、Object B、Object C、Object D四个数据对象，经过哈希计算后，在环空间上的位置如下：</p>\n<p><img src=\"https://ucc.alicdn.com/images/user-upload-01/20200331135810175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RyZWFtX1dlYXZl,size_16,color_FFFFFF,t_70\"></p>\n<p>根据一致性Hash算法，数据A会被定为到Node A上，B被定为到Node B上，C被定为到Node C上，D被定为到Node D上。</p>\n<h3 id=\"五、一致性Hash算法的容错性和可扩展性\"><a href=\"#五、一致性Hash算法的容错性和可扩展性\" class=\"headerlink\" title=\"五、一致性Hash算法的容错性和可扩展性\"></a>五、一致性Hash算法的容错性和可扩展性</h3><p>现假设Node C不幸宕机，可以看到此时对象A、B、D不会受到影响，只有C对象被重定位到Node D。一般的，在一致性Hash算法中，如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响，如下所示：</p>\n<p><img src=\"https://ucc.alicdn.com/images/user-upload-01/20200331135831841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RyZWFtX1dlYXZl,size_16,color_FFFFFF,t_70\"></p>\n<p>下面考虑另外一种情况，如果在系统中增加一台服务器Node X，如下图所示：</p>\n<p><img src=\"https://ucc.alicdn.com/images/user-upload-01/20200331135845826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RyZWFtX1dlYXZl,size_16,color_FFFFFF,t_70\"></p>\n<p>此时对象Object A、B、D不受影响，只有对象C需要重定位到新的Node X ！一般的，在一致性Hash算法中，如果增加一台服务器，则受影响的数据仅仅是新服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它数据也不会受到影响。</p>\n<p><strong>综上所述，一致性Hash算法对于节点的增减都只需重定位环空间中的一小部分数据，具有较好的容错性和可扩展性。</strong> </p>\n<h3 id=\"六、Hash环的数据倾斜问题\"><a href=\"#六、Hash环的数据倾斜问题\" class=\"headerlink\" title=\"六、Hash环的数据倾斜问题\"></a>六、Hash环的数据倾斜问题</h3><p>一致性Hash算法在<strong>服务节点太少时</strong>，容易因为节点分部不均匀而造成<strong>数据倾斜</strong>（被缓存的对象大部分集中缓存在某一台服务器上）问题，例如系统中只有两台服务器，其环分布如下：</p>\n<p><img src=\"https://ucc.alicdn.com/images/user-upload-01/20200331135924971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RyZWFtX1dlYXZl,size_16,color_FFFFFF,t_70\"></p>\n<p>此时必然造成大量数据集中到Node A上，而只有极少量会定位到Node B上。为了解决这种数据倾斜问题，一致性Hash算法引入了<strong>虚拟节点机制</strong>，即对每一个服务节点计算多个哈希，每个计算结果位置都放置一个此服务节点，称为<strong>虚拟节点</strong>。具体做法可以在服务器IP或主机名的后面增加编号来实现。</p>\n<p>例如上面的情况，可以为每台服务器计算三个虚拟节点，于是可以分别计算 “Node A#1”、“Node A#2”、“Node A#3”、“Node B#1”、“Node B#2”、“Node B#3”的哈希值，于是形成六个虚拟节点：</p>\n<p><img src=\"https://ucc.alicdn.com/images/user-upload-01/20200331135959580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RyZWFtX1dlYXZl,size_16,color_FFFFFF,t_70\"></p>\n<p>同时数据定位算法不变，<strong>只是多了一步虚拟节点到实际节点的映射</strong>，例如定位到“Node A#1”、“Node A#2”、“Node A#3”三个虚拟节点的数据均定位到Node A上。这样就解决了服务节点少时数据倾斜的问题。在实际应用中，通常将虚拟节点数设置为32甚至更大，因此即使很少的服务节点也能做到相对均匀的数据分布。</p>\n<h3 id=\"七、总结\"><a href=\"#七、总结\" class=\"headerlink\" title=\"七、总结\"></a>七、总结</h3><p>上文中，我们一步步分析了什么是一致性Hash算法，主要是考虑到分布式系统每个节点都有可能失效，并且新的节点很可能动态的增加进来的情况，如何保证当系统的节点数目发生变化的时候，我们的系统仍然能够对外提供良好的服务，这是值得考虑的！</p>\n","text":"Redis - Redis分布式算法原理一、Redis集群的使用我们在使用Redis的时候，为了保证Redis的高可用，提高Redis的读写性能，最简单的方式我...","permalink":"/post/MIDDLEWARE/Redis - Redis分布式算法原理","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"Hash","slug":"Hash","count":1,"path":"api/categories/Hash.json"},{"name":"MIDDLEWARE","slug":"Hash/MIDDLEWARE","count":1,"path":"api/categories/Hash/MIDDLEWARE.json"}],"tags":[{"name":"Redis","slug":"Redis","count":3,"path":"api/tags/Redis.json"},{"name":"Node","slug":"Node","count":1,"path":"api/tags/Node.json"},{"name":"png","slug":"png","count":2,"path":"api/tags/png.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Redis-Redis%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">Redis - Redis分布式算法原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81Redis%E9%9B%86%E7%BE%A4%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">一、Redis集群的使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E4%B8%BARedis%E9%9B%86%E7%BE%A4%E4%BD%BF%E7%94%A8Hash\"><span class=\"toc-text\">二、为Redis集群使用Hash</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E4%BD%BF%E7%94%A8Hash%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">三、使用Hash的问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E7%9A%84%E7%A5%9E%E7%A7%98%E9%9D%A2%E7%BA%B1\"><span class=\"toc-text\">四、一致性Hash算法的神秘面纱</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%B9%E9%94%99%E6%80%A7%E5%92%8C%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7\"><span class=\"toc-text\">五、一致性Hash算法的容错性和可扩展性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81Hash%E7%8E%AF%E7%9A%84%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">六、Hash环的数据倾斜问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">七、总结</span></a></li></ol></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java中的零拷贝","uid":"37fc72851c01fae66c3f1f8cc79de26f","slug":"JAVA/Java中的零拷贝","date":"2023-07-21T14:02:55.000Z","updated":"2025-09-30T03:26:12.619Z","comments":true,"path":"api/articles/JAVA/Java中的零拷贝.json","keywords":"XuGuangSheng","cover":"/covers/java.jpg","text":"Java中的零拷贝 先提出两个问题：IO过程中，哪些步骤进行了拷贝？哪些地方零拷贝？Java支持哪些零拷贝？ 带着这俩问题，我们一起来看下面的探究。 哪里听说过...","permalink":"/post/JAVA/Java中的零拷贝","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"upload","slug":"upload","count":1,"path":"api/categories/upload.json"},{"name":"JAVA","slug":"upload/JAVA","count":1,"path":"api/categories/upload/JAVA.json"}],"tags":[{"name":"images","slug":"images","count":1,"path":"api/tags/images.json"},{"name":"copy","slug":"copy","count":1,"path":"api/tags/copy.json"},{"name":"DMA","slug":"DMA","count":1,"path":"api/tags/DMA.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"小米路由器 AX9000 开发版固件直接获取 SSH","uid":"86b13b8415e2a3ceb3c7a4d2cff47573","slug":"OTHER/小米路由器 AX9000 开发版固件直接获取 SSH","date":"2023-06-21T00:09:21.000Z","updated":"2025-09-30T03:27:01.931Z","comments":true,"path":"api/articles/OTHER/小米路由器 AX9000 开发版固件直接获取 SSH.json","keywords":"XuGuangSheng","cover":"/covers/ax9000-ssh.jpg","text":"小米路由器 AX9000 开发版固件直接获取 SSH1.下载安装开发版固件官网下载: http://www.miwifi.com/miwifi_download...","permalink":"/post/OTHER/小米路由器 AX9000 开发版固件直接获取 SSH","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"com","slug":"com","count":3,"path":"api/categories/com.json"},{"name":"OTHER","slug":"com/OTHER","count":2,"path":"api/categories/com/OTHER.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"blog","slug":"blog","count":3,"path":"api/tags/blog.json"},{"name":"miwifi","slug":"miwifi","count":1,"path":"api/tags/miwifi.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}