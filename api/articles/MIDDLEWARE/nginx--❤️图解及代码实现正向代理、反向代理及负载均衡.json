{"title":"nginx--❤️图解及代码实现正向代理、反向代理及负载均衡","uid":"7c8ff8b55627526d1305ad59c430dd58","slug":"MIDDLEWARE/nginx--❤️图解及代码实现正向代理、反向代理及负载均衡","date":"2022-09-15T10:07:03.000Z","updated":"2025-09-30T03:26:53.541Z","comments":true,"path":"api/articles/MIDDLEWARE/nginx--❤️图解及代码实现正向代理、反向代理及负载均衡.json","keywords":"XuGuangSheng","cover":"/covers/nginx.jpg","content":"<h1 id=\"nginx–❤️图解及代码实现正向代理、反向代理及负载均衡\"><a href=\"#nginx–❤️图解及代码实现正向代理、反向代理及负载均衡\" class=\"headerlink\" title=\"nginx–❤️图解及代码实现正向代理、反向代理及负载均衡\"></a>nginx–❤️图解及代码实现正向代理、反向代理及负载均衡</h1><p>什么是nginx？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>【百度百科】<br>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器…</p></blockquote>\n<p>除了<code>反向代理</code>，nginx还支持<code>正向代理</code>、<code>负载均衡</code>以及基于SSL安全证书的<code>HTTPS</code>访问等功能特性~<br>本文主要是介绍是<code>如何配置nginx正向代理、反向代理及负载均衡</code>，进入正文~</p>\n<p><strong>什么是代理？来一张图了解下</strong><br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/3064a6223522b5a6f95b0fc0f18416e7.png\"></p>\n<p>代理又分为<code>正向代理</code>和<code>反向代理</code>。</p>\n<h2 id=\"1-1-什么是正向代理？\"><a href=\"#1-1-什么是正向代理？\" class=\"headerlink\" title=\"1.1 什么是正向代理？\"></a>1.1 什么是正向代理？</h2><p><strong>先来看张图~</strong><br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/fc695a55ad8e1b219123c463ecb4be40.png\"></p>\n<p><strong>【再举个栗子】</strong> </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>某同学喜欢<code>面向搜索引擎编程</code>，想通过 百度 搜索引擎查找一些学习资料，但是有些网站直接访问可能不太安全，会暴露自己的IP，同学比较苦恼，想着怎样才能使用百度 搜索自己想要的学习资料，又<code>不会暴露自己的IP</code>在网站上呢？<br>这时我告诉该同学，我呢手上刚好有一台<code>代理服务器</code>，这台<code>代理服务器</code>通过nginx配置了正向代理转发<code>http</code>和<code>https</code>请求，你呢，只需要在自己的Windows本地电脑的网关配置一下这台代理服务器的IP和端口号，就能正常通过代理服务器访问到百度 并搜索相关的学习资料了，<code>还不会暴露自己真实的IP</code>~<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/bd601c7c7bbbb4383ff661cda3ae4340.png\"></p></blockquote>\n<p>同学非常兴奋，说自己了解过nginx，但是啥是正向代理啊？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>正向代理，指的是通过<code>代理服务器</code> 代理<code>浏览器/客户端</code>去重定向请求访问到<code>目标服务器</code> 的一种代理服务。<br>正向代理服务的特点是<code>代理服务器</code> 代理的对象是<code>浏览器/客户端</code>，也就是对于<code>目标服务器</code> 来说<code>浏览器/客户端</code>是隐藏的。</p></blockquote>\n<p>同学觉得有点意思，于是又问，那nginx如何实现正向代理啊？</p>\n<h2 id=\"1-2-如何实现nginx正向代理？\"><a href=\"#1-2-如何实现nginx正向代理？\" class=\"headerlink\" title=\"1.2 如何实现nginx正向代理？\"></a>1.2 如何实现nginx正向代理？</h2><p><strong>（1）正向代理转发https说明</strong></p>\n<p>在实现nginx正向代理之前，先说明一下，现在的网站基本上都是<code>https</code>，因此要实现nginx正向代理转发请求，除了要配置转发<code>http80</code>端口的请求，还有配置<code>https443</code>端口的请求~<br>正向代理转发<code>http</code>请求很简单，不过正向代理转发<code>https</code>请求稍微有一点麻烦，目前网上的教程大多都是如下这样配置的（也不知道他们验证过没。。。）：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/e6b0bf08abad7b2a7dbb9131350ec814.png\"></p>\n<p>一开始我也像上面那样配置，虽然<code>http</code>请求正常转发了，但是发现<code>https</code>并没有转成功，而是报错<code>HTTP/1.1 400 Bad Request</code>~<br>后来才了解到，nginx官方并不支持直接转发<code>https</code>请求，但是阿里的一个大佬对nginx拓展了一个<code>ngx_http_proxy_connect_module</code>模块，并且在<code>github</code>上开源了 <a href=\"https://github.com/chobits/ngx_http_proxy_connect_module\">https://github.com/chobits/ngx_http_proxy_connect_module</a><br>不过维护的<code>ngx_http_proxy_connect_module</code>模块的补丁也是有nginx版本限制的（目前维护了<code>1.4.x~1.19.x</code>版本），如<code>README.md</code>说明：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/00b41df7a4b799bfe2155ba187ae811b.png\"></p>\n<p>如果你安装的nginx版本不在<code>1.4.x~1.19.x</code>这个范围内，那无法支持正向代理转发<code>https</code>请求。</p>\n<p><strong>（2）安装nginx</strong><br>如果已安装nginx（可跳过），这里以<code>1.9.2</code>版本为例，使用<code>root</code>用户进行安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /usr/nginx</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">wget http://nginx.org/download/nginx-1.9.2.tar.gz</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">tar -xzvf nginx-1.9.2.tar.gz</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /usr/nginx/nginx-1.9.2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">make &amp;&amp; make install</span> </span><br></pre></td></tr></table></figure>\n\n<p>这里安装nginx通过<code>install</code>进行编译安装，编译后默认安装目录为<code>/usr/local/nginx</code>，后续配置新模块<code>ngx_http_proxy_connect_module</code>还需要重新<code>install</code>编译一次~</p>\n<p><strong>（3）下载新模块</strong><br>GitHub上下载<code>ngx_http_proxy_connect_module</code>的<code>zip</code>压缩包源码：<br><a href=\"https://github.com/chobits/ngx_http_proxy_connect_module\">https://github.com/chobits/ngx_http_proxy_connect_module</a><br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/af0e5e19f34e9c225d6e5e01c653811e.png\"></p>\n<p><strong>（4）解压新模块源码</strong><br>将新模块<code>ngx_http_proxy_connect_module</code>源码压缩包上传到服务器<code>/usr/nginx</code>目录，并解压并重命名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> -p /usr/nginx</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> /usr/nginx</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">/usr/nginx</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">unzip ngx_http_proxy_connect_module-master.zip</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mv</span> ngx_http_proxy_connect_module-master ngx_http_proxy_connect_module</span> </span><br></pre></td></tr></table></figure>\n\n<p><strong>（5）添加新模块到nginx</strong><br>使用<code>root</code>用户进入nginx的资源目录<code>/usr/nginx/nginx-1.9.2</code>，给nginx添加新模块<code>ngx_http_proxy_connect_module</code>和并重新编译<code>nginx</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">/usr/nginx/nginx-1.9.2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">patch -p1 &lt; /usr/nginx/ngx_http_proxy_connect_module/patch/proxy_connect.patch</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">./configure --add-module=/usr/nginx/ngx_http_proxy_connect_module</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">make &amp;&amp; make install</span> </span><br></pre></td></tr></table></figure>\n\n<p><strong>–说明：</strong><br>这里<code>nginx-1.9.2</code>版本对应<code>proxy_connect.patch</code>补丁，其他版本相关补丁支持版本，详情见GitHub~ <a href=\"https://github.com/chobits/ngx_http_proxy_connect_module\">https://github.com/chobits/ngx_http_proxy_connect_module</a></p>\n<p>使用<code>root</code>用户安装和编译新模块完成后，如果你希望后续不使用<code>root</code>用户运维，可以授权安装目录<code>/usr/local/nginx</code>给<code>nginx</code>用户或者其他普通用户~</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> -R nginx:nginx /usr/local/nginx</span><br><span class=\"line\"><span class=\"built_in\">chown</span> root:root /usr/local/nginx/sbin/nginx</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +s /usr/local/nginx/sbin/nginx </span><br></pre></td></tr></table></figure>\n\n<p><strong>–说明：</strong><br>二进制<code>/usr/local/nginx/sbin/nginx</code>文件需要重新归属为<code>root</code>用户，并且权限位添加<code>s</code>权限（权限位<code>+s</code>的二进制文件属于是管道文件，也就是普通用户也可执行该二进制文件，执行后产生的进程属于该文件的权限所有者，这里文件所有者是<code>root</code>）<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/20a5b79b773ce5d9aad4ff88b111221f.png\"></p>\n<p><strong>（6）修改nginx的配置</strong><br>修改nginx的配置分别添加<code>http</code>和<code>https</code>的<code>server</code>，其他配置保持不变~</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/<span class=\"keyword\">local</span>/nginx/<span class=\"keyword\">conf</span>/nginx.<span class=\"keyword\">conf</span> </span><br></pre></td></tr></table></figure>\n\n<p>这两个<code>server</code>主要配置是对<code>DNS解析</code>和<code>proxy_pass代理</code>进行：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> server &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    resolver 114.114.114.114;</span><br><span class=\"line\">    </span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    </span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    </span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass                 http:<span class=\"string\">//</span>$host$request_uri;</span><br><span class=\"line\">        proxy_<span class=\"keyword\">set</span>_header           HOST $host;</span><br><span class=\"line\">        proxy_buffers              256 4k;</span><br><span class=\"line\">        proxy_max_temp_file_size   0k;</span><br><span class=\"line\">        proxy_<span class=\"keyword\">connect</span>_timeout      30;</span><br><span class=\"line\">        proxy_send_timeout         60;</span><br><span class=\"line\">        proxy_read_timeout         60;</span><br><span class=\"line\">        proxy_next_upstream error  timeout invalid_header http_502;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    resolver 114.114.114.114;</span><br><span class=\"line\">    </span><br><span class=\"line\">    listen 443;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    </span><br><span class=\"line\">    proxy_<span class=\"keyword\">connect</span>;</span><br><span class=\"line\">    proxy_<span class=\"keyword\">connect</span>_allow            443 563;</span><br><span class=\"line\">    proxy_<span class=\"keyword\">connect</span>_<span class=\"keyword\">connect</span>_timeout  10s;</span><br><span class=\"line\">    proxy_<span class=\"keyword\">connect</span>_read_timeout     10s;</span><br><span class=\"line\">    proxy_<span class=\"keyword\">connect</span>_send_timeout     10s;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http:<span class=\"string\">//</span>$host;</span><br><span class=\"line\">        proxy_<span class=\"keyword\">set</span>_header Host $host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><strong>– DNS说明：</strong><br>（国内外）目前比较主流的DNS：<br>（国外）谷歌：<code>8.8.8.8</code> developers.google.com<br>（国外）OpenDNS：<code>208.67.222.222</code> signup.opendns.com<br>（国内）114：<code>114.114.114.114</code> <a href=\"http://www.114dns.com/\">www.114dns.com</a><br>（国内）腾讯：<code>119.29.29.29</code> <a href=\"http://www.dnspod.cn/\">www.dnspod.cn</a><br>（国内）阿里：<code>223.5.5.5</code> alidns.com<br>（国内）百度：<code>180.76.76.76</code> dudns.baidu.com</p>\n<p><strong>（7）检查和刷新nginx配置</strong></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -t</span><br><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s reload </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-3-客户端访问（验证正向代理）\"><a href=\"#1-3-客户端访问（验证正向代理）\" class=\"headerlink\" title=\"1.3 客户端访问（验证正向代理）\"></a>1.3 客户端访问（验证正向代理）</h2><p>客户端要代理访问目标网站示例对象：<br><code>http://www.baidu.com</code> 和<code>https://www.baidu.com</code></p>\n<p><strong>（1）客户端–Windows浏览器访问</strong><br><strong>首先在本地电脑的IE浏览器设置代理服务器和端口</strong>：<br>IE-&gt;右上角 -&gt;工具 -&gt;Internet选项-&gt;连接-&gt;局域网（LAN）设置 -&gt;配置代理IP和端口<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/0c839373aad92e90d9c82e1c218e6935.png\"></p>\n<p><strong>浏览器访问</strong><br><a href=\"http://www.baidu.com/\">http://www.baidu.com/</a> 和<a href=\"https://www.baidu.com/\">https://www.baidu.com/</a><br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/fc916c3c4ee735eafa3e6a3a8c397b8d.png\"></p>\n<p><strong>实时查看nginx日志</strong></p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f /usr/<span class=\"keyword\">local</span>/nginx/logs/<span class=\"keyword\">access</span>.<span class=\"built_in\">log</span> </span><br></pre></td></tr></table></figure>\n\n<p>通过实时查看nginx的访问日志，可以看到Windows下设置代理IP和端口后，本地电脑访问的所有网页会通过<code>代理服务器</code>进行访问网页，实现了正向代理的功能，并且<code>隐藏了用户自己真实的IP</code>~</p>\n<p><strong>（2）客户端–Linux代理访问</strong><br>Linux下也可以验证<code>代理服务器</code>是否能正常代理转发<code>http</code>和<code>https</code>请求~</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">curl</span> http://www.baidu.com/ -v -x <span class=\"number\">127.0.0.1:80</span></span><br><span class=\"line\">curl https://www.baidu.com/ -v -x <span class=\"number\">127.0.0.1:443</span> </span><br></pre></td></tr></table></figure>\n\n<p>nginx正向代理转发<code>https</code>成功：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/da33fcdde1a53e1e1abd2fe0f5b81ac1.png\"></p>\n<h2 id=\"2-1-什么是反向代理？\"><a href=\"#2-1-什么是反向代理？\" class=\"headerlink\" title=\"2.1 什么是反向代理？\"></a>2.1 什么是反向代理？</h2><p><strong>先来一张图了解下~</strong><br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/e875c4658cbf43d0ab9406fcc06734d7.png\"></p>\n<p>相比于正向代理，反向代理的定义如下：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>反向代理，指的是<code>浏览器/客户端</code>并不知道自己要访问具体哪台<code>目标服务器</code>，只知道去访问<code>代理服务器</code> ，<code>代理服务器</code>再通过<code>反向代理 +负载均衡</code>实现请求分发到<code>应用服务器</code>的一种代理服务。<br>反向代理服务的特点是<code>代理服务器</code> 代理的对象是<code>应用服务器</code>，也就是对于<code>浏览器/客户端</code> 来说<code>应用服务器</code>是隐藏的。</p></blockquote>\n<h2 id=\"2-2-nginx实现反向代理\"><a href=\"#2-2-nginx实现反向代理\" class=\"headerlink\" title=\"2.2 nginx实现反向代理\"></a>2.2 nginx实现反向代理</h2><p><strong>（1）修改nginx配置</strong><br>修改nginx配置<code>vi /usr/local/nginx/conf/nginx.conf</code> 在<code>http</code>模块中配置如下：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/cc0af0b580bb3aa5534a7bbbb617e0e0.png\"></p>\n<p>nginx反向代理都是结合负载均衡来实现的，这里先直接提供<code>反向代理+负载均衡</code>的配置，<code>负载均衡</code>后一章节介绍~</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"section\">upstream</span> reverseProxyServer&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attribute\">server</span> 应用服务器A的IP:<span class=\"number\">8080</span> weight=<span class=\"number\">10</span> max_fails=<span class=\"number\">2</span> fail_timeout=<span class=\"number\">10s</span>; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attribute\">server</span> 应用服务器B的IP:<span class=\"number\">8080</span> weight=<span class=\"number\">5</span> fail_timeout=<span class=\"number\">10s</span> max_fails=<span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attribute\">server</span> 应用服务器C的IP:<span class=\"number\">8080</span> weight=<span class=\"number\">5</span> fail_timeout=<span class=\"number\">10s</span> max_fails=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"section\">location</span> /appname &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://reverseProxyServer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><strong>（2）检查和刷新nginx配置</strong></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -t</span><br><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s reload </span><br></pre></td></tr></table></figure>\n\n<p><strong>（3）浏览器访问</strong><br>代理服务器部署了tomcat应用，访问tomcat静态页面验证一波~<br><code>http://代理服务器IP:8080/appname/ReverseProxy1.html</code><br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/e955a692e4bbfd851e1ff630cd9dc592.png\"></p>\n<h2 id=\"3-1-什么是负载均衡？\"><a href=\"#3-1-什么是负载均衡？\" class=\"headerlink\" title=\"3.1 什么是负载均衡？\"></a>3.1 什么是负载均衡？</h2><p><strong>再来看下前面介绍反向代理的这张图~</strong><br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/e875c4658cbf43d0ab9406fcc06734d7.png\"></p>\n<p>可以看到<code>负载均衡（Load Balance）</code>的主要作用是采用了<code>负载均衡算法</code>将请求分发到<code>集群模式</code>中的<code>应用服务器</code>上，这样即使某个后台<code>应用服务器</code>挂了，其他<code>应用服务器</code>还可以正常接收请求，实现了<code>高可用</code>，并且集群模式模式下的应用服务器支持<code>纵向扩展</code>，可以应对业务快速增长带来的<code>高并发</code>应用场景~</p>\n<h2 id=\"3-2-负载均衡算法有哪些？\"><a href=\"#3-2-负载均衡算法有哪些？\" class=\"headerlink\" title=\"3.2 负载均衡算法有哪些？\"></a>3.2 负载均衡算法有哪些？</h2><p><strong><code>负载均衡算法</code>常用的有<code>轮询</code>、<code>权重</code>和<code>ip_hash</code>算法，默认是<code>轮询</code>算法~</strong></p>\n<p><strong>（1）基于<code>轮询</code>的算法</strong><br>原理是每一个请求按时间顺序逐一被分发到不同的应用服务器，如果接收请求的应用服务器挂了，并且请求超过最大失败次数<code>max_fails</code>（<strong>1次</strong>），则在失效时间<code>fail_timeout</code>（<strong>10秒</strong>）内不会再转发请求到该节点~</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">upstream</span> defaultReverseProxyServer&#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">192.168.0.1:8080</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">192.168.0.2:8080</span>; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><strong>（2）基于<code>权重</code>的算法</strong><br>原理是每一个请求按权重被分发到不同的应用服务器，同样，如果接收请求的应用服务器挂了，并且请求超过最大失败次数<code>max_fails</code>（<strong>默认1次或可设置N次</strong>），则在失效时间<code>fail_timeout</code>（<strong>默认10秒，可设置N秒</strong>）内，不会再转发请求到该节点~</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream weightReverseProxyServer&#123;</span><br><span class=\"line\">   <span class=\"built_in\"> server </span>192.168.0.1:8080 <span class=\"attribute\">weight</span>=10 <span class=\"attribute\">max_fails</span>=2 <span class=\"attribute\">fail_timeout</span>=5s;</span><br><span class=\"line\">   <span class=\"built_in\"> server </span>192.168.0.2:8080 <span class=\"attribute\">weight</span>=5 <span class=\"attribute\">max_fails</span>=2 <span class=\"attribute\">fail_timeout</span>=5s;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><strong>（3）基于<code>ip_hash</code>的算法</strong><br>原理是每一个请求按用户访问IP的哈希结果分配，如果请求来自同一个用户IP则固定这台IP访问一台应用服务器，该算法可以有效解决动态网页中存在的session共享问题。</p>\n<figure class=\"highlight roboconf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream ipHashReverseProxyServer&#123;</span><br><span class=\"line\">    <span class=\"attribute\">ip_hash;</span></span><br><span class=\"line\"><span class=\"attribute\">    server 192.168.0.1</span>:8080;</span><br><span class=\"line\">    <span class=\"attribute\">server 192.168.0.2</span>:8080;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>一般使用的是基于<code>权重</code>的算法，因为现在很多情况下都是<code>集群部署</code>，而且集群下的各个服务器资源大多都是不均匀的，资源高的则分配权重高一些，资源低的则分配权重低一些，这种情况使用基于<code>权重</code>的负载均衡算法，可以更高效的利用资源和提高并发处理能力~</p>\n","text":"nginx–❤️图解及代码实现正向代理、反向代理及负载均衡什么是nginx？ 【百度百科】Nginx (engine x) 是一个高性能的HTTP和反向代理web...","permalink":"/post/MIDDLEWARE/nginx--❤️图解及代码实现正向代理、反向代理及负载均衡","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"nginx","slug":"nginx","count":3,"path":"api/categories/nginx.json"},{"name":"MIDDLEWARE","slug":"nginx/MIDDLEWARE","count":2,"path":"api/categories/nginx/MIDDLEWARE.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"http","slug":"http","count":6,"path":"api/tags/http.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#nginx%E2%80%93%E2%9D%A4%EF%B8%8F%E5%9B%BE%E8%A7%A3%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E3%80%81%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\"><span class=\"toc-text\">nginx–❤️图解及代码实现正向代理、反向代理及负载均衡</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E4%BB%80%E4%B9%88%E6%98%AF%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%9F\"><span class=\"toc-text\">1.1 什么是正向代理？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0nginx%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%9F\"><span class=\"toc-text\">1.2 如何实现nginx正向代理？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%BF%E9%97%AE%EF%BC%88%E9%AA%8C%E8%AF%81%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%89\"><span class=\"toc-text\">1.3 客户端访问（验证正向代理）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%9F\"><span class=\"toc-text\">2.1 什么是反向代理？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-nginx%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">2.2 nginx实现反向代理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E4%BB%80%E4%B9%88%E6%98%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%9F\"><span class=\"toc-text\">3.1 什么是负载均衡？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">3.2 负载均衡算法有哪些？</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"时间格式化符号","uid":"d28bd52a7c1a8649c5def9f8f82b26d2","slug":"JAVA/时间格式化符号","date":"2022-09-20T17:06:36.000Z","updated":"2025-09-30T03:26:27.616Z","comments":true,"path":"api/articles/JAVA/时间格式化符号.json","keywords":"XuGuangSheng","cover":"/covers/207b4a267f05.jpg","text":"时间格式化符号用于将日期时间格式化为字符串的字符下表列出了您可以在模式中用来格式化或解析与日期时间相关的字符串的字符。 该表下面是一些注意事项，它们对表中的某些...","permalink":"/post/JAVA/时间格式化符号","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"Number","slug":"Number","count":1,"path":"api/categories/Number.json"},{"name":"JAVA","slug":"Number/JAVA","count":1,"path":"api/categories/Number/JAVA.json"}],"tags":[{"name":"Text","slug":"Text","count":1,"path":"api/tags/Text.json"},{"name":"例如","slug":"例如","count":1,"path":"api/tags/例如.json"},{"name":"时区","slug":"时区","count":1,"path":"api/tags/时区.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"在Ubuntu 18.04上安装和配置Squid代理","uid":"52d188bef2ce89a10077bd22ef3e8593","slug":"LINUX/在Ubuntu 18.04上安装和配置Squid代理","date":"2022-09-14T18:00:06.000Z","updated":"2025-09-30T03:26:41.719Z","comments":true,"path":"api/articles/LINUX/在Ubuntu 18.04上安装和配置Squid代理.json","keywords":"XuGuangSheng","cover":"/covers/ubuntu-18-04squid.jpg","text":"在Ubuntu 18.04上安装和配置Squid代理Squid是功能齐全的缓存代理，支持流行的网络协议，例如HTTP，HTTPS，FTP等。 Squid主要用于...","permalink":"/post/LINUX/在Ubuntu 18.04上安装和配置Squid代理","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"Squid","slug":"Squid","count":1,"path":"api/categories/Squid.json"},{"name":"LINUX","slug":"Squid/LINUX","count":1,"path":"api/categories/Squid/LINUX.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"squid","slug":"squid","count":1,"path":"api/tags/squid.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}