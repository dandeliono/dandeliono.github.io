{"title":"Nginx 服务器应用详解","uid":"83fcc4ed8f1c6107bdf89c34a8b59a09","slug":"MIDDLEWARE/Nginx 服务器应用详解","date":"2022-02-26T11:17:14.000Z","updated":"2025-09-30T03:26:49.656Z","comments":true,"path":"api/articles/MIDDLEWARE/Nginx 服务器应用详解.json","keywords":"XuGuangSheng","cover":"/covers/nginx.jpg","content":"<h1 id=\"Nginx-服务器应用详解\"><a href=\"#Nginx-服务器应用详解\" class=\"headerlink\" title=\"Nginx 服务器应用详解\"></a>Nginx 服务器应用详解</h1><h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p><code>Nginx</code>作为一个异步框架的 <code>Web</code>服务器，也可以用作反向代理，负载平衡器 和 <code>HTTP</code>缓存，下面本篇文章就来介绍一下<code>Nginx</code>反向代理、<code>SSL</code>及域名配置。</p>\n<p>基于公司中标某公司项目，作为项目产品组一员，前期负责服务器环境搭建部分。技术架构如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/29240c00783c094664dd6c628bc0d95e.webp\"></p>\n<p>其中，主要实现点如下：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>基于外网 APP 访问内网 Web 服务需求，应用<code>nginx</code>反向代理解决。</li>\n<li>基于内网 Web 服务访问外网 Internet 服务需求，应用<code>nginx</code>正向代理解决。</li>\n<li>随着访问并发量的增加，反向代理服务器会逐渐成为整个系统架构中的瓶颈点，容易出现单点故障，故考虑做方向代理服务器集群。</li>\n<li>同时考虑到网络安全，对报文进行<code>SSL</code>传输加密处理。</li>\n<li>外网 APP 通过域名方式访问反向代理服务器，故需要申请外网域名。</li>\n</ol></blockquote>\n<h2 id=\"二、环境搭建\"><a href=\"#二、环境搭建\" class=\"headerlink\" title=\"二、环境搭建\"></a>二、环境搭建</h2><h3 id=\"2-1-Nginx-安装\"><a href=\"#2-1-Nginx-安装\" class=\"headerlink\" title=\"2.1 Nginx 安装\"></a>2.1 Nginx 安装</h3><p>上传<code>Nginx</code>安装包到服务器</p>\n<pre><code>tar -zxvf nginx1.16.1.tar.gz\n</code></pre>\n<p>复制代码</p>\n<h3 id=\"2-2-Nginx-配置\"><a href=\"#2-2-Nginx-配置\" class=\"headerlink\" title=\"2.2 Nginx 配置\"></a>2.2 Nginx 配置</h3><ol>\n<li><p>将<code>nginx_config.zip</code>解压。</p>\n<p>  unzip nginx_config.zip -d nginx_config&#x2F;</p>\n</li>\n</ol>\n<p>复制代码</p>\n<ol start=\"2\">\n<li><p>将解压后的<code>nginx.conf</code>和<code>conf.d/default.conf</code>替换至服务器<code>/etc/nginx/</code>中的相应文件。</p>\n</li>\n<li><p>将 &#x2F; dtap 文件夹中的<code>aimonitor-front</code>的前端文件夹压缩，并复制至 nginx 安装目录（<code>/usr/share/nginx/html/</code>），改名为<code>AImonitor</code>  </p>\n<p>  tar -cz aimonitor-front -f aimonitor.tar.gz</p>\n</li>\n</ol>\n<p>复制代码</p>\n<ol start=\"5\">\n<li>修改<code>nginx.conf</code>和<code>conf.d/default.conf</code>中的 IP 信息。将 22.188.15.205 改为服务器地址。</li>\n<li>启动<code>nginx</code></li>\n</ol>\n<p>如果启动成功，效果如下</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/ab43859cf96506aa2e8aed666e3c11a9.webp\"></p>\n<pre><code>  systemctl restart nginx（重启）\n</code></pre>\n<p>复制代码</p>\n<p>当修改了配置文件使用：</p>\n<p>建议不要停止再重启，以防报错。</p>\n<h2 id=\"二、反向代理配置\"><a href=\"#二、反向代理配置\" class=\"headerlink\" title=\"二、反向代理配置\"></a>二、反向代理配置</h2><h3 id=\"2-1-什么是反向代理\"><a href=\"#2-1-什么是反向代理\" class=\"headerlink\" title=\"2.1 什么是反向代理?\"></a>2.1 什么是反向代理?</h3><p>反向代理和正向代理的区别就是：<strong>正向代理代理客户端，反向代理代理服务器。</strong> </p>\n<p>反向代理（<code>Reverse Proxy</code>），其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器 IP 地址。</p>\n<h3 id=\"2-2-反向代理的好处\"><a href=\"#2-2-反向代理的好处\" class=\"headerlink\" title=\"2.2 反向代理的好处\"></a>2.2 反向代理的好处</h3><p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/68d9d84296cb1538c6f4c4af2eb78692.webp\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>保护了真实的 web 服务器，web 服务器对外不可见，外网只能看到反向代理服务器，而反向代理服务器上并没有真实数据，因此，保证了 web 服务器的资源安全。</li>\n<li>反向代理为基础产生了<strong>动静资源分离</strong>以及<strong>负载均衡</strong>的方式，减轻 web 服务器的负担，加速了对网站访问速度。</li>\n<li>节约了有限的 IP 地址资源，企业内所有的网站共享一个在 Internet 中注册的 IP 地址，这些服务器分配私有地址，采用虚拟主机的方式对外提供服务；</li>\n</ol></blockquote>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/a7b9cea1eac99c9d42d25965e2925d94.webp\"></p>\n<h3 id=\"2-3-http-反向代理配置信息\"><a href=\"#2-3-http-反向代理配置信息\" class=\"headerlink\" title=\"2.3 http 反向代理配置信息\"></a>2.3 http 反向代理配置信息</h3><p><code>nginx</code>反向代理<code>http</code>配置步骤如下：</p>\n<ol>\n<li><p><code>vi /etc/nginx/nginx.conf</code> 新增如下配置信息：</p>\n<p>server {</p>\n</li>\n</ol>\n<p>复制代码</p>\n<ol start=\"2\">\n<li><code>nginx -s reload</code>重新加载配置。</li>\n</ol>\n<h2 id=\"三、反向代理集群搭建-待补充\"><a href=\"#三、反向代理集群搭建-待补充\" class=\"headerlink\" title=\"三、反向代理集群搭建 (待补充)\"></a>三、反向代理集群搭建 (待补充)</h2><h2 id=\"四、正向代理配置\"><a href=\"#四、正向代理配置\" class=\"headerlink\" title=\"四、正向代理配置\"></a>四、正向代理配置</h2><h3 id=\"4-1-什么是正向代理\"><a href=\"#4-1-什么是正向代理\" class=\"headerlink\" title=\"4.1 什么是正向代理?\"></a>4.1 什么是正向代理?</h3><p>前面提到过，<strong>正向代理代理客户端，反向代理代理服务器</strong>。</p>\n<p>理解<strong>正向代理</strong>、<strong>反向代理</strong>这两种代理的关键在于代理服务器所代理的对象是什么，<strong>正向代理代理的是客户端</strong>，我们需要在客户端进行一些代理的设置。而<strong>反向代理代理的是服务器</strong>，作为客户端的我们是无法感知到服务器的真实存在的。</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/60da8c954cd7c674a7a4e6a95ca9b76d.webp\"></p>\n<h3 id=\"4-2-http-正向代理配置信息\"><a href=\"#4-2-http-正向代理配置信息\" class=\"headerlink\" title=\"4.2 http 正向代理配置信息\"></a>4.2 http 正向代理配置信息</h3><p>正向代理：如果把局域网外的<code>Internet</code>想象成一个巨大的资源库，则局域网中的客户端要访问<code>Internet</code>，则需要通过代理服务器来访问，这种代理服务就称为正向代理。</p>\n<p><code>Nginx</code>配置如下：</p>\n<pre><code>server &#123;\n</code></pre>\n<p>复制代码</p>\n<p><strong>Nginx 正向代理配置说明</strong>：</p>\n<ol>\n<li><p>配置 <code>DNS</code> 解析 <code>IP</code> 地址，比如 <code>Google Public DNS</code>，以及超时时间（5 秒）。</p>\n<p>  resolver 8.8.8.8;</p>\n</li>\n</ol>\n<p>复制代码</p>\n<ol start=\"2\">\n<li><p>配置正向代理参数，均是由 <code>Nginx</code> 变量组成。其中 <code>proxy_set_header</code> 部分的配置，是为了解决如果 <code>URL</code> 中带 “<code>.</code>“（点）后 <code>Nginx</code> 503 错误。</p>\n<p>  proxy_pass $scheme:</p>\n</li>\n</ol>\n<p>复制代码</p>\n<ol start=\"3\">\n<li><p>配置缓存大小，关闭磁盘缓存读写减少<code>I/O</code>，以及代理连接超时时间。</p>\n<p>  proxy_buffers 256 4k;</p>\n</li>\n</ol>\n<p>复制代码</p>\n<ol start=\"4\">\n<li><p>配置代理服务器 <code>Http</code> 状态缓存时间。</p>\n<p>  proxy_cache_valid 200 302 10m;</p>\n</li>\n</ol>\n<p>复制代码</p>\n<p>注意⚠️：<strong>nginx 正向代理</strong>不支持代理 <code>Https</code> 网站。</p>\n<p>因为 <code>Nginx</code> 不支持 <code>CONNECT</code>，所以无法正向代理 <code>Https</code> 网站。如果访问 <code>Https</code> 网站，比如：<code>https://www.google.com</code>，<code>Nginx access.log</code> 日志如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>复制代码</p>\n<p>配置完<code>nginx</code>之后， <code>nginx -s reload</code>重新加载配置。</p>\n<p>如果出现<code>80</code>端口被占用，<code>Lsof -i :80</code> 查看 80 端口的<code>pid</code>进程号，然后用<code>Kill -9 + 进程号</code>，删除进程，再重启服务。</p>\n<p>查看<code>dns</code>方法</p>\n<h3 id=\"4-3-正向代理使用\"><a href=\"#4-3-正向代理使用\" class=\"headerlink\" title=\"4.3 正向代理使用\"></a>4.3 正向代理使用</h3><p>在需要访问外网的机器上（<strong>Linux 系统</strong>）执行以下操作之一即可：</p>\n<pre><code>gedit ~/.bashrc  \n</code></pre>\n<p>复制代码</p>\n<p>其中，yourproxyaddress 也就是你的<code>Nginx</code>服务器的 ip 了，<code>proxyport</code>就是上面配置中的 80，可以根据自己的需要修改。</p>\n<h3 id=\"4-4-Nginx-支持正向代理-https\"><a href=\"#4-4-Nginx-支持正向代理-https\" class=\"headerlink\" title=\"4.4 Nginx 支持正向代理 https\"></a>4.4 Nginx 支持正向代理 https</h3><p><code>nginx</code>本身是不支持<code>https</code>协议请求转发，为了让<code>nginx</code>能达到这一效果需要借助第三方模块<a href=\"https://github.com/chobits/ngx_http_proxy_connect_module\">ngx_http_proxy_connect_module</a>。首先下载这一模块到服务器，然后准备<code>nginx</code>环境。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>复制代码</p>\n<p>编译安装成功后，配置<code>nginx</code>正向代理：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>复制代码</p>\n<p>当配置文件配置好之后保存即可，重启<code>nginx</code>，进行测试：</p>\n<p><code>nginx -s reload</code>重新加载配置。</p>\n<p>去内网服务器里<code>curl</code>，可以在环境变量里添加代理：</p>\n<pre><code>...\n</code></pre>\n<p>复制代码</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/3266c70594f565b760365312f8a2d0e8.webp\"></p>\n<p>另一种方式不用加环境变量，临时代理</p>\n<pre><code>#curl -i  --proxy 代理IP：端口      要访问域名\n</code></pre>\n<p>复制代码</p>\n<h3 id=\"4-4-正向、反向代理对比\"><a href=\"#4-4-正向、反向代理对比\" class=\"headerlink\" title=\"4.4 正向、反向代理对比\"></a>4.4 正向、反向代理对比</h3><p>通过四、五章节的讲解，<strong>正向代理代理客户端，反向代理代理服务器</strong>。可以看到反向代理服务器对客户端透明，客户端无需任何配置，只需访问反向代理服务器 IP，即可实现访问内网服务。Nginx 反向代理服务器只需配置相应的代理规则即可。</p>\n<p>正向代理代理客户端，需要在作为 Nginx 正向代理服务器中配置相应的代理规则，配置方式与反向代理基本一致，同一服务器既作为反向代理服务器、又作为正向代理服务器，是由监听端口转发。Nginx 作为正向代理服务器无法代理 Https，若需支持的话，需要额外安装第三方模块<code>ngx_http_proxy_connect_module</code>。</p>\n<h2 id=\"五、SSL-配置\"><a href=\"#五、SSL-配置\" class=\"headerlink\" title=\"五、SSL 配置\"></a>五、SSL 配置</h2><h3 id=\"5-1-敲黑板\"><a href=\"#5-1-敲黑板\" class=\"headerlink\" title=\"5.1 敲黑板\"></a>5.1 敲黑板</h3><p>随着互联网的快速发展，给我们的生活带来便利的同时，也伴随着网络钓鱼、信息泄露、网络诈骗等网络安全事件的频繁发生，企业网站被钓鱼网站仿冒，遭受经济损失，影响品牌形象。</p>\n<p>如果网站不使用<code>SSL</code>证书，数据以<code>HTTP</code>明文传输，极容易被第三方监听、截取和篡改，而导致用户信息被泄露，给在线用户带来直接损失。通过部署<code>SSL</code>证书后能确保信息传输的安全性，可防止信息泄露。</p>\n<p>SSL(<code>Secure Sockets Layer</code>安全套接字协议), 及其继任者传输层安全（<code>Transport Layer Security</code>，<code>TLS</code>）是为网络通信提供安全及数据完整性的一种安全协议。<code>TLS</code>与<code>SSL</code>在<strong>传输层</strong>与<strong>应用层</strong>之间对网络连接进行加密。</p>\n<p><code>SSL</code>证书是数字证书 (数字证书包括：<strong>SSL 证书</strong>、<strong>客户端证书</strong>、<strong>代码签名证书</strong>等) 的一种，因为配置在服务器上也称为<code>服务器 SSL 证书</code>。<code>SSL 证书</code>就是遵守<code>SSL</code>协议，由受信任的数字证书颁发机构<code>CA</code>(如：沃通 CA) 在验证服务器身份后颁发的一种数字证书，它使用<code>ssl</code>协议在浏览器和<code>web server</code>之间建立一条安全通道，数据信息在<code>client</code>与<code>server</code>之间的安全传输.。</p>\n<p><code>**SSL 协议 **</code><strong>的特点：</strong> </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li><code>SSL 协议</code>可用于保护正常运行于<code>TCP</code>之上的任何应用协议，如<code>HTTP、FTP、SMTP</code>或<code>Telnet</code>的通信，最常见的是用<code>SSL</code>来保护<code>HTTP</code>的通信。</li>\n<li><code>SSL 协议</code>的优点在于它是与应用层协议无关的。高层的应用协议（如<code>HTTP、FTP、Telnet</code>等）能透明地建立于<code>SSL 协议</code>之上。</li>\n<li><code>SSL 协议</code>在应用层协议之前就已经完成加密算法、通信密钥的协商以及服务器的认证工作。在此之后应用层协议所传送的数据都会被加密，从而保证通信的安全性。</li>\n</ol></blockquote>\n<p><code>**SSL**</code><strong>的功能 ：</strong> </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>客户对服务器的身份认证。<code>SSL</code>服务器允许客户的浏览器使用标准的公钥加密技术和一些可靠的认证中心（<code>CA</code>）的证书，来确认服务器的合法性。</li>\n<li>服务器对客户的身份认证。也可通过公钥技术和证书进行认证，也可通过用户名，password 来认证。</li>\n<li>建立服务器与客户之间安全的数据通道。<code>SSL</code>要求客户与服务器之间所有发送的数据都被发送端加密、接收端解密，同时还检查数据的完整性。</li>\n</ol></blockquote>\n<p><strong>使用</strong><code>**SSL 证书 **</code><strong>的优势：</strong> </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><code>SSL 证书</code>用于实现数据加密传输，防止数据被泄露和篡改；</li>\n<li>用于认证服务器身份，防范被钓鱼网站攻击；</li>\n<li>用于消除浏览器地址栏发出的 “不安全” 警告；</li>\n<li>提高<code>SEO</code>搜索引擎排名；</li>\n<li>提升用户对网站的信任；</li>\n<li>有助于提高网站的在线销售业绩；</li>\n</ul></blockquote>\n<p>配置<code>SSL</code>模块首先需要<code>CA</code>证书，<code>CA</code>证书可以自己手动颁发也可以在阿里云申请。</p>\n<p>默认情况下<code>ssl</code>模块并未被安装，如果要使用该模块则需要在编译<code>nginx</code>时指定<code>–with-http_ssl_module</code>参数。</p>\n<h3 id=\"5-2-CA-证书生成\"><a href=\"#5-2-CA-证书生成\" class=\"headerlink\" title=\"5.2 CA 证书生成\"></a>5.2 CA 证书生成</h3><p>本小节主要讲述如何通过证书签名生成 CA 证书。</p>\n<p>首先确认<code>nginx</code>服务器已经安装<code>openssl</code>和<code>nginx</code>已经编译<code>ssl</code>的模块。</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/7e9a6502975aaaa5de149e5a45104594.webp\"></p>\n<p>生成秘钥和 CA 证书步骤：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>步骤 1：生成 key 秘钥</li>\n<li>步骤 2：生成证书签名请求文件（csr 文件）</li>\n<li>步骤 3：生成证书签名文件（CA 文件）</li>\n</ul></blockquote>\n<h4 id=\"5-2-1-生成-key-秘钥\"><a href=\"#5-2-1-生成-key-秘钥\" class=\"headerlink\" title=\"5.2.1 生成 key 秘钥\"></a>5.2.1 生成 key 秘钥</h4><p>首先，创建一个用来存放秘钥的文件夹。</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/da49c627bb9e23c30e4764466780b328.webp\"></p>\n<p>输入加密算法：<code>openssl genrsa -idea -out jesonc.key 1024</code>  </p>\n<p>回车，会让输入密码，这里设置为 123456，完成后会生成一个<code>.key</code>的文件</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/a8f4838b165b0d4df05c1b1d09e16bff.webp\"></p>\n<h4 id=\"5-2-2-生成证书签名请求文件（csr-文件）\"><a href=\"#5-2-2-生成证书签名请求文件（csr-文件）\" class=\"headerlink\" title=\"5.2.2 生成证书签名请求文件（csr 文件）\"></a>5.2.2 生成证书签名请求文件（csr 文件）</h4><pre><code>openssl req -new -key jesonc.key -out jesonc.csr\n</code></pre>\n<p>复制代码</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/4fa83413e0e5410067d6eee12114aeff.webp\"></p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/264bcf47068e844ad14901338fe27069.webp\"></p>\n<h4 id=\"5-2-3-生成证书签名文件（CA-文件）\"><a href=\"#5-2-3-生成证书签名文件（CA-文件）\" class=\"headerlink\" title=\"5.2.3 生成证书签名文件（CA 文件）\"></a>5.2.3 生成证书签名文件（CA 文件）</h4><p>打包：<code>openssl x509 -req -days 3650 -in jesonc.csr -signkey jesonc.key -out jesonc.crt</code>  </p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/464d9296aab516458ed05427a94f73f8.webp\"></p>\n<h3 id=\"5-3-https-反向代理配置信息\"><a href=\"#5-3-https-反向代理配置信息\" class=\"headerlink\" title=\"5.3 https 反向代理配置信息\"></a>5.3 https 反向代理配置信息</h3><p><code>https</code> 默认采用 <code>SHA-1</code> 算法，非常脆弱。我们可以使用<strong>迪菲 - 赫尔曼密钥</strong>交换。</p>\n<p>我们在 <code>/conf/ssl</code> 目录下生成 <code>dhparam.pem</code> 文件</p>\n<pre><code>openssl dhparam -out dhparam.pem 2048\n</code></pre>\n<p>复制代码</p>\n<p>下面的配置 <code>ssl_protocols</code> 和 <code>ssl_ciphers</code> 是用来限制连接只包含 <code>SSL/TLS</code> 的加強版本和算法。</p>\n<p>进入<code>/etc/nginx/conf.d/</code>  </p>\n<pre><code>server\n</code></pre>\n<p>复制代码</p>\n<p>如果要实现<code>http</code>强制跳转到<code>https</code>, 可以添加下面配置段:</p>\n<pre><code>server &#123;\n</code></pre>\n<p>复制代码</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意⚠️：网上也有许多使用 <code>rewrite</code> 来重定向，但是 <code>return</code> 指令简单高效，建议尽量使用 <code>return</code>。</p></blockquote>\n<p>配置好之后，<code>nginx -s reload</code>重新加载配置。</p>\n<p>确认已启用 443 的监听：<code>netstat -luntp|grep 443</code>  </p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/708523d2bf67799f53cc47a03ee9c6df.webp\"></p>\n<p>上面<code>server</code>部分第 2-5 项是关键。这些配置放在 <code>server</code> 块就可以对其中的所有 <code>location</code> 生效了，并且同时支持 <code>http</code> 和 <code>https</code> 。或者把 <code>http</code> 和 <code>https</code> 分开配置也很常见。</p>\n<h3 id=\"5-3-1-合并证书配置文件\"><a href=\"#5-3-1-合并证书配置文件\" class=\"headerlink\" title=\"5.3.1 合并证书配置文件\"></a>5.3.1 合并证书配置文件</h3><p>和<code>Apache</code>配置不同，<code>Nginx</code>需要将<strong>服务器证书</strong>和 <strong>ca 证书链</strong>合并到一个文件中，作为 <code>ssl_certificate</code> 配置内容。例如，按照证书链从下向上的顺序，我有三个证书：</p>\n<ul>\n<li><code>ssl.crt</code>（自己域名的服务器证书）</li>\n<li><code>sub.class1.server.ca.pem</code>（<code>startssl</code> 的一类证书）</li>\n<li><code>ca.pem</code>（<code>startssl</code> 的根证书）把它们的内容按顺序连接到的一个文件中，每个内容另起一行，中间没有空行或空格。</li>\n</ul>\n<h3 id=\"5-3-2-避免启动时输入密码\"><a href=\"#5-3-2-避免启动时输入密码\" class=\"headerlink\" title=\"5.3.2 避免启动时输入密码\"></a>5.3.2 避免启动时输入密码</h3><p>配好之后，启动<code>nginx</code> 会要你输入密钥的密码。这是因为 <code>ssl_certificate_key</code> 配置对应的文件（也就是 <code>startssl</code> 给你的私钥文件）内容是加密的，需要输入你创建这个时设置的密码才能解密。这样私钥虽然很安全，但是每次重启服务都要输入一次密码也太麻烦了。其实，只要证书改为解密了的内容，就可以避免每次输入密码。用如下命令即可：<code>openssl rsa -in ssl.key -out newssl.key</code> 输入密码，就生成了解密后的私钥内容，使用这个就 OK 了。</p>\n<p>但是就像前面说的，一定要在服务器上保护好它，例如：</p>\n<pre><code>chmod 400 ssl.key （仅root可读）\n</code></pre>\n<p>复制代码</p>\n<h3 id=\"5-3-3-优化-SSL-配置\"><a href=\"#5-3-3-优化-SSL-配置\" class=\"headerlink\" title=\"5.3.3 优化 SSL 配置\"></a>5.3.3 优化 SSL 配置</h3><p><code>SSL</code> 很消耗 <code>CPU</code> 资源，尤其是在建立连接的握手阶段。一是通过开启 <code>keepalive</code> 可以重用连接。二是可以重用和共享<code>ssl session</code>，见上面<code>ssl_session</code>相关配置。</p>\n<p>会话存储在工作人员之间共享的 <code>SSL</code> 会话缓存中，并由 <code>ssl_session_cache</code> 参数配置。1 兆字节的缓存包含大约 4000 个会话。默认缓存超时为 5 分钟。它可以通过使用增加 <code>ssl_session_timeout</code> 指令。</p>\n<h2 id=\"六、域名申请（待补充）\"><a href=\"#六、域名申请（待补充）\" class=\"headerlink\" title=\"六、域名申请（待补充）\"></a>六、域名申请（待补充）</h2><h2 id=\"七、拓展阅读\"><a href=\"#七、拓展阅读\" class=\"headerlink\" title=\"七、拓展阅读\"></a>七、拓展阅读</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><code>nginx -s stop</code>快速停止</li>\n<li><code>nginx -s quit</code>完整停止</li>\n<li><code>nginx -s reload</code>重新加载配置</li>\n<li><code>ps -ef | grep nginx</code>查看进程 id</li>\n<li><code>kill [option] 进程 id</code> option: (1) -9 强制杀死; (2)TERM 或 INT 快速停止服务; (3)QUIT 平缓停止</li>\n<li><code>nginx -v</code>查看版本</li>\n<li><code>nginx -t</code>检查配置文件关闭：<code>nginx -s stop -c /etc/nginx/nginx.conf</code>启动：<code>nginx -c /etc/nginx/nginx.conf</code><br><a href=\"https://xie.infoq.cn/article/0a047242abb928ca99cf6bf32\">https://xie.infoq.cn/article/0a047242abb928ca99cf6bf32</a></li>\n</ul></blockquote>\n","text":"Nginx 服务器应用详解一、前言Nginx作为一个异步框架的 Web服务器，也可以用作反向代理，负载平衡器 和 HTTP缓存，下面本篇文章就来介绍一下Ngin...","permalink":"/post/MIDDLEWARE/Nginx 服务器应用详解","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"nginx","slug":"nginx","count":3,"path":"api/categories/nginx.json"},{"name":"MIDDLEWARE","slug":"nginx/MIDDLEWARE","count":2,"path":"api/categories/nginx/MIDDLEWARE.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"SSL","slug":"SSL","count":1,"path":"api/tags/SSL.json"},{"name":"复制代码","slug":"复制代码","count":1,"path":"api/tags/复制代码.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Nginx-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">Nginx 服务器应用详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">一、前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">二、环境搭建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-Nginx-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">2.1 Nginx 安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-Nginx-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2.2 Nginx 配置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">二、反向代理配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">2.1 什么是反向代理?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">2.2 反向代理的好处</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-http-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">2.3 http 反向代理配置信息</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA-%E5%BE%85%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">三、反向代理集群搭建 (待补充)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">四、正向代理配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E4%BB%80%E4%B9%88%E6%98%AF%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">4.1 什么是正向代理?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-http-%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">4.2 http 正向代理配置信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">4.3 正向代理使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-Nginx-%E6%94%AF%E6%8C%81%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86-https\"><span class=\"toc-text\">4.4 Nginx 支持正向代理 https</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-%E6%AD%A3%E5%90%91%E3%80%81%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">4.4 正向、反向代理对比</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81SSL-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">五、SSL 配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E6%95%B2%E9%BB%91%E6%9D%BF\"><span class=\"toc-text\">5.1 敲黑板</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-CA-%E8%AF%81%E4%B9%A6%E7%94%9F%E6%88%90\"><span class=\"toc-text\">5.2 CA 证书生成</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-1-%E7%94%9F%E6%88%90-key-%E7%A7%98%E9%92%A5\"><span class=\"toc-text\">5.2.1 生成 key 秘钥</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-2-%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%90%8D%E8%AF%B7%E6%B1%82%E6%96%87%E4%BB%B6%EF%BC%88csr-%E6%96%87%E4%BB%B6%EF%BC%89\"><span class=\"toc-text\">5.2.2 生成证书签名请求文件（csr 文件）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-3-%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%90%8D%E6%96%87%E4%BB%B6%EF%BC%88CA-%E6%96%87%E4%BB%B6%EF%BC%89\"><span class=\"toc-text\">5.2.3 生成证书签名文件（CA 文件）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-https-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">5.3 https 反向代理配置信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-1-%E5%90%88%E5%B9%B6%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.3.1 合并证书配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-2-%E9%81%BF%E5%85%8D%E5%90%AF%E5%8A%A8%E6%97%B6%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81\"><span class=\"toc-text\">5.3.2 避免启动时输入密码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-3-%E4%BC%98%E5%8C%96-SSL-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">5.3.3 优化 SSL 配置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89\"><span class=\"toc-text\">六、域名申请（待补充）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E6%8B%93%E5%B1%95%E9%98%85%E8%AF%BB\"><span class=\"toc-text\">七、拓展阅读</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"利用云同步盘实现多台电脑部分配置同步问题","uid":"8d8408765c8cd5cad402c3f0cebc116d","slug":"WORK/利用云同步盘实现多台电脑部分配置同步问题","date":"2022-03-24T23:43:47.000Z","updated":"2025-09-30T03:27:02.871Z","comments":true,"path":"api/articles/WORK/利用云同步盘实现多台电脑部分配置同步问题.json","keywords":"XuGuangSheng","cover":"/covers/a1df9b7b1dfb.jpg","text":"利用云同步盘实现多台电脑部分配置同步问题我们经常会在公司，个人甚至更多环境不同的电脑进行切换，当然，也存在重装系统、换电脑等问题。而在每次更换之后，都会进行一次...","permalink":"/post/WORK/利用云同步盘实现多台电脑部分配置同步问题","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"init","slug":"init","count":1,"path":"api/categories/init.json"},{"name":"WORK","slug":"init/WORK","count":1,"path":"api/categories/init/WORK.json"}],"tags":[{"name":"当然","slug":"当然","count":1,"path":"api/tags/当然.json"},{"name":"ssh","slug":"ssh","count":1,"path":"api/tags/ssh.json"},{"name":"bat","slug":"bat","count":1,"path":"api/tags/bat.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"深入理解“软中断”","uid":"f4563b96f26978111a4862bba321db8f","slug":"LINUX/深入理解“软中断”","date":"2022-02-02T19:27:00.000Z","updated":"2025-09-30T03:26:43.649Z","comments":true,"path":"api/articles/LINUX/深入理解“软中断”.json","keywords":"XuGuangSheng","cover":"/covers/bce1619d1231.jpg","text":"深入理解“软中断”前言 软中断（softirq）导致 CPU 使用率升高也是最常见的一种性能问题 所以软中断这个硬骨头必须啃下去！ 回忆下什么是中断 中断是系统...","permalink":"/post/LINUX/深入理解“软中断”","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"CPU","slug":"CPU","count":5,"path":"api/categories/CPU.json"},{"name":"LINUX","slug":"CPU/LINUX","count":4,"path":"api/categories/CPU/LINUX.json"}],"tags":[{"name":"软中断","slug":"软中断","count":1,"path":"api/tags/软中断.json"},{"name":"也就是","slug":"也就是","count":1,"path":"api/tags/也就是.json"},{"name":"上半部","slug":"上半部","count":1,"path":"api/tags/上半部.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}