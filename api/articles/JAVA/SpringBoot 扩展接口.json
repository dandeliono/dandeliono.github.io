{"title":"SpringBoot 扩展接口","uid":"b17fc263eaa274b6bfcba03d60c157eb","slug":"JAVA/SpringBoot 扩展接口","date":"2023-11-15T16:23:04.000Z","updated":"2025-09-30T03:26:20.574Z","comments":true,"path":"api/articles/JAVA/SpringBoot 扩展接口.json","keywords":"XuGuangSheng","cover":"/covers/springboot.jpg","content":"<h1 id=\"SpringBoot-扩展接口\"><a href=\"#SpringBoot-扩展接口\" class=\"headerlink\" title=\"SpringBoot 扩展接口\"></a>SpringBoot 扩展接口</h1><h3 id=\"1、背景\"><a href=\"#1、背景\" class=\"headerlink\" title=\"1、背景\"></a>1、背景</h3><p>Spring的核心思想就是容器，当容器refresh的时候，外部看上去风平浪静，其实内部则是一片惊涛骇浪，汪洋一片。Springboot更是封装了Spring，遵循约定大于配置，加上自动装配的机制。很多时候我们只要引用了一个依赖，几乎是零配置就能完成一个功能的装配。</p>\n<p>我非常喜欢这种自动装配的机制，所以在自己开发中间件和公共依赖工具的时候也会用到这个特性。让使用者以最小的代价接入。想要把自动装配玩的转，就必须要了解spring对于bean的构造生命周期以及各个扩展接口。当然了解了bean的各个生命周期也能促进我们加深对spring的理解。业务代码也能合理利用这些扩展点写出更加漂亮的代码。</p>\n<p>在这篇文章里，我总结了几乎<code>Spring &amp; Springboot</code>所有的扩展接口，以及各个扩展点的使用场景。并且整理出了一个bean在spring内部从被加载到最后初始化完成所有可扩展点的顺序调用图。从而我们也能窥探到bean是如何一步步加载到spring容器中的。</p>\n<h3 id=\"2、可扩展的接口启动调用顺序图\"><a href=\"#2、可扩展的接口启动调用顺序图\" class=\"headerlink\" title=\"2、可扩展的接口启动调用顺序图\"></a>2、可扩展的接口启动调用顺序图</h3><p>以下是spring容器中Bean的生命周期内所有可扩展的点的调用顺序，下面会一个个分析</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f822549674d24118b6641d5bcc28ed65~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp#?w=640&h=649&e=jpg&b=fcfbfb\"></p>\n<h3 id=\"3、ApplicationContextInitializer\"><a href=\"#3、ApplicationContextInitializer\" class=\"headerlink\" title=\"3、ApplicationContextInitializer\"></a><strong>3、ApplicationContextInitializer</strong></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>org.springframework.context.ApplicationContextInitializer</p></blockquote>\n<p>这是整个spring容器在刷新之前初始化<code>ConfigurableApplicationContext</code>的回调接口，简单来说，就是在容器刷新之前调用此类的<code>initialize</code>方法。这个点允许被用户自己扩展。用户可以在整个spring容器还没被初始化之前做一些事情。</p>\n<p>可以想到的场景可能为，在最开始激活一些配置，或者利用这时候class还没被类加载器加载的时机，进行动态字节码注入等操作。</p>\n<p>扩展方式为：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestApplicationContextInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationContextInitializer</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">ConfigurableApplicationContext applicationContext</span>) &#123;      </span><br><span class=\"line\">        <span class=\"title class_\">System</span>.<span class=\"property\">out</span>.<span class=\"title function_\">println</span>(<span class=\"string\">&quot;[ApplicationContextInitializer]&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;      </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>因为这时候spring容器还没被初始化，所以想要自己的扩展的生效，有以下三种方式：</p>\n<ul>\n<li>在启动类中用<code>springApplication.addInitializers(new TestApplicationContextInitializer())</code>语句加入</li>\n<li>配置文件配置<code>context.initializer.classes=com.example.demo.TestApplicationContextInitializer</code></li>\n<li>Spring SPI扩展，在spring.factories中加入<code>org.springframework.context.ApplicationContextInitializer=com.example.demo.TestApplicationContextInitializer</code></li>\n</ul>\n<h3 id=\"4、BeanDefinitionRegistryPostProcessor\"><a href=\"#4、BeanDefinitionRegistryPostProcessor\" class=\"headerlink\" title=\"4、BeanDefinitionRegistryPostProcessor\"></a><strong>4、BeanDefinitionRegistryPostProcessor</strong></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor</p></blockquote>\n<p>这个接口在读取项目中的<code>beanDefinition</code>之后执行，提供一个补充的扩展点</p>\n<p>使用场景：你可以在这里动态注册自己的<code>beanDefinition</code>，可以加载classpath之外的bean</p>\n<p>扩展方式为:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestBeanDefinitionRegistryPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanDefinitionRegistryPostProcessor</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postProcessBeanDefinitionRegistry</span><span class=\"params\">(BeanDefinitionRegistry registry)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[BeanDefinitionRegistryPostProcessor] postProcessBeanDefinitionRegistry&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[BeanDefinitionRegistryPostProcessor] postProcessBeanFactory&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;      </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、BeanFactoryPostProcessor\"><a href=\"#5、BeanFactoryPostProcessor\" class=\"headerlink\" title=\"5、BeanFactoryPostProcessor\"></a><strong>5、BeanFactoryPostProcessor</strong></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>org.springframework.beans.factory.config.BeanFactoryPostProcessor</p></blockquote>\n<p>这个接口是<code>beanFactory</code>的扩展接口，调用时机在spring在读取<code>beanDefinition</code>信息之后，实例化bean之前。</p>\n<p>在这个时机，用户可以通过实现这个扩展接口来自行处理一些东西，比如修改已经注册的<code>beanDefinition</code>的元信息。</p>\n<p>扩展方式为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestBeanFactoryPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanFactoryPostProcessor</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[BeanFactoryPostProcessor]&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;      </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、InstantiationAwareBeanPostProcessor\"><a href=\"#6、InstantiationAwareBeanPostProcessor\" class=\"headerlink\" title=\"6、InstantiationAwareBeanPostProcessor\"></a><strong>6、InstantiationAwareBeanPostProcessor</strong></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor</p></blockquote>\n<p>该接口继承了<code>BeanPostProcess</code>接口，区别如下：</p>\n<p><strong><code>BeanPostProcess</code>接口只在bean的初始化阶段进行扩展（注入spring上下文前后），而<code>InstantiationAwareBeanPostProcessor</code>接口在此基础上增加了3个方法，把可扩展的范围增加了实例化阶段和属性注入阶段。</strong> </p>\n<p>该类主要的扩展点有以下5个方法，主要在bean生命周期的两大阶段：<strong>实例化阶段</strong>和<strong>初始化阶段</strong>，下面一起进行说明，按调用顺序为：</p>\n<ul>\n<li><code>postProcessBeforeInstantiation</code>：实例化bean之前，相当于new这个bean之前</li>\n<li><code>postProcessAfterInstantiation</code>：实例化bean之后，相当于new这个bean之后</li>\n<li><code>postProcessPropertyValues</code>：bean已经实例化完成，在属性注入时阶段触发，<code>@Autowired</code>,<code>@Resource</code>等注解原理基于此方法实现</li>\n<li><code>postProcessBeforeInitialization</code>：初始化bean之前，相当于把bean注入spring上下文之前</li>\n<li><code>postProcessAfterInitialization</code>：初始化bean之后，相当于把bean注入spring上下文之后</li>\n</ul>\n<p>使用场景：这个扩展点非常有用 ，无论是写中间件和业务中，都能利用这个特性。比如对实现了某一类接口的bean在各个生命期间进行收集，或者对某个类型的bean进行统一的设值等等。</p>\n<p>扩展方式为：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestInstantiationAwareBeanPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InstantiationAwareBeanPostProcessor</span> &#123;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title class_\">Object</span> <span class=\"title function_\">postProcessBeforeInitialization</span>(<span class=\"title class_\">Object</span> bean, <span class=\"title class_\">String</span> beanName) throws <span class=\"title class_\">BeansException</span> &#123;      </span><br><span class=\"line\">        <span class=\"title class_\">System</span>.<span class=\"property\">out</span>.<span class=\"title function_\">println</span>(<span class=\"string\">&quot;[TestInstantiationAwareBeanPostProcessor] before initialization &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title class_\">Object</span> <span class=\"title function_\">postProcessAfterInitialization</span>(<span class=\"title class_\">Object</span> bean, <span class=\"title class_\">String</span> beanName) throws <span class=\"title class_\">BeansException</span> &#123;      </span><br><span class=\"line\">        <span class=\"title class_\">System</span>.<span class=\"property\">out</span>.<span class=\"title function_\">println</span>(<span class=\"string\">&quot;[TestInstantiationAwareBeanPostProcessor] after initialization &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title class_\">Object</span> <span class=\"title function_\">postProcessBeforeInstantiation</span>(<span class=\"title class_\">Class</span>&lt;?&gt; beanClass, <span class=\"title class_\">String</span> beanName) throws <span class=\"title class_\">BeansException</span> &#123;      </span><br><span class=\"line\">        <span class=\"title class_\">System</span>.<span class=\"property\">out</span>.<span class=\"title function_\">println</span>(<span class=\"string\">&quot;[TestInstantiationAwareBeanPostProcessor] before instantiation &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> <span class=\"title function_\">postProcessAfterInstantiation</span>(<span class=\"title class_\">Object</span> bean, <span class=\"title class_\">String</span> beanName) throws <span class=\"title class_\">BeansException</span> &#123;      </span><br><span class=\"line\">        <span class=\"title class_\">System</span>.<span class=\"property\">out</span>.<span class=\"title function_\">println</span>(<span class=\"string\">&quot;[TestInstantiationAwareBeanPostProcessor] after instantiation &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title class_\">PropertyValues</span> <span class=\"title function_\">postProcessPropertyValues</span>(<span class=\"title class_\">PropertyValues</span> pvs, <span class=\"title class_\">PropertyDescriptor</span>[] pds, <span class=\"title class_\">Object</span> bean, <span class=\"title class_\">String</span> beanName) throws <span class=\"title class_\">BeansException</span> &#123;      </span><br><span class=\"line\">        <span class=\"title class_\">System</span>.<span class=\"property\">out</span>.<span class=\"title function_\">println</span>(<span class=\"string\">&quot;[TestInstantiationAwareBeanPostProcessor] postProcessPropertyValues &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> pvs;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、SmartInstantiationAwareBeanPostProcessor\"><a href=\"#7、SmartInstantiationAwareBeanPostProcessor\" class=\"headerlink\" title=\"7、SmartInstantiationAwareBeanPostProcessor\"></a><strong>7、SmartInstantiationAwareBeanPostProcessor</strong></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor</p></blockquote>\n<p>该扩展接口有3个触发点方法：</p>\n<ul>\n<li><code>predictBeanType</code>：该触发点发生在<code>postProcessBeforeInstantiation</code>之前(在图上并没有标明，因为一般不太需要扩展这个点)，这个方法用于预测Bean的类型，返回第一个预测成功的Class类型，如果不能预测返回null；当你调用<code>BeanFactory.getType(name)</code>时当通过bean的名字无法得到bean类型信息时就调用该回调方法来决定类型信息。</li>\n<li><code>determineCandidateConstructors</code>：该触发点发生在<code>postProcessBeforeInstantiation</code>之后，用于确定该bean的构造函数之用，返回的是该bean的所有构造函数列表。用户可以扩展这个点，来自定义选择相应的构造器来实例化这个bean。</li>\n<li><code>getEarlyBeanReference</code>：该触发点发生在<code>postProcessAfterInstantiation</code>之后，当有循环依赖的场景，当bean实例化好之后，为了防止有循环依赖，会提前暴露回调方法，用于bean实例化的后置处理。这个方法就是在提前暴露的回调方法中触发。</li>\n</ul>\n<p>扩展方式为：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSmartInstantiationAwareBeanPostProcessor</span> <span class=\"title\">implements</span> <span class=\"title\">SmartInstantiationAwareBeanPostProcessor</span> &#123;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;?&gt; predictBeanType(Class&lt;?&gt; beanClass, String beanName) throws BeansException &#123;      </span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;[TestSmartInstantiationAwareBeanPostProcessor] predictBeanType &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanClass;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Constructor&lt;?&gt;[] determineCandidateConstructors(Class&lt;?&gt; beanClass, String beanName) throws BeansException &#123;      </span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;[TestSmartInstantiationAwareBeanPostProcessor] determineCandidateConstructors &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object getEarlyBeanReference(Object bean, String beanName) throws BeansException &#123;      </span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;[TestSmartInstantiationAwareBeanPostProcessor] getEarlyBeanReference &quot;</span> + beanName);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;      </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、BeanFactoryAware\"><a href=\"#8、BeanFactoryAware\" class=\"headerlink\" title=\"8、BeanFactoryAware\"></a><strong>8、BeanFactoryAware</strong></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>org.springframework.beans.factory.BeanFactoryAware</p></blockquote>\n<p>这个类只有一个触发点，发生在bean的实例化之后，注入属性之前，也就是Setter之前。这个类的扩展点方法为<code>setBeanFactory</code>，可以拿到<code>BeanFactory</code>这个属性。</p>\n<p>使用场景为，你可以在bean实例化之后，但还未初始化之前，拿到 <code>BeanFactory</code>，在这个时候，可以对每个bean作特殊化的定制。也或者可以把<code>BeanFactory</code>拿到进行缓存，日后使用。</p>\n<p>扩展方式为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestBeanFactoryAware</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanFactoryAware</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBeanFactory</span><span class=\"params\">(BeanFactory beanFactory)</span> <span class=\"keyword\">throws</span> BeansException &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestBeanFactoryAware] &quot;</span> + beanFactory.getBean(TestBeanFactoryAware.class).getClass().getSimpleName());      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;      </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、ApplicationContextAwareProcessor\"><a href=\"#9、ApplicationContextAwareProcessor\" class=\"headerlink\" title=\"9、ApplicationContextAwareProcessor\"></a><strong>9、ApplicationContextAwareProcessor</strong></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>org.springframework.context.support.ApplicationContextAwareProcessor</p></blockquote>\n<p>该类本身并没有扩展点，但是该类内部却有6个扩展点可供实现 ，这些类触发的时机在bean实例化之后，初始化之前</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f6baac8cba04012b44b0c496402bcb2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp#?w=640&h=308&e=jpg&b=2c2b2b\"></p>\n<p>可以看到，该类用于执行各种驱动接口，在bean实例化之后，属性填充之后，通过执行以上红框标出的扩展接口，来获取对应容器的变量。<strong>所以这里应该来说是有6个扩展点</strong>，这里就放一起来说了</p>\n<ul>\n<li><code>EnvironmentAware</code>：用于获取<code>EnviromentAware</code>的一个扩展类，这个变量非常有用， 可以获得系统内的所有参数。当然个人认为这个Aware没必要去扩展，因为spring内部都可以通过注入的方式来直接获得。</li>\n<li><code>EmbeddedValueResolverAware</code>：用于获取<code>StringValueResolver</code>的一个扩展类， <code>StringValueResolver</code>用于获取基于<code>String</code>类型的properties的变量，一般我们都用<code>@Value</code>的方式去获取，如果实现了这个Aware接口，把<code>StringValueResolver</code>缓存起来，通过这个类去获取<code>String</code>类型的变量，效果是一样的。</li>\n<li><code>ResourceLoaderAware</code>：用于获取<code>ResourceLoader</code>的一个扩展类，<code>ResourceLoader</code>可以用于获取classpath内所有的资源对象，可以扩展此类来拿到<code>ResourceLoader</code>对象。</li>\n<li><code>ApplicationEventPublisherAware</code>：用于获取<code>ApplicationEventPublisher</code>的一个扩展类，<code>ApplicationEventPublisher</code>可以用来发布事件，结合<code>ApplicationListener</code>来共同使用，下文在介绍<code>ApplicationListener</code>时会详细提到。这个对象也可以通过spring注入的方式来获得。</li>\n<li><code>MessageSourceAware</code>：用于获取<code>MessageSource</code>的一个扩展类，<code>MessageSource</code>主要用来做国际化。</li>\n<li><code>ApplicationContextAware</code>：用来获取<code>ApplicationContext</code>的一个扩展类，<code>ApplicationContext</code>应该是很多人非常熟悉的一个类了，就是spring上下文管理器，可以手动的获取任何在spring上下文注册的bean，我们经常扩展这个接口来缓存spring上下文，包装成静态方法。同时<code>ApplicationContext</code>也实现了<code>BeanFactory</code>，<code>MessageSource</code>，<code>ApplicationEventPublisher</code>等接口，也可以用来做相关接口的事情。</li>\n</ul>\n<h3 id=\"10、BeanNameAware\"><a href=\"#10、BeanNameAware\" class=\"headerlink\" title=\"10、BeanNameAware\"></a><strong>10、BeanNameAware</strong></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>org.springframework.beans.factory.BeanNameAware</p></blockquote>\n<p>可以看到，这个类也是Aware扩展的一种，触发点在bean的初始化之前，也就是<code>postProcessBeforeInitialization</code>之前，这个类的触发点方法只有一个：<code>setBeanName</code></p>\n<p>使用场景为：用户可以扩展这个点，在初始化bean之前拿到spring容器中注册的的beanName，来自行修改这个beanName的值。</p>\n<p>扩展方式为：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">NormalBeanA</span> <span class=\"title\">implements</span> <span class=\"title\">BeanNameAware</span>&#123;      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NormalBeanA</span>()</span> &#123;      </span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;NormalBean constructor&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    @Override      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBeanName</span>(<span class=\"params\">String name</span>)</span> &#123;      </span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;[BeanNameAware] &quot;</span> + name);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;      </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、-PostConstruct\"><a href=\"#11、-PostConstruct\" class=\"headerlink\" title=\"11、@PostConstruct\"></a><strong>11、@PostConstruct</strong></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>javax.annotation.PostConstruct</p></blockquote>\n<p>这个并不算一个扩展点，其实就是一个标注。其作用是在bean的初始化阶段，如果对一个方法标注了<code>@PostConstruct</code>，会先调用这个方法。这里重点是要关注下这个标准的触发点，这个触发点是在<code>postProcessBeforeInitialization</code>之后，<code>InitializingBean.afterPropertiesSet</code>之前。</p>\n<p>使用场景：用户可以对某一方法进行标注，来进行初始化某一个属性</p>\n<p>扩展方式为：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">NormalBeanA</span> &#123;      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NormalBeanA</span>()</span> &#123;      </span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;NormalBean constructor&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    @PostConstruct      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span>()</span>&#123;      </span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;[PostConstruct] NormalBeanA&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;      </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、InitializingBean\"><a href=\"#12、InitializingBean\" class=\"headerlink\" title=\"12、InitializingBean\"></a><strong>12、InitializingBean</strong></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>org.springframework.beans.factory.InitializingBean</p></blockquote>\n<p>这个类，顾名思义，也是用来初始化bean的。<code>InitializingBean</code>接口为bean提供了初始化方法的方式，它只包括<code>afterPropertiesSet</code>方法，凡是继承该接口的类，在初始化bean的时候都会执行该方法。这个扩展点的触发时机在<code>postProcessAfterInitialization</code>之前。</p>\n<p>使用场景：用户实现此接口，来进行系统启动的时候一些业务指标的初始化工作。</p>\n<p>扩展方式为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NormalBeanA</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span>&#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[InitializingBean] NormalBeanA&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;      </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、FactoryBean\"><a href=\"#13、FactoryBean\" class=\"headerlink\" title=\"13、FactoryBean\"></a><strong>13、FactoryBean</strong></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>org.springframework.beans.factory.FactoryBean</p></blockquote>\n<p>一般情况下，Spring通过反射机制利用bean的class属性指定支线类去实例化bean，在某些情况下，实例化Bean过程比较复杂，如果按照传统的方式，则需要在bean中提供大量的配置信息。配置方式的灵活性是受限的，这时采用编码的方式可能会得到一个简单的方案。Spring为此提供了一个<code>org.springframework.bean.factory.FactoryBean</code>的工厂类接口，用户可以通过实现该接口定制实例化Bean的逻辑。</p>\n<p><code>FactoryBean</code>接口对于Spring框架来说占用重要的地位，Spring自身就提供了70多个<code>FactoryBean</code>的实现。它们隐藏了实例化一些复杂bean的细节，给上层应用带来了便利。从Spring3.0开始，<code>FactoryBean</code>开始支持泛型，即接口声明改为<code>FactoryBean&lt;T&gt;</code>的形式</p>\n<p>使用场景：用户可以扩展这个类，来为要实例化的bean作一个代理，比如为该对象的所有的方法作一个拦截，在调用前后输出一行log，模仿<code>ProxyFactoryBean</code>的功能。</p>\n<p>扩展方式为：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestFactoryBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FactoryBean</span>&lt;<span class=\"title class_\">TestFactoryBean</span>.<span class=\"property\">TestFactoryInnerBean</span>&gt; &#123;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title class_\">TestFactoryBean</span>.<span class=\"property\">TestFactoryInnerBean</span> <span class=\"title function_\">getObject</span>() throws <span class=\"title class_\">Exception</span> &#123;      </span><br><span class=\"line\">        <span class=\"title class_\">System</span>.<span class=\"property\">out</span>.<span class=\"title function_\">println</span>(<span class=\"string\">&quot;[FactoryBean] getObject&quot;</span>);      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestFactoryBean</span>.<span class=\"title class_\">TestFactoryInnerBean</span>();      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title class_\">Class</span>&lt;?&gt; <span class=\"title function_\">getObjectType</span>(<span class=\"params\"></span>) &#123;      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">TestFactoryBean</span>.<span class=\"property\">TestFactoryInnerBean</span>.<span class=\"property\">class</span>;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> <span class=\"title function_\">isSingleton</span>(<span class=\"params\"></span>) &#123;      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestFactoryInnerBean</span>&#123;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;      </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、SmartInitializingSingleton\"><a href=\"#14、SmartInitializingSingleton\" class=\"headerlink\" title=\"14、SmartInitializingSingleton\"></a><strong>14、SmartInitializingSingleton</strong></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>org.springframework.beans.factory.SmartInitializingSingleton</p></blockquote>\n<p>这个接口中只有一个方法<code>afterSingletonsInstantiated</code>，其作用是是 在spring容器管理的所有单例对象（非懒加载对象）初始化完成之后调用的回调接口。其触发时机为<code>postProcessAfterInitialization</code>之后。</p>\n<p>使用场景：用户可以扩展此接口在对所有单例对象初始化完毕后，做一些后置的业务处理。</p>\n<p>扩展方式为：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSmartInitializingSingleton</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SmartInitializingSingleton</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> <span class=\"title function_\">afterSingletonsInstantiated</span>(<span class=\"params\"></span>) &#123;      </span><br><span class=\"line\">        <span class=\"title class_\">System</span>.<span class=\"property\">out</span>.<span class=\"title function_\">println</span>(<span class=\"string\">&quot;[TestSmartInitializingSingleton]&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;      </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、CommandLineRunner\"><a href=\"#15、CommandLineRunner\" class=\"headerlink\" title=\"15、CommandLineRunner\"></a><strong>15、CommandLineRunner</strong></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>org.springframework.boot.CommandLineRunner</p></blockquote>\n<p>这个接口也只有一个方法：<code>run(String... args)</code>，触发时机为整个项目启动完毕后，自动执行。如果有多个<code>CommandLineRunner</code>，可以利用<code>@Order</code>来进行排序。</p>\n<p>使用场景：用户扩展此接口，进行启动项目之后一些业务的预处理。</p>\n<p>扩展方式为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestCommandLineRunner</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;      </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[TestCommandLineRunner]&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;      </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16、DisposableBean\"><a href=\"#16、DisposableBean\" class=\"headerlink\" title=\"16、DisposableBean\"></a><strong>16、DisposableBean</strong></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>org.springframework.beans.factory.DisposableBean</p></blockquote>\n<p>这个扩展点也只有一个方法：<code>destroy()</code>，其触发时机为当此对象销毁时，会自动执行这个方法。比如说运行<code>applicationContext.registerShutdownHook</code>时，就会触发这个方法。</p>\n<p>扩展方式为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NormalBeanA</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DisposableBean</span> &#123;      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;      </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[DisposableBean] NormalBeanA&quot;</span>);      </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;      </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17、ApplicationListener\"><a href=\"#17、ApplicationListener\" class=\"headerlink\" title=\"17、ApplicationListener\"></a><strong>17、ApplicationListener</strong></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>org.springframework.context.ApplicationListener</p></blockquote>\n<p>准确的说，这个应该不算<code>spring&amp;springboot</code>当中的一个扩展点，<code>ApplicationListener</code>可以监听某个事件的<code>event</code>，触发时机可以穿插在业务方法执行过程中，用户可以自定义某个业务事件。</p>\n<p>但是spring内部也有一些内置事件，这种事件，可以穿插在启动调用中。我们也可以利用这个特性，来自己做一些内置事件的监听器来达到和前面一些触发点大致相同的事情。</p>\n<p>接下来罗列下spring主要的内置事件：</p>\n<ul>\n<li><p><strong>ContextRefreshedEvent</strong></p>\n<p>ApplicationContext 被初始化或刷新时，该事件被发布。这也可以在<code>ConfigurableApplicationContext</code>接口中使用 <code>refresh()</code>方法来发生。此处的初始化是指：所有的Bean被成功装载，后处理Bean被检测并激活，所有Singleton Bean 被预实例化，<code>ApplicationContext</code>容器已就绪可用。</p>\n</li>\n<li><p><strong>ContextStartedEvent</strong></p>\n<p>当使用 <code>ConfigurableApplicationContext</code> （ApplicationContext子接口）接口中的 <code>start()</code> 方法启动 <code>ApplicationContext</code>时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。</p>\n</li>\n<li><p><strong>ContextStoppedEvent</strong></p>\n<p>当使用 <code>ConfigurableApplicationContext</code>接口中的 <code>stop()</code>停止<code>ApplicationContext</code> 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作</p>\n</li>\n<li><p><strong>ContextClosedEvent</strong></p>\n<p>当使用 <code>ConfigurableApplicationContext</code>接口中的 <code>close()</code>方法关闭 <code>ApplicationContext</code> 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启</p>\n</li>\n<li><p><strong>RequestHandledEvent</strong></p>\n<p>这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。只能应用于使用DispatcherServlet的Web应用。在使用Spring作为前端的MVC控制器时，当Spring处理用户请求结束后，系统会自动触发该事件</p>\n</li>\n</ul>\n<h3 id=\"18、最后\"><a href=\"#18、最后\" class=\"headerlink\" title=\"18、最后\"></a><strong>18、最后</strong></h3><p>我们从这些<code>spring&amp;springboot</code>的扩展点当中，大致可以窥视到整个bean的生命周期。在业务开发或者写中间件业务的时候，可以合理利用spring提供给我们的扩展点，在spring启动的各个阶段内做一些事情。以达到自定义初始化的目的。</p>\n","text":"SpringBoot 扩展接口1、背景Spring的核心思想就是容器，当容器refresh的时候，外部看上去风平浪静，其实内部则是一片惊涛骇浪，汪洋一片。Spr...","permalink":"/post/JAVA/SpringBoot 扩展接口","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"bean","slug":"bean","count":2,"path":"api/categories/bean.json"},{"name":"JAVA","slug":"bean/JAVA","count":2,"path":"api/categories/bean/JAVA.json"}],"tags":[{"name":"spring","slug":"spring","count":4,"path":"api/tags/spring.json"},{"name":"org","slug":"org","count":2,"path":"api/tags/org.json"},{"name":"springframework","slug":"springframework","count":1,"path":"api/tags/springframework.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SpringBoot-%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">SpringBoot 扩展接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">1、背景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%90%AF%E5%8A%A8%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F%E5%9B%BE\"><span class=\"toc-text\">2、可扩展的接口启动调用顺序图</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81ApplicationContextInitializer\"><span class=\"toc-text\">3、ApplicationContextInitializer</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81BeanDefinitionRegistryPostProcessor\"><span class=\"toc-text\">4、BeanDefinitionRegistryPostProcessor</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81BeanFactoryPostProcessor\"><span class=\"toc-text\">5、BeanFactoryPostProcessor</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81InstantiationAwareBeanPostProcessor\"><span class=\"toc-text\">6、InstantiationAwareBeanPostProcessor</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%E3%80%81SmartInstantiationAwareBeanPostProcessor\"><span class=\"toc-text\">7、SmartInstantiationAwareBeanPostProcessor</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8%E3%80%81BeanFactoryAware\"><span class=\"toc-text\">8、BeanFactoryAware</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9%E3%80%81ApplicationContextAwareProcessor\"><span class=\"toc-text\">9、ApplicationContextAwareProcessor</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10%E3%80%81BeanNameAware\"><span class=\"toc-text\">10、BeanNameAware</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11%E3%80%81-PostConstruct\"><span class=\"toc-text\">11、@PostConstruct</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12%E3%80%81InitializingBean\"><span class=\"toc-text\">12、InitializingBean</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13%E3%80%81FactoryBean\"><span class=\"toc-text\">13、FactoryBean</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14%E3%80%81SmartInitializingSingleton\"><span class=\"toc-text\">14、SmartInitializingSingleton</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15%E3%80%81CommandLineRunner\"><span class=\"toc-text\">15、CommandLineRunner</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16%E3%80%81DisposableBean\"><span class=\"toc-text\">16、DisposableBean</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17%E3%80%81ApplicationListener\"><span class=\"toc-text\">17、ApplicationListener</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18%E3%80%81%E6%9C%80%E5%90%8E\"><span class=\"toc-text\">18、最后</span></a></li></ol></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"从 apache-common-pool 看如何写一个通用池","uid":"a3ec52c6805d10835480c023a68f988e","slug":"JAVA/从 apache-common-pool 看如何写一个通用池","date":"2023-11-16T11:44:17.000Z","updated":"2025-09-30T03:26:24.369Z","comments":true,"path":"api/articles/JAVA/从 apache-common-pool 看如何写一个通用池.json","keywords":"XuGuangSheng","cover":"/covers/apache-common-pool.jpg","text":"从 apache-common-pool 看如何写一个通用池对象的创建和销毁在一定程度上会消耗系统的资源，虽然 jvm 的性能在近几年已经得到了很大的提高，对于...","permalink":"/post/JAVA/从 apache-common-pool 看如何写一个通用池","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"25 mins."},"categories":[{"name":"PooledObjectFactory","slug":"PooledObjectFactory","count":1,"path":"api/categories/PooledObjectFactory.json"},{"name":"JAVA","slug":"PooledObjectFactory/JAVA","count":1,"path":"api/categories/PooledObjectFactory/JAVA.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"www","slug":"www","count":8,"path":"api/tags/www.json"},{"name":"victorchu","slug":"victorchu","count":1,"path":"api/tags/victorchu.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"C2 CompilerThread9 长时间占用CPU解决方案","uid":"ad2282a09eaef1269a01ab0f55818331","slug":"JAVA/C2 CompilerThread9 长时间占用CPU解决方案","date":"2023-11-02T18:06:45.000Z","updated":"2025-09-30T03:26:07.848Z","comments":true,"path":"api/articles/JAVA/C2 CompilerThread9 长时间占用CPU解决方案.json","keywords":"XuGuangSheng","cover":"/covers/c2-compilerthread9-cpu.jpg","text":"一、描述：异常线程的堆栈如下：1234567`\"C2 CompilerThread9\" #48 daemon prio=9 os_prio=0 tid=0x00...","permalink":"/post/JAVA/C2 CompilerThread9 长时间占用CPU解决方案","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"JIT","slug":"JIT","count":2,"path":"api/categories/JIT.json"},{"name":"JAVA","slug":"JIT/JAVA","count":2,"path":"api/categories/JIT/JAVA.json"}],"tags":[{"name":"编译","slug":"编译","count":1,"path":"api/tags/编译.json"},{"name":"编译器","slug":"编译器","count":1,"path":"api/tags/编译器.json"},{"name":"JVM","slug":"JVM","count":6,"path":"api/tags/JVM.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}