{"title":"Mybatis自定义TypeHandler实现数据库Json数组转List T 对象","uid":"2e30e1dd404d8ce00027cb5e2a0055b3","slug":"JAVA/Mybatis自定义TypeHandler实现数据库Json数组转List T 对象","date":"2022-10-20T18:28:11.000Z","updated":"2025-09-30T03:26:13.443Z","comments":true,"path":"api/articles/JAVA/Mybatis自定义TypeHandler实现数据库Json数组转List T 对象.json","keywords":"XuGuangSheng","cover":"/covers/mybatistypehandlerjsonlist-t.jpg","content":"<h1 id=\"Mybatis自定义TypeHandler实现数据库Json数组转List对象\"><a href=\"#Mybatis自定义TypeHandler实现数据库Json数组转List对象\" class=\"headerlink\" title=\"Mybatis自定义TypeHandler实现数据库Json数组转List对象\"></a>Mybatis自定义TypeHandler实现数据库Json数组转List<T>对象</h1><h3 id=\"实现功能\"><a href=\"#实现功能\" class=\"headerlink\" title=\"实现功能\"></a>实现功能</h3><p>在开发过程中经常会遇到将整个JSON数据当作一个字段存到数据库中的情况，但是我们在对应实体表中又不想用一个String去接收，如下图，数据库t_user表中有一个address字段，存的是一个JSON数组，TUserEntity实体中使用List</p>\n<p>对象去接收，这时就需要自定义TypeHanlder帮我们定义入库和出库时的JSON序列化和反序列化。</p>\n<p><img src=\"https://github.com/dandeliono/note/blob/main/source/_posts/resources/img/2022-10-20%2018-27-57/feabf117-01ef-4f83-a648-94f8e3212ba2.png?raw=true\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@TableName(&quot;t_user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TUserEntity</span>  <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"meta\">@TableField(typeHandler = AddressListTypeHandler.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Address&gt; address;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@Data<br>public class Address implements Serializable {<br>    private static final long serialVersionUID &#x3D; 1L;<br>    private Long id;<br>    private String name;<br>}</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义抽象List处理TypeHandler，List中可能还存入其它类型数据\"><a href=\"#定义抽象List处理TypeHandler，List中可能还存入其它类型数据\" class=\"headerlink\" title=\"定义抽象List处理TypeHandler，List中可能还存入其它类型数据\"></a>定义抽象List处理TypeHandler，List中可能还存入其它类型数据</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.CallableStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.PreparedStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListTypeHandler</span>&lt;T&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseTypeHandler</span>&lt;List&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNonNullParameter</span><span class=\"params\">(PreparedStatement ps, <span class=\"type\">int</span> i, List&lt;T&gt; parameter, JdbcType jdbcType)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        ps.setString(i, JsonUtils.toJson(parameter));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title function_\">getNullableResult</span><span class=\"params\">(ResultSet rs, String columnName)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rs.wasNull() ? <span class=\"literal\">null</span> : JsonUtils.readList(rs.getString(columnName), specificType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title function_\">getNullableResult</span><span class=\"params\">(ResultSet rs, <span class=\"type\">int</span> columnIndex)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rs.wasNull() ? <span class=\"literal\">null</span> : JsonUtils.readList(rs.getString(columnIndex), specificType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title function_\">getNullableResult</span><span class=\"params\">(CallableStatement cs, <span class=\"type\">int</span> columnIndex)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cs.wasNull() ? <span class=\"literal\">null</span> : JsonUtils.readList(cs.getString(columnIndex), specificType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> TypeReference&lt;List&lt;T&gt;&gt; <span class=\"title function_\">specificType</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义AddressListTypeHandler类-如果有其它类继承ListTypeHandler就可以了\"><a href=\"#定义AddressListTypeHandler类-如果有其它类继承ListTypeHandler就可以了\" class=\"headerlink\" title=\"定义AddressListTypeHandler类 ,如果有其它类继承ListTypeHandler就可以了\"></a>定义AddressListTypeHandler类 ,如果有其它类继承ListTypeHandler就可以了</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MappedTypes</span>(&#123;<span class=\"type\">List</span>.<span class=\"keyword\">class</span>&#125;)</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AddressListTypeHandler</span> <span class=\"keyword\">extends</span>  <span class=\"title\">ListTypeHandler&lt;Address&gt;</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">TypeReference</span>&lt;<span class=\"type\">List</span>&lt;<span class=\"type\">Address</span>&gt;&gt; specificType() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">TypeReference</span>&lt;<span class=\"type\">List</span>&lt;<span class=\"type\">Address</span>&gt;&gt;() &#123;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jaskson中JsonUtils-readList-方法，也可使用fastjson-JSON-parseObject-content-this-specificType\"><a href=\"#jaskson中JsonUtils-readList-方法，也可使用fastjson-JSON-parseObject-content-this-specificType\" class=\"headerlink\" title=\"jaskson中JsonUtils.readList()方法，也可使用fastjson JSON.parseObject(content, this.specificType())\"></a>jaskson中JsonUtils.readList()方法，也可使用fastjson JSON.parseObject(content, this.specificType())</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"title class_\">List</span>&lt;T&gt; <span class=\"title function_\">readList</span>(<span class=\"params\"><span class=\"built_in\">String</span> json, TypeReference&lt;List&lt;T&gt;&gt; tTypeReference</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (json == <span class=\"literal\">null</span> || <span class=\"string\">&quot;&quot;</span>.<span class=\"title function_\">equals</span>(json)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mapper.<span class=\"title function_\">readValue</span>(json,tTypeReference);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (<span class=\"title class_\">IOException</span> e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://github.com/dandeliono/note/blob/main/source/_posts/resources/img/2022-10-20%2018-27-57/4f3738ef-c07b-46f7-a4e8-283cfbb5da98.png?raw=true\"></p>\n","text":"Mybatis自定义TypeHandler实现数据库Json数组转List对象实现功能在开发过程中经常会遇到将整个JSON数据当作一个字段存到数据库中的情况，但...","permalink":"/post/JAVA/Mybatis自定义TypeHandler实现数据库Json数组转List T 对象","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"List","slug":"List","count":1,"path":"api/categories/List.json"},{"name":"JAVA","slug":"List/JAVA","count":1,"path":"api/categories/List/JAVA.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"JSON","slug":"JSON","count":1,"path":"api/tags/JSON.json"},{"name":"TypeHandler","slug":"TypeHandler","count":1,"path":"api/tags/TypeHandler.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Mybatis%E8%87%AA%E5%AE%9A%E4%B9%89TypeHandler%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93Json%E6%95%B0%E7%BB%84%E8%BD%ACList%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">Mybatis自定义TypeHandler实现数据库Json数组转List对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">实现功能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1List%E5%A4%84%E7%90%86TypeHandler%EF%BC%8CList%E4%B8%AD%E5%8F%AF%E8%83%BD%E8%BF%98%E5%AD%98%E5%85%A5%E5%85%B6%E5%AE%83%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">定义抽象List处理TypeHandler，List中可能还存入其它类型数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89AddressListTypeHandler%E7%B1%BB-%E5%A6%82%E6%9E%9C%E6%9C%89%E5%85%B6%E5%AE%83%E7%B1%BB%E7%BB%A7%E6%89%BFListTypeHandler%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86\"><span class=\"toc-text\">定义AddressListTypeHandler类 ,如果有其它类继承ListTypeHandler就可以了</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#jaskson%E4%B8%ADJsonUtils-readList-%E6%96%B9%E6%B3%95%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BD%BF%E7%94%A8fastjson-JSON-parseObject-content-this-specificType\"><span class=\"toc-text\">jaskson中JsonUtils.readList()方法，也可使用fastjson JSON.parseObject(content, this.specificType())</span></a></li></ol></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"MySQL修改表和字段的字符集和排序规则","uid":"774f79caf493f8fbe7cfcf9850f2624f","slug":"MIDDLEWARE/MySQL修改表和字段的字符集和排序规则","date":"2022-11-11T11:27:58.000Z","updated":"2025-09-30T03:26:48.936Z","comments":true,"path":"api/articles/MIDDLEWARE/MySQL修改表和字段的字符集和排序规则.json","keywords":"XuGuangSheng","cover":"/covers/mysql.jpg","text":"MySQL修改表和字段的字符集和排序规则 关于MySQL查询时不区分字母大小写、插入时不支持特殊字符的问题，只有修改表的字符集和排序规则才能根治，而且事半功倍。...","permalink":"/post/MIDDLEWARE/MySQL修改表和字段的字符集和排序规则","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"utf","slug":"utf","count":1,"path":"api/categories/utf.json"},{"name":"MIDDLEWARE","slug":"utf/MIDDLEWARE","count":1,"path":"api/categories/utf/MIDDLEWARE.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":2,"path":"api/tags/MySQL.json"},{"name":"查看","slug":"查看","count":1,"path":"api/tags/查看.json"},{"name":"schema","slug":"schema","count":1,"path":"api/tags/schema.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"BAT 批处理 基础语法 教程","uid":"1545a0366a689b58c66fbe8604cabd3f","slug":"LINUX/BAT 批处理 基础语法 教程","date":"2022-10-13T13:55:12.000Z","updated":"2025-09-30T03:26:31.008Z","comments":true,"path":"api/articles/LINUX/BAT 批处理 基础语法 教程.json","keywords":"XuGuangSheng","cover":"/covers/bat.jpg","text":"BAT 批处理 基础语法 教程特点 批处理脚本存储在文本文件中，其中包含的命令按顺序依次执行，其功能是为了自动执行重复的命令序列 批处理文件具有特殊的扩展名BA...","permalink":"/post/LINUX/BAT 批处理 基础语法 教程","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[{"name":"bash","slug":"bash","count":2,"path":"api/categories/bash.json"},{"name":"LINUX","slug":"bash/LINUX","count":2,"path":"api/categories/bash/LINUX.json"}],"tags":[{"name":"goto","slug":"goto","count":1,"path":"api/tags/goto.json"},{"name":"语句","slug":"语句","count":1,"path":"api/tags/语句.json"},{"name":"SETLOCAL","slug":"SETLOCAL","count":1,"path":"api/tags/SETLOCAL.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}