{"title":"Java内存访问重排序的研究","uid":"db9816c4607e7d8e795e08923e1430dc","slug":"JAVA/Java内存访问重排序的研究","date":"2021-08-15T23:36:56.000Z","updated":"2025-09-30T03:26:12.671Z","comments":true,"path":"api/articles/JAVA/Java内存访问重排序的研究.json","keywords":"XuGuangSheng","cover":"/covers/java.jpg","content":"<h1 id=\"Java内存访问重排序的研究\"><a href=\"#Java内存访问重排序的研究\" class=\"headerlink\" title=\"Java内存访问重排序的研究\"></a>Java内存访问重排序的研究</h1><h2 id=\"什么是重排序\"><a href=\"#什么是重排序\" class=\"headerlink\" title=\"什么是重排序\"></a>什么是重排序</h2><p>请先看这样一段代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PossibleReordering &#123;</span><br><span class=\"line\">static int x = 0, y = 0;</span><br><span class=\"line\">static int a = 0, b = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">    Thread one = new Thread(new Runnable() &#123;</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            a = 1;</span><br><span class=\"line\">            x = b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Thread other = new Thread(new Runnable() &#123;</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            b = 1;</span><br><span class=\"line\">            y = a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    one.start();other.start();</span><br><span class=\"line\">    one.join();other.join();</span><br><span class=\"line\">    System.out.println(“(” + x + “,” + y + “)”);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很容易想到这段代码的运行结果可能为 (1,0)、(0,1) 或(1,1)，因为线程 one 可以在线程 two 开始之前就执行完了，也有可能反之，甚至有可能二者的指令是同时或交替执行的。</p>\n<p>然而，这段代码的执行结果也可能是 (0,0). 因为，在实际运行时，代码指令可能并不是严格按照代码语句顺序执行的。得到(0,0) 结果的语句执行过程，如下图所示。值得注意的是，a&#x3D;1 和 x&#x3D;b 这两个语句的赋值操作的顺序被颠倒了，或者说，发生了指令“重排序”(reordering)。（事实上，输出了这一结果，并不代表一定发生了指令重排序，内存可见性问题也会导致这样的输出，详见后文）</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/3173315025ef0c1f9e46db0b72313fd9.png\"></p>\n<p>重排序图解</p>\n<p>对重排序现象不太了解的开发者可能会对这种现象感到吃惊，但是，笔者开发环境下做的一个小实验证实了这一结果 2。</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/34adfcab22756c73b080917ee4d77f09.png\"></p>\n<p>重排序实验</p>\n<p>实验代码是构造一个循环，反复执行上面的实例代码，直到出现 a&#x3D;0 且 b&#x3D;0 的输出为止。实验结果说明，循环执行到第 13830 次时输出了 (0,0).</p>\n<p>大多数现代微处理器都会采用将指令乱序执行（out-of-order execution，简称 OoOE 或 OOE）的方法，在条件允许的情况下，直接运行当前有能力立即执行的后续指令，避开获取下一条指令所需数据时造成的等待 3。通过乱序执行的技术，处理器可以大大提高执行效率。</p>\n<p>除了处理器，常见的 Java 运行时环境的 JIT 编译器也会做指令重排序操作 4，即生成的机器指令与字节码指令顺序不一致。</p>\n<h2 id=\"as-if-serial-语义\"><a href=\"#as-if-serial-语义\" class=\"headerlink\" title=\"as-if-serial 语义\"></a>as-if-serial 语义</h2><p>As-if-serial 语义的意思是，所有的动作 (Action)5 都可以为了优化而被重排序，但是必须保证它们重排序后的结果和程序代码本身的应有结果是一致的。Java 编译器、运行时和处理器都会保证单线程下的 as-if-serial 语义。 比如，为了保证这一语义，重排序不会发生在有数据依赖的操作之中。</p>\n<ul>\n<li>int a &#x3D; 1;</li>\n<li>int b &#x3D; 2;</li>\n<li>int c &#x3D; a + b;</li>\n</ul>\n<p>将上面的代码编译成 Java 字节码或生成机器指令，可视为展开成了以下几步动作（实际可能会省略或添加某些步骤）。</p>\n<ol>\n<li>对 a 赋值 1</li>\n<li>对 b 赋值 2</li>\n<li>取 a 的值</li>\n<li>取 b 的值</li>\n<li>将取到两个值相加后存入 c</li>\n</ol>\n<p>在上面 5 个动作中，动作 1 可能会和动作 2、4 重排序，动作 2 可能会和动作 1、3 重排序，动作 3 可能会和动作 2、4 重排序，动作 4 可能会和 1、3 重排序。但动作 1 和动作 3、5 不能重排序。动作 2 和动作 4、5 不能重排序。因为它们之间存在数据依赖关系，一旦重排，as-if-serial 语义便无法保证。</p>\n<p>为保证 as-if-serial 语义，Java 异常处理机制也会为重排序做一些特殊处理。例如在下面的代码中，y &#x3D; 0 &#x2F; 0 可能会被重排序在 x &#x3D; 2 之前执行，为了保证最终不致于输出 x &#x3D; 1 的错误结果，JIT 在重排序时会在 catch 语句中插入错误代偿代码，将 x 赋值为 2，将程序恢复到发生异常时应有的状态。这种做法的确将异常捕捉的逻辑变得复杂了，但是 JIT 的优化的原则是，尽力优化正常运行下的代码逻辑，哪怕以 catch 块逻辑变得复杂为代价，毕竟，进入 catch 块内是一种 “异常” 情况的表现。6</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Reordering &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int x, y;</span><br><span class=\"line\">        x = 1;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            x = 2;</span><br><span class=\"line\">            y = 0 / 0;    </span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            System.out.println(&quot;x = &quot; + x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内存访问重排序与内存可见性\"><a href=\"#内存访问重排序与内存可见性\" class=\"headerlink\" title=\"内存访问重排序与内存可见性\"></a>内存访问重排序与内存可见性</h2><p>计算机系统中，为了尽可能地避免处理器访问主内存的时间开销，处理器大多会利用缓存 (cache) 以提高性能。其模型如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/b0956af09069777b93e4ab097f727236.png\"></p>\n<p>处理器 Cache 模型</p>\n<p>在这种模型下会存在一个现象，即缓存中的数据与主内存的数据并不是实时同步的，各 CPU（或 CPU 核心）间缓存的数据也不是实时同步的。这导致在同一个时间点，各 CPU 所看到同一内存地址的数据的值可能是不一致的。从程序的视角来看，就是在同一个时间点，各个线程所看到的共享变量的值可能是不一致的。</p>\n<p>有的观点会将这种现象也视为重排序的一种，命名为 “内存系统重排序”。因为这种内存可见性问题造成的结果就好像是内存访问指令发生了重排序一样。</p>\n<p>这种内存可见性问题也会导致章节一中示例代码即便在没有发生指令重排序的情况下的执行结果也还是 (0, 0)。</p>\n<h2 id=\"内存访问重排序与-Java-内存模型\"><a href=\"#内存访问重排序与-Java-内存模型\" class=\"headerlink\" title=\"内存访问重排序与 Java 内存模型\"></a>内存访问重排序与 Java 内存模型</h2><p>Java 的目标是成为一门平台无关性的语言，即 Write once, run anywhere. 但是不同硬件环境下指令重排序的规则不尽相同。例如，x86 下运行正常的 Java 程序在 IA64 下就可能得到非预期的运行结果。为此，JSR-1337 制定了 Java 内存模型 (Java Memory Model, JMM)，旨在提供一个统一的可参考的规范，屏蔽平台差异性。从 Java 5 开始，Java 内存模型成为 Java 语言规范的一部分。</p>\n<p>根据 Java 内存模型中的规定，可以总结出以下几条 happens-before 规则 8。Happens-before 的前后两个操作不会被重排序且后者对前者的内存可见。</p>\n<ul>\n<li>程序次序法则：线程中的每个动作 A 都 happens-before 于该线程中的每一个动作 B，其中，在程序中，所有的动作 B 都能出现在 A 之后。</li>\n<li>监视器锁法则：对一个监视器锁的解锁 happens-before 于每一个后续对同一监视器锁的加锁。</li>\n<li>volatile 变量法则：对 volatile 域的写入操作 happens-before 于每一个后续对同一个域的读写操作。</li>\n<li>线程启动法则：在一个线程里，对 Thread.start 的调用会 happens-before 于每个启动线程的动作。</li>\n<li>线程终结法则：线程中的任何动作都 happens-before 于其他线程检测到这个线程已经终结、或者从 Thread.join 调用中成功返回，或 Thread.isAlive 返回 false。</li>\n<li>中断法则：一个线程调用另一个线程的 interrupt happens-before 于被中断的线程发现中断。</li>\n<li>终结法则：一个对象的构造函数的结束 happens-before 于这个对象 finalizer 的开始。</li>\n<li>传递性：如果 A happens-before 于 B，且 B happens-before 于 C，则 A happens-before 于 C</li>\n</ul>\n<p>Happens-before 关系只是对 Java 内存模型的一种近似性的描述，它并不够严谨，但便于日常程序开发参考使用，关于更严谨的 Java 内存模型的定义和描述，请阅读 JSR-133 原文或 Java 语言规范章节 17.4。</p>\n<p>除此之外，Java 内存模型对 volatile 和 final 的语义做了扩展。对 volatile 语义的扩展保证了 volatile 变量在一些情况下不会重排序，volatile 的 64 位变量 double 和 long 的读取和赋值操作都是原子的。对 final 语义的扩展保证一个对象的构建方法结束前，所有 final 成员变量都必须完成初始化（的前提是没有 this 引用溢出）。</p>\n<p>Java 内存模型关于重排序的规定，总结后如下表所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/30a4a34624c211a3dd5cbbb968432be9.png\"></p>\n<p>重排序示意表</p>\n<p>表中 “第二项操作” 的含义是指，第一项操作之后的所有指定操作。如，普通读不能与其之后的所有 volatile 写重排序。另外，JMM 也规定了上述 volatile 和同步块的规则尽适用于存在多线程访问的情景。例如，若编译器（这里的编译器也包括 JIT，下同）证明了一个 volatile 变量只能被单线程访问，那么就可能会把它做为普通变量来处理。</p>\n<p>留白的单元格代表允许在不违反 Java 基本语义的情况下重排序。例如，编译器不会对对同一内存地址的读和写操作重排序，但是允许对不同地址的读和写操作重排序。</p>\n<p>除此之外，为了保证 final 的新增语义。JSR-133 对于 final 变量的重排序也做了限制。</p>\n<ul>\n<li>构建方法内部的 final 成员变量的存储，并且，假如 final 成员变量本身是一个引用的话，这个 final 成员变量可以引用到的一切存储操作，都不能与构建方法外的将当期构建对象赋值于多线程共享变量的存储操作重排序。例如对于如下语句：</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>x.finalField &#x3D; v; … ; 构建方法边界 sharedRef &#x3D; x; v.afield &#x3D; 1; x.finalField &#x3D; v; … ; 构建方法边界 sharedRef &#x3D; x;</p></blockquote>\n<p>这两条语句中，构建方法边界前后的指令都不能重排序。</p>\n<ul>\n<li>初始读取共享对象与初始读取该共享对象的 final 成员变量之间不能重排序。例如对于如下语句：</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>x &#x3D; sharedRef; … ; i &#x3D; x.finalField;</p></blockquote>\n<p>前后两句语句之间不会发生重排序。由于这两句语句有数据依赖关系，编译器本身就不会对它们重排序，但确实有一些处理器会对这种情况重排序，因此特别制定了这一规则。</p>\n<h2 id=\"内存屏障\"><a href=\"#内存屏障\" class=\"headerlink\" title=\"内存屏障\"></a>内存屏障</h2><p>内存屏障（Memory Barrier，或有时叫做内存栅栏，Memory Fence）是一种 CPU 指令，用于控制特定条件下的重排序和内存可见性问题。Java 编译器也会根据内存屏障的规则禁止重排序。</p>\n<p>内存屏障可以被分为以下几种类型：</p>\n<ul>\n<li>LoadLoad 屏障：对于这样的语句 Load1; LoadLoad; Load2，在 Load2 及后续读取操作要读取的数据被访问前，保证 Load1 要读取的数据被读取完毕。</li>\n<li>StoreStore 屏障：对于这样的语句 Store1; StoreStore; Store2，在 Store2 及后续写入操作执行前，保证 Store1 的写入操作对其它处理器可见。</li>\n<li>LoadStore 屏障：对于这样的语句 Load1; LoadStore; Store2，在 Store2 及后续写入操作被刷出前，保证 Load1 要读取的数据被读取完毕。</li>\n<li>StoreLoad 屏障：对于这样的语句 Store1; StoreLoad; Load2，在 Load2 及后续所有读取操作执行前，保证 Store1 的写入对所有处理器可见。它的开销是四种屏障中最大的。在大多数处理器的实现中，这个屏障是个万能屏障，兼具其它三种内存屏障的功能。</li>\n</ul>\n<p>有的处理器的重排序规则较严，无需内存屏障也能很好的工作，Java 编译器会在这种情况下不放置内存屏障。 为了实现上一章中讨论的 JSR-133 的规定，Java 编译器会这样使用内存屏障。</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/33c1d8babfa21b7025b724cf74bc1db9.png\"></p>\n<p>内存屏障示意表</p>\n<p>为了保证 final 字段的特殊语义，也会在下面的语句加入内存屏障。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>x.finalField &#x3D; v; StoreStore; sharedRef &#x3D; x;</p></blockquote>\n<h2 id=\"Intel-64-x2F-IA-32-架构下的内存访问重排序\"><a href=\"#Intel-64-x2F-IA-32-架构下的内存访问重排序\" class=\"headerlink\" title=\"Intel 64&#x2F;IA-32 架构下的内存访问重排序\"></a>Intel 64&#x2F;IA-32 架构下的内存访问重排序</h2><p>Intel 64 和 IA-32 是我们较常用的硬件环境，相对于其它处理器而言，它们拥有一种较严格的重排序规则。Pentium 4 以后的 Intel 64 或 IA-32 处理的重排序规则如下。9</p>\n<p>在单 CPU 系统中：</p>\n<ul>\n<li>读操作不与其它读操作重排序。</li>\n<li>写操作不与其之前的写操作重排序。</li>\n<li>写内存操作不与其它写操作重排序，但有以下几种例外</li>\n<li>CLFLUSH 的写操作</li>\n<li>带有 non-temporal move 指令 (MOVNTI, MOVNTQ, MOVNTDQ, MOVNTPS, and MOVNTPD) 的 streaming 写入。</li>\n<li>字符串操作</li>\n<li>读操作可能会与其之前的写不同位置的写操作重排序，但不与其之前的写相同位置的写操作重排序。</li>\n<li>读和写操作不与 I&#x2F;O 指令，带锁的指令或序列化指令重排序。</li>\n<li>读操作不能重排序到 LFENCE 和 MFENCE 之前。</li>\n<li>写操作不能重排序到 LFENCE、SFENCE 和 MFENCE 之前。</li>\n<li>LFENCE 不能重排序到读操作之前。</li>\n<li>SFENCE 不能重排序到写之前。</li>\n<li>MFENCE 不能重排序到读或写操作之前。</li>\n</ul>\n<p>在多处理器系统中：</p>\n<ul>\n<li>各自处理器内部遵循单处理器的重排序规则。</li>\n<li>单处理器的写操作对所有处理器可见是同时的。</li>\n<li>各自处理器的写操作不会重排序。</li>\n<li>内存重排序遵守因果性 (causality)（内存重排序遵守传递可见性）。</li>\n<li>任何写操作对于执行这些写操作的处理器之外的处理器来看都是一致的。</li>\n<li>带锁指令是顺序执行的。</li>\n</ul>\n<p>值得注意的是，对于 Java 编译器而言，Intel 64&#x2F;IA-32 架构下处理器不需要 LoadLoad、LoadStore、StoreStore 屏障，因为不会发生需要这三种屏障的重排序。</p>\n<h2 id=\"一例-Intel-64-x2F-IA-32-架构下的代码性能优化\"><a href=\"#一例-Intel-64-x2F-IA-32-架构下的代码性能优化\" class=\"headerlink\" title=\"一例 Intel 64&#x2F;IA-32 架构下的代码性能优化\"></a>一例 Intel 64&#x2F;IA-32 架构下的代码性能优化</h2><p>现在有这样一个场景，一个容器可以放一个东西，容器支持 create 方法来创建一个新的东西并放到容器里，支持 get 方法取到这个容器里的东西。我们可以较容易地写出下面的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Container &#123;</span><br><span class=\"line\">    public static class SomeThing &#123;</span><br><span class=\"line\">        private int status;</span><br><span class=\"line\"></span><br><span class=\"line\">        public SomeThing() &#123;</span><br><span class=\"line\">            status = 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public int getStatus() &#123;</span><br><span class=\"line\">            return status;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private SomeThing object;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void create() &#123;</span><br><span class=\"line\">        object = new SomeThing();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SomeThing get() &#123;</span><br><span class=\"line\">        while (object == null) &#123;</span><br><span class=\"line\">            Thread.yield(); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在单线程场景下，这段代码执行起来是没有问题的。但是在多线程并发场景下，由不同的线程 create 和 get 东西，这段代码是有问题的。问题的原因与普通的双重检查锁定单例模式 (Double Checked Locking,DCL)10 类似，即 SomeThing 的构建与将指向构建中的 SomeThing 引用赋值到 object 变量这两者可能会发生重排序。导致 get 中返回一个正被构建中的不完整的 SomeThing 对象实例。为了解决这一问题，通常的办法是使用 volatile 修饰 object 字段。这种方法避免了重排序，保证了内存可见性，摒弃比使用同步块导致的性能损失更小。但是，假如使用场景对 object 的内存可见性并不敏感的话（不要求一个线程写入了 object，object 的新值立即对下一个读取的线程可见），在 Intel 64&#x2F;IA-32 环境下，有更好的解决方案。</p>\n<p>根据上一章的内容，我们知道 Intel 64&#x2F;IA-32 下写操作之间不会发生重排序，即在处理器中，构建 SomeThing 对象与赋值到 object 这两个操作之间的顺序性是可以保证的。这样看起来，仅仅使用 volatile 来避免重排序是多此一举的。但是，Java 编译器却可能生成重排序后的指令。但令人高兴的是，Oracle 的 JDK 中提供了 Unsafe. putOrderedObject，Unsafe. putOrderedInt，Unsafe. putOrderedLong 这三个方法，JDK 会在执行这三个方法时插入 StoreStore 内存屏障，避免发生写操作重排序。而在 Intel 64&#x2F;IA-32 架构下，StoreStore 屏障并不需要，Java 编译器会将 StoreStore 屏障去除。比起写入 volatile 变量之后执行 StoreLoad 屏障的巨大开销，采用这种方法除了避免重排序而带来的性能损失以外，不会带来其它的性能开销。</p>\n<p>我们将做一个小实验来比较二者的性能差异。一种是使用 volatile 修饰 object 成员变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Container &#123;</span><br><span class=\"line\">    public static class SomeThing &#123;</span><br><span class=\"line\">        private int status;</span><br><span class=\"line\"></span><br><span class=\"line\">        public SomeThing() &#123;</span><br><span class=\"line\">            status = 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public int getStatus() &#123;</span><br><span class=\"line\">            return status;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private volatile  SomeThing object;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void create() &#123;</span><br><span class=\"line\">        object = new SomeThing();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SomeThing get() &#123;</span><br><span class=\"line\">        while (object == null) &#123;</span><br><span class=\"line\">            Thread.yield(); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>一种是利用 Unsafe. putOrderedObject 在避免在适当的位置发生重排序。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Container &#123;</span><br><span class=\"line\">    public static class SomeThing &#123;</span><br><span class=\"line\">        private int status;</span><br><span class=\"line\"></span><br><span class=\"line\">        public SomeThing() &#123;</span><br><span class=\"line\">            status = 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public int getStatus() &#123;</span><br><span class=\"line\">            return status;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private SomeThing object;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Object value;</span><br><span class=\"line\">    private static final Unsafe unsafe = getUnsafe();</span><br><span class=\"line\">    private static final long valueOffset;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            valueOffset = unsafe.objectFieldOffset(Container.class.getDeclaredField(&quot;value&quot;));</span><br><span class=\"line\">        &#125; catch (Exception ex) &#123; throw new Error(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void create() &#123;</span><br><span class=\"line\">        SomeThing temp = new SomeThing();</span><br><span class=\"line\">        unsafe.putOrderedObject(this, valueOffset, null);\t</span><br><span class=\"line\">        object = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SomeThing get() &#123;</span><br><span class=\"line\">        while (object == null) &#123;</span><br><span class=\"line\">            Thread.yield();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static Unsafe getUnsafe() &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Field f = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);</span><br><span class=\"line\">            f.setAccessible(true);</span><br><span class=\"line\">            return (Unsafe)f.get(null);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于直接调用 Unsafe.getUnsafe() 需要配置 JRE 获取较高权限，我们利用反射获取 Unsafe 中的 theUnsafe 来取得 Unsafe 的可用实例。<br>unsafe.putOrderedObject(this, valueOffset, null) 这句仅仅是为了借用这句话功能的防止写重排序，除此之外无其它作用。</p>\n<p>利用下面的代码分别测试两种方案的实际运行时间。在运行时开启 - server 和 -XX:CompileThreshold&#x3D;1 以模拟生产环境下长时间运行后的 JIT 优化效果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">    final int THREADS_COUNT = 20;</span><br><span class=\"line\">    final int LOOP_COUNT = 100000;</span><br><span class=\"line\"></span><br><span class=\"line\">    long sum = 0;</span><br><span class=\"line\">    long min = Integer.MAX_VALUE;</span><br><span class=\"line\">    long max = 0;</span><br><span class=\"line\">    for(int n = 0;n &lt;= 100;n++) &#123;</span><br><span class=\"line\">        final Container basket = new Container();</span><br><span class=\"line\">        List&lt;Thread&gt; putThreads = new ArrayList&lt;Thread&gt;();</span><br><span class=\"line\">        List&lt;Thread&gt; takeThreads = new ArrayList&lt;Thread&gt;();</span><br><span class=\"line\">        for (int i = 0; i &lt; THREADS_COUNT; i++) &#123;</span><br><span class=\"line\">            putThreads.add(new Thread() &#123;</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void run() &#123;</span><br><span class=\"line\">                    for (int j = 0; j &lt; LOOP_COUNT; j++) &#123;</span><br><span class=\"line\">                        basket.create();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            takeThreads.add(new Thread() &#123;</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void run() &#123;</span><br><span class=\"line\">                    for (int j = 0; j &lt; LOOP_COUNT; j++) &#123;</span><br><span class=\"line\">                        basket.get().getStatus();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long start = System.nanoTime();</span><br><span class=\"line\">        for (int i = 0; i &lt; THREADS_COUNT; i++) &#123;</span><br><span class=\"line\">            takeThreads.get(i).start();</span><br><span class=\"line\">            putThreads.get(i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 0; i &lt; THREADS_COUNT; i++) &#123;</span><br><span class=\"line\">            takeThreads.get(i).join();</span><br><span class=\"line\">            putThreads.get(i).join();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        long end = System.nanoTime();</span><br><span class=\"line\">        long period = end - start;</span><br><span class=\"line\">        if(n == 0) &#123;</span><br><span class=\"line\">            continue;\t</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sum += (period);</span><br><span class=\"line\">        System.out.println(period);</span><br><span class=\"line\">        if(period &lt; min) &#123;</span><br><span class=\"line\">            min = period;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(period &gt; max) &#123;</span><br><span class=\"line\">            max = period;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(&quot;Average : &quot; + sum / 100);</span><br><span class=\"line\">    System.out.println(&quot;Max : &quot; + max);</span><br><span class=\"line\">    System.out.println(&quot;Min : &quot; + min);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在笔者的计算机上运行测试，采用 volatile 方案的运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Average : 62535770</span><br><span class=\"line\">Max : 82515000</span><br><span class=\"line\">Min : 45161000</span><br></pre></td></tr></table></figure>\n\n<p>采用 unsafe.putOrderedObject 方案的运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Average : 50746230</span><br><span class=\"line\">Max : 68999000</span><br><span class=\"line\">Min : 38038000</span><br></pre></td></tr></table></figure>\n\n<p>从结果看出，unsafe.putOrderedObject 方案比 volatile 方案平均耗时减少 18.9%，最大耗时减少 16.4%，最小耗时减少 15.8%. 另外，即使在其它会发生写写重排序的处理器中，由于 StoreStore 屏障的性能损耗小于 StoreLoad 屏障，采用这一方法也是一种可行的方案。但值得再次注意的是，这一方案不是对 volatile 语义的等价替换，而是在特定场景下做的特殊优化，它仅避免了写写重排序，但不保证内存可见性。</p>\n<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><ol>\n<li>样例选自《Java 并发编程实践》章节 16.1</li>\n<li>实验代码见附 1</li>\n<li><a href=\"http://en.wikipedia.org/wiki/Out-of-order_execution\">http://en.wikipedia.org/wiki/Out-of-order_execution</a></li>\n<li>Oracle Java Hotspot <a href=\"https://wikis.oracle.com/display/HotSpotInternals/PerformanceTacticIndex\">https://wikis.oracle.com/display/HotSpotInternals/PerformanceTacticIndex</a> IBM JVM <a href=\"http://publib.boulder.ibm.com/infocenter/javasdk/v1r4m2/index.jsp?topic=/com.ibm.java.doc.diagnostics.142j9/html/howjitopt.html\">http://publib.boulder.ibm.com/infocenter/javasdk/v1r4m2/index.jsp?topic=%2Fcom.ibm.java.doc.diagnostics.142j9%2Fhtml%2Fhowjitopt.html</a></li>\n<li>Java 语言规范中对 “动作” 这个词有一个明确而具体的定义，详见<a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.2%E3%80%82\">http://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.2。</a></li>\n<li><a href=\"https://community.oracle.com/thread/1544959\">https://community.oracle.com/thread/1544959</a></li>\n<li><a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf\">http://www.cs.umd.edu/~pugh&#x2F;java&#x2F;memoryModel&#x2F;jsr133.pdf</a></li>\n<li>参见《Java 并发编程实践》章节 16.1</li>\n<li>Intel® 64 and IA-32 Architectures Software Developer’s Manual Volume 3 (3A, 3B &amp; 3C): System Programming Guide 章节 8.2</li>\n<li><a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">http://www.cs.umd.edu/~pugh&#x2F;java&#x2F;memoryModel&#x2F;DoubleCheckedLocking.html</a></li>\n</ol>\n<h3 id=\"附-1-复现重排序现象实验代码\"><a href=\"#附-1-复现重排序现象实验代码\" class=\"headerlink\" title=\"附 1 复现重排序现象实验代码\"></a>附 1 复现重排序现象实验代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    private static int x = 0, y = 0;</span><br><span class=\"line\">    private static int a = 0, b =0;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        int i = 0;</span><br><span class=\"line\">        for(;;) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            x = 0; y = 0;</span><br><span class=\"line\">            a = 0; b = 0;</span><br><span class=\"line\">            Thread one = new Thread(new Runnable() &#123;</span><br><span class=\"line\">                public void run() &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    shortWait(100000);</span><br><span class=\"line\">                    a = 1;</span><br><span class=\"line\">                    x = b;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            Thread other = new Thread(new Runnable() &#123;</span><br><span class=\"line\">                public void run() &#123;</span><br><span class=\"line\">                    b = 1;</span><br><span class=\"line\">                    y = a;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            one.start();other.start();</span><br><span class=\"line\">            one.join();other.join();</span><br><span class=\"line\">            String result = &quot;第&quot; + i + &quot;次 (&quot; + x + &quot;,&quot; + y + &quot;）&quot;;</span><br><span class=\"line\">            if(x == 0 &amp;&amp; y == 0) &#123;</span><br><span class=\"line\">                System.err.println(result);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                System.out.println(result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void shortWait(long interval)&#123;</span><br><span class=\"line\">        long start = System.nanoTime();</span><br><span class=\"line\">        long end;</span><br><span class=\"line\">        do&#123;</span><br><span class=\"line\">            end = System.nanoTime();</span><br><span class=\"line\">        &#125;while(start + interval &gt;= end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","text":"Java内存访问重排序的研究什么是重排序请先看这样一段代码： 12345678910111213141516171819202122public class P...","permalink":"/post/JAVA/Java内存访问重排序的研究","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"Java","slug":"Java","count":1,"path":"api/categories/Java.json"},{"name":"JAVA","slug":"Java/JAVA","count":1,"path":"api/categories/Java/JAVA.json"}],"tags":[{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"volatile","slug":"volatile","count":2,"path":"api/tags/volatile.json"},{"name":"before","slug":"before","count":1,"path":"api/tags/before.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E5%86%85%E5%AD%98%E8%AE%BF%E9%97%AE%E9%87%8D%E6%8E%92%E5%BA%8F%E7%9A%84%E7%A0%94%E7%A9%B6\"><span class=\"toc-text\">Java内存访问重排序的研究</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E9%87%8D%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">什么是重排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#as-if-serial-%E8%AF%AD%E4%B9%89\"><span class=\"toc-text\">as-if-serial 语义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E8%AE%BF%E9%97%AE%E9%87%8D%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%86%85%E5%AD%98%E5%8F%AF%E8%A7%81%E6%80%A7\"><span class=\"toc-text\">内存访问重排序与内存可见性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E8%AE%BF%E9%97%AE%E9%87%8D%E6%8E%92%E5%BA%8F%E4%B8%8E-Java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">内存访问重排序与 Java 内存模型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C\"><span class=\"toc-text\">内存屏障</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Intel-64-x2F-IA-32-%E6%9E%B6%E6%9E%84%E4%B8%8B%E7%9A%84%E5%86%85%E5%AD%98%E8%AE%BF%E9%97%AE%E9%87%8D%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">Intel 64&#x2F;IA-32 架构下的内存访问重排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BE%8B-Intel-64-x2F-IA-32-%E6%9E%B6%E6%9E%84%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">一例 Intel 64&#x2F;IA-32 架构下的代码性能优化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%8F\"><span class=\"toc-text\">序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%99%84-1-%E5%A4%8D%E7%8E%B0%E9%87%8D%E6%8E%92%E5%BA%8F%E7%8E%B0%E8%B1%A1%E5%AE%9E%E9%AA%8C%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">附 1 复现重排序现象实验代码</span></a></li></ol></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Nginx gzip参数详解及常见问题","uid":"a03cc162cee41bf570dc5f1147b3943c","slug":"MIDDLEWARE/Nginx gzip参数详解及常见问题","date":"2021-08-16T16:16:06.000Z","updated":"2025-09-30T03:26:49.416Z","comments":true,"path":"api/articles/MIDDLEWARE/Nginx gzip参数详解及常见问题.json","keywords":"XuGuangSheng","cover":"/covers/nginx-gzip.jpg","text":"Nginx gzip参数详解及常见问题1、Nginx gzip 功能Nginx 实现资源压缩的原理是通过 ngx_http_gzip_module 模块拦截请求...","permalink":"/post/MIDDLEWARE/Nginx gzip参数详解及常见问题","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"gzip","slug":"gzip","count":1,"path":"api/categories/gzip.json"},{"name":"MIDDLEWARE","slug":"gzip/MIDDLEWARE","count":1,"path":"api/categories/gzip/MIDDLEWARE.json"}],"tags":[{"name":"如果","slug":"如果","count":2,"path":"api/tags/如果.json"},{"name":"http","slug":"http","count":6,"path":"api/tags/http.json"},{"name":"启用压缩","slug":"启用压缩","count":1,"path":"api/tags/启用压缩.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Spring Boot 排除自动配置的 4 种方法","uid":"a3c579c0425bdc8d839cf9bbfcb91047","slug":"JAVA/Spring Boot 排除自动配置的 4 种方法","date":"2021-08-09T23:05:31.000Z","updated":"2025-09-30T03:26:17.178Z","comments":true,"path":"api/articles/JAVA/Spring Boot 排除自动配置的 4 种方法.json","keywords":"XuGuangSheng","cover":"/covers/spring-boot-4.jpg","text":"Spring Boot 排除自动配置的 4 种方法Spring Boot 提供的自动配置非常强大，某些情况下，自动配置的功能可能不符合我们的需求，需要我们自定义...","permalink":"/post/JAVA/Spring Boot 排除自动配置的 4 种方法","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Spring","slug":"Spring","count":4,"path":"api/categories/Spring.json"},{"name":"JAVA","slug":"Spring/JAVA","count":4,"path":"api/categories/Spring/JAVA.json"}],"tags":[{"name":"Boot","slug":"Boot","count":1,"path":"api/tags/Boot.json"},{"name":"使用","slug":"使用","count":5,"path":"api/tags/使用.json"},{"name":"方法","slug":"方法","count":1,"path":"api/tags/方法.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}