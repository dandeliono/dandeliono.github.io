{"title":"Spring RestTemplate使用指南","uid":"a48fe76127f611e471ecf4672c3ea452","slug":"JAVA/Spring RestTemplate使用指南","date":"2023-04-07T14:56:26.000Z","updated":"2025-09-30T03:26:17.905Z","comments":true,"path":"api/articles/JAVA/Spring RestTemplate使用指南.json","keywords":"XuGuangSheng","cover":"/covers/spring-resttemplate.jpg","content":"<h1 id=\"Spring-RestTemplate使用指南\"><a href=\"#Spring-RestTemplate使用指南\" class=\"headerlink\" title=\"Spring RestTemplate使用指南\"></a>Spring RestTemplate使用指南</h1><h2 id=\"〇、介绍\"><a href=\"#〇、介绍\" class=\"headerlink\" title=\"〇、介绍 \"></a>〇、介绍<a href=\"#%E3%80%87-%E4%BB%8B%E7%BB%8D\"> </a></h2><p>spring-web框架下的一个http客户端，提供了一种通用的接口。</p>\n<p>HTTP请求方式可以选择：</p>\n<ul>\n<li>原生的 <code>java.net.HttpURLConnection</code></li>\n<li>Apache HttpClient</li>\n<li>…</li>\n</ul>\n<p>HTTP请求方式通过 <code>ClientHttpRequestFactory</code> 接口适配，默认使用 <code>SimpleClientHttpRequestFactory</code><br><code>AbstractClientHttpRequestFactoryWrapper, BufferingClientHttpRequestFactory, HttpComponentsAsyncClientHttpRequestFactory, HttpComponentsClientHttpRequestFactory, InterceptingClientHttpRequestFactory, MockMvcClientHttpRequestFactory, Netty4ClientHttpRequestFactory, OkHttp3ClientHttpRequestFactory, SimpleClientHttpRequestFactory</code><br>提供开箱即用的请求和响应序列化和反序列化工具，且支持高度定制化。接口为 <code>HttpMessageConverter&lt;&gt;</code></p>\n<h2 id=\"一、构造方式\"><a href=\"#一、构造方式\" class=\"headerlink\" title=\"一、构造方式 \"></a>一、构造方式<a href=\"#%E4%B8%80-%E6%9E%84%E9%80%A0%E6%96%B9%E5%BC%8F\"> </a></h2><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RestTemplate restTemplate <span class=\"operator\">=</span> new RestTemplate()<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>HTTP请求方式使用 SimpleClientHttpRequestFactory 及 <code>java.net.HttpURLConnection</code></li>\n<li>默认添加了众多消息处理器，参见：<code>RestTemplate#RestTemplate()</code></li>\n</ul>\n<p>当然spring还提供了其他的构造方式，例如：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SimpleClientHttpRequestFactory requestFactory <span class=\"operator\">=</span> new SimpleClientHttpRequestFactory()<span class=\"comment\">;</span></span><br><span class=\"line\">requestFactory.setConnectTimeout(<span class=\"number\">1000</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">requestFactory.setReadTimeout(<span class=\"number\">1000</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">RestTemplate restTemplate1 <span class=\"operator\">=</span> new RestTemplate(requestFactory)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、相关配置\"><a href=\"#二、相关配置\" class=\"headerlink\" title=\"二、相关配置 \"></a>二、相关配置<a href=\"#%E4%BA%8C-%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE\"> </a></h2><h3 id=\"1、requestFactory\"><a href=\"#1、requestFactory\" class=\"headerlink\" title=\"1、requestFactory \"></a>1、requestFactory<a href=\"#1-requestfactory\"> </a></h3><p>HTTP请求方式配置</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">restTemplate.setRequestFactory(requestFactory)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>支持介绍所描述的客户端，当然也可以自己实现 <code>ClientHttpRequestFactory</code> 接口</p>\n<h3 id=\"2、messageConverters\"><a href=\"#2、messageConverters\" class=\"headerlink\" title=\"2、messageConverters \"></a>2、messageConverters<a href=\"#2-messageconverters\"> </a></h3><p>请求体与相应体的序列化、反序列化器</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">restTemplate.setMessageConverters(messageConverters)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>messageConverters</code> 类型为 <code>List&lt;HttpMessageConverter&lt;?&gt;&gt;</code></li>\n<li>比如Json请求体的序列化和反序列化</li>\n</ul>\n<p>支持如下方法：</p>\n<p>AbstractGenericHttpMessageConverter, AbstractHttpMessageConverter, AbstractJackson2HttpMessageConverter, AbstractJaxb2HttpMessageConverter, AbstractJsonHttpMessageConverter, AbstractWireFeedHttpMessageConverter, AbstractXmlHttpMessageConverter, AllEncompassingFormHttpMessageConverter, AtomFeedHttpMessageConverter, BufferedImageHttpMessageConverter, ByteArrayHttpMessageConverter, FormHttpMessageConverter, GsonHttpMessageConverter, Jaxb2CollectionHttpMessageConverter, Jaxb2RootElementHttpMessageConverter, JsonbHttpMessageConverter, MappingJackson2CborHttpMessageConverter, MappingJackson2HttpMessageConverter, MappingJackson2SmileHttpMessageConverter, MappingJackson2XmlHttpMessageConverter, MarshallingHttpMessageConverter, ObjectToStringHttpMessageConverter, ProtobufHttpMessageConverter, ProtobufJsonFormatHttpMessageConverter, ResourceHttpMessageConverter, ResourceRegionHttpMessageConverter, RssChannelHttpMessageConverter, SourceHttpMessageConverter, StringHttpMessageConverter</p>\n<h3 id=\"3、interceptors\"><a href=\"#3、interceptors\" class=\"headerlink\" title=\"3、interceptors \"></a>3、interceptors<a href=\"#3-interceptors\"> </a></h3><p>拦截器：配置请求之前的过滤请求</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">restTemplate.setInterceptors(interceptors)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>interceptors 类型为 <code>List&lt;ClientHttpRequestInterceptor&gt;</code></li>\n<li>用于实现请求之前的校验或者增强</li>\n</ul>\n<h3 id=\"4、errorHandler\"><a href=\"#4、errorHandler\" class=\"headerlink\" title=\"4、errorHandler \"></a>4、errorHandler<a href=\"#4-errorhandler\"> </a></h3><p>异常处理器：用于处理请求响应码的异常。</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">restTemplate.setErrorHandler(errorHandler)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>只能处理http响应码的错误</li>\n<li>一定不要读取ClientHttpResponse.getBody，因为inputsteam只能读一次</li>\n<li>默认为 <code>DefaultResponseErrorHandler</code></li>\n<li>面对国内http状态码为200的错误，只能在 <code>messageConverter</code> 层处理</li>\n</ul>\n<h2 id=\"三、相关API\"><a href=\"#三、相关API\" class=\"headerlink\" title=\"三、相关API \"></a>三、相关API<a href=\"#%E4%B8%89-%E7%9B%B8%E5%85%B3api\"> </a></h2><p>常用API如下：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\"> getForObject</span></span><br><span class=\"line\"><span class=\"attribute\">getForEntity</span></span><br><span class=\"line\"><span class=\"attribute\"></span></span><br><span class=\"line\"><span class=\"attribute\">postForXxx</span> </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ForObject表示 返回 <code>T</code></li>\n<li>ForEntity表示 返回 <code>ResponseEntity&lt;T&gt;</code></li>\n</ul>\n<p>通用API如下：</p>\n<ul>\n<li>一般可以使用exchange进行封装，具有很高的灵活性</li>\n</ul>\n<h2 id=\"四、实例\"><a href=\"#四、实例\" class=\"headerlink\" title=\"四、实例 \"></a>四、实例<a href=\"#%E5%9B%9B-%E5%AE%9E%E4%BE%8B\"> </a></h2><h3 id=\"1、处理url参数（get参数）\"><a href=\"#1、处理url参数（get参数）\" class=\"headerlink\" title=\"1、处理url参数（get参数） \"></a>1、处理url参数（get参数）<a href=\"#1-%E5%A4%84%E7%90%86url%E5%8F%82%E6%95%B0-get%E5%8F%82%E6%95%B0\"> </a></h3><figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> <span class=\"built_in\">url</span> = <span class=\"string\">&quot;http://localhost:8080/test/sendSms?phone=&#123;phone&#125;&amp;msg=&#123;phone&#125;&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">String</span> result = restOperations.getForObject(<span class=\"built_in\">url</span>, <span class=\"built_in\">String</span>.class, <span class=\"string\">&quot;151xxxxxxxx&quot;</span>, <span class=\"string\">&quot;测试短信内容&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>以下方式默认情况下不支持</strong> （spring 5.x）</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> <span class=\"built_in\">url</span> = <span class=\"string\">&quot;http://localhost:8080/test/sendSms?phone=&#123;phone&#125;&amp;msg=&#123;phone&#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt; uriVariables = <span class=\"keyword\">new</span> HashMap&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Object</span>&gt;();</span><br><span class=\"line\">uriVariables.put(<span class=\"string\">&quot;phone&quot;</span>, <span class=\"string\">&quot;151xxxxxxxx&quot;</span>);</span><br><span class=\"line\">uriVariables.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;测试短信内容&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span> result = restOperations.getForObject(<span class=\"built_in\">url</span>, <span class=\"built_in\">String</span>.class, uriVariables);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、配置请求头\"><a href=\"#2、配置请求头\" class=\"headerlink\" title=\"2、配置请求头 \"></a>2、配置请求头<a href=\"#2-%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E5%A4%B4\"> </a></h3><p>例如配置cookie</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpHeaders jsonHeaders = <span class=\"built_in\">new</span> HttpHeaders();</span><br><span class=\"line\">jsonHeaders.<span class=\"keyword\">add</span>(HttpHeaders.COOKIE, &quot;sessionid=&quot; + sessionid);</span><br><span class=\"line\">jsonHeaders.<span class=\"keyword\">add</span>(HttpHeaders.USER_AGENT, &quot;test&quot;);</span><br><span class=\"line\">jsonHeaders.<span class=\"keyword\">add</span>(HttpHeaders.ACCEPT, &quot;application/json&quot;);</span><br><span class=\"line\">jsonHeaders.<span class=\"keyword\">add</span>(HttpHeaders.CONTENT_TYPE, &quot;application/json&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">HttpEntity&lt;?&gt; requestEntity = <span class=\"built_in\">new</span> HttpEntity&lt;&gt;(request, jsonHeaders);</span><br><span class=\"line\">ResponseEntity&lt;T&gt; response = restTemplate.exchange(buildUrl(<span class=\"type\">path</span>), HttpMethod.POST, requestEntity, responseType,</span><br><span class=\"line\">    uriVariables);</span><br><span class=\"line\"><span class=\"keyword\">return</span> response.getBody();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、form方式post请求\"><a href=\"#3、form方式post请求\" class=\"headerlink\" title=\"3、form方式post请求 \"></a>3、form方式post请求<a href=\"#3-form%E6%96%B9%E5%BC%8Fpost%E8%AF%B7%E6%B1%82\"> </a></h3><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpHeaders formHeaders = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">formHeaders.add(HttpHeaders.COOKIE, <span class=\"string\">&quot;sessionid=&quot;</span> + sessionid);</span><br><span class=\"line\">formHeaders.add(HttpHeaders.USER_AGENT, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">formHeaders.add(HttpHeaders.<span class=\"keyword\">ACCEPT</span>, <span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\">formHeaders.add(HttpHeaders.CONTENT_TYPE, <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MultiValueMap&lt;String, String&gt; <span class=\"keyword\">body</span> = <span class=\"keyword\">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Map.<span class=\"keyword\">Entry</span>&lt;String, ?&gt; <span class=\"keyword\">entry</span> : <span class=\"type\">request.entrySet</span>()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">body</span>.add(<span class=\"keyword\">entry</span>.getKey(), <span class=\"keyword\">entry</span>.getValue().toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">HttpEntity&lt;?&gt; requestEntity = <span class=\"keyword\">new</span> HttpEntity&lt;&gt;(<span class=\"keyword\">body</span>, formHeaders);</span><br><span class=\"line\">ResponseEntity&lt;T&gt; response = restTemplate.exchange(buildUrl(path), HttpMethod.POST, requestEntity, responseType, uriVariables);</span><br><span class=\"line\"><span class=\"keyword\">return</span> response.getBody();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、定制json解析器\"><a href=\"#3、定制json解析器\" class=\"headerlink\" title=\"3、定制json解析器 \"></a>3、定制json解析器<a href=\"#3-%E5%AE%9A%E5%88%B6json%E8%A7%A3%E6%9E%90%E5%99%A8\"> </a></h3><p>注意使用了Jackson：</p>\n<ul>\n<li><p>定制日期序列化方式</p>\n</li>\n<li><p>使用java8的日期时间标准</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">restTemplate = <span class=\"keyword\">new</span> <span class=\"type\">RestTemplate</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">ObjectMapper objectMapper = <span class=\"keyword\">new</span> <span class=\"type\">ObjectMapper</span>();</span><br><span class=\"line\">JavaTimeModule javaTimeModule = <span class=\"keyword\">new</span> <span class=\"type\">JavaTimeModule</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">javaTimeModule.addDeserializer(LocalDateTime.class,</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"type\">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>)));</span><br><span class=\"line\">objectMapper.registerModule(<span class=\"keyword\">new</span> <span class=\"type\">ParameterNamesModule</span>())</span><br><span class=\"line\">.registerModule(<span class=\"keyword\">new</span> <span class=\"type\">Jdk8Module</span>())</span><br><span class=\"line\">.registerModule(javaTimeModule);</span><br><span class=\"line\"></span><br><span class=\"line\">objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class=\"literal\">false</span>);</span><br><span class=\"line\">List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = restTemplate</span><br><span class=\"line\">.getMessageConverters()</span><br><span class=\"line\">.stream()</span><br><span class=\"line\">.filter(c -&gt; !(c instanceof MappingJackson2HttpMessageConverter))</span><br><span class=\"line\">.collect(Collectors.toList());</span><br><span class=\"line\">MappingJackson2HttpMessageConverter jsonMessageConverter = <span class=\"keyword\">new</span> <span class=\"type\">MappingJackson2HttpMessageConverter</span>();</span><br><span class=\"line\">jsonMessageConverter.setObjectMapper(objectMapper);</span><br><span class=\"line\">messageConverters.add(<span class=\"keyword\">new</span> <span class=\"type\">JsonHttpMessageConverterProxy</span>(jsonMessageConverter));</span><br><span class=\"line\">restTemplate.setMessageConverters(messageConverters);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>依赖如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.module<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-module-parameter-names<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-datatype-jdk8<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、定制200错误处理\"><a href=\"#4、定制200错误处理\" class=\"headerlink\" title=\"4、定制200错误处理 \"></a>4、定制200错误处理<a href=\"#4-%E5%AE%9A%E5%88%B6200%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"> </a></h3><p>例如如下情况：</p>\n<p>正确返回</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-status-<span class=\"selector-tag\">code</span> <span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;<span class=\"selector-tag\">code</span>&quot;: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;data&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">  &quot;message&quot;: <span class=\"string\">&quot;success&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>错误返回</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">http</span>-status-<span class=\"meta\">code</span> <span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;code&quot;</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 非零</span></span><br><span class=\"line\">  <span class=\"string\">&quot;data&quot;</span>: <span class=\"number\">11111</span>, <span class=\"comment\">// 一个数字</span></span><br><span class=\"line\">  <span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;错误信息&quot;</span> <span class=\"comment\">// 错误信息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过代理Jackson解析器实现</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">JsonHttpMessageConverterProxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HttpMessageConverter</span>&lt;<span class=\"title class_\">Object</span>&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title class_\">HttpMessageConverter</span>&lt;<span class=\"title class_\">Object</span>&gt; converter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title class_\">JsonHttpMessageConverterProxy</span>(<span class=\"title class_\">HttpMessageConverter</span>&lt;<span class=\"title class_\">Object</span>&gt; converter) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">converter</span> = converter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> <span class=\"title function_\">canRead</span>(<span class=\"params\">Class&lt;?&gt; clazz, MediaType mediaType</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> converter.<span class=\"title function_\">canRead</span>(clazz, mediaType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> <span class=\"title function_\">canWrite</span>(<span class=\"params\">Class&lt;?&gt; clazz, MediaType mediaType</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> converter.<span class=\"title function_\">canWrite</span>(clazz, mediaType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title class_\">List</span>&lt;<span class=\"title class_\">MediaType</span>&gt; <span class=\"title function_\">getSupportedMediaTypes</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> converter.<span class=\"title function_\">getSupportedMediaTypes</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title class_\">Object</span> <span class=\"title function_\">read</span>(<span class=\"title class_\">Class</span>&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Object</span>&gt; clazz, <span class=\"title class_\">HttpInputMessage</span> inputMessage)</span><br><span class=\"line\">        throws <span class=\"title class_\">IOException</span>, <span class=\"title class_\">HttpMessageNotReadableException</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">String</span> body = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(inputMessage.<span class=\"title function_\">getBody</span>()))</span><br><span class=\"line\">            .<span class=\"title function_\">lines</span>().<span class=\"title function_\">collect</span>(<span class=\"title class_\">Collectors</span>.<span class=\"title function_\">joining</span>(<span class=\"title class_\">System</span>.<span class=\"title function_\">lineSeparator</span>())).<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">        <span class=\"title class_\">Map</span>&lt;<span class=\"title class_\">String</span>, <span class=\"title class_\">Object</span>&gt; bodyMap = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parseObject</span>(body);</span><br><span class=\"line\">        <span class=\"title class_\">Integer</span> code = (<span class=\"title class_\">Integer</span>) bodyMap.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;code&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (code != <span class=\"literal\">null</span> &amp;&amp; code != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            bodyMap.<span class=\"title function_\">put</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            body = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">toJSONString</span>(bodyMap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title class_\">InputStream</span> fixBodyInputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(body.<span class=\"title function_\">getBytes</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> converter.<span class=\"title function_\">read</span>(clazz, <span class=\"keyword\">new</span> <span class=\"title class_\">HttpInputMessage</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"title class_\">HttpHeaders</span> <span class=\"title function_\">getHeaders</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> inputMessage.<span class=\"title function_\">getHeaders</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"title class_\">InputStream</span> <span class=\"title function_\">getBody</span>() throws <span class=\"title class_\">IOException</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> fixBodyInputStream;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> <span class=\"title function_\">write</span>(<span class=\"title class_\">Object</span> t, <span class=\"title class_\">MediaType</span> contentType, <span class=\"title class_\">HttpOutputMessage</span> outputMessage)</span><br><span class=\"line\">        throws <span class=\"title class_\">IOException</span>, <span class=\"title class_\">HttpMessageNotWritableException</span> &#123;</span><br><span class=\"line\">        converter.<span class=\"title function_\">write</span>(t, contentType, outputMessage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用发方式</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">restTemplate = <span class=\"keyword\">new</span> <span class=\"type\">RestTemplate</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">ObjectMapper objectMapper = <span class=\"keyword\">new</span> <span class=\"type\">ObjectMapper</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">MappingJackson2HttpMessageConverter jsonMessageConverter = <span class=\"keyword\">new</span> <span class=\"type\">MappingJackson2HttpMessageConverter</span>();</span><br><span class=\"line\">jsonMessageConverter.setObjectMapper(objectMapper);</span><br><span class=\"line\">List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = restTemplate</span><br><span class=\"line\">                      .getMessageConverters()</span><br><span class=\"line\">                      .stream()</span><br><span class=\"line\">                      .filter(c -&gt; !(c instanceof MappingJackson2HttpMessageConverter))</span><br><span class=\"line\">                      .collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">messageConverters.add(<span class=\"keyword\">new</span> <span class=\"type\">JsonHttpMessageConverterProxy</span>(jsonMessageConverter));</span><br><span class=\"line\">restTemplate.setMessageConverters(messageConverters);</span><br></pre></td></tr></table></figure>\n","text":"Spring RestTemplate使用指南〇、介绍 spring-web框架下的一个http客户端，提供了一种通用的接口。 HTTP请求方式可以选择： 原生...","permalink":"/post/JAVA/Spring RestTemplate使用指南","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"HttpMessageConverter","slug":"HttpMessageConverter","count":1,"path":"api/categories/HttpMessageConverter.json"},{"name":"JAVA","slug":"HttpMessageConverter/JAVA","count":1,"path":"api/categories/HttpMessageConverter/JAVA.json"}],"tags":[{"name":"HTTP","slug":"HTTP","count":2,"path":"api/tags/HTTP.json"},{"name":"ClientHttpRequestFactory","slug":"ClientHttpRequestFactory","count":1,"path":"api/tags/ClientHttpRequestFactory.json"},{"name":"MappingJackson","slug":"MappingJackson","count":1,"path":"api/tags/MappingJackson.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Spring-RestTemplate%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97\"><span class=\"toc-text\">Spring RestTemplate使用指南</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E3%80%87%E3%80%81%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">〇、介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%9E%84%E9%80%A0%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">一、构造方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">二、相关配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81requestFactory\"><span class=\"toc-text\">1、requestFactory</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81messageConverters\"><span class=\"toc-text\">2、messageConverters</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81interceptors\"><span class=\"toc-text\">3、interceptors</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81errorHandler\"><span class=\"toc-text\">4、errorHandler</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E7%9B%B8%E5%85%B3API\"><span class=\"toc-text\">三、相关API</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">四、实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%A4%84%E7%90%86url%E5%8F%82%E6%95%B0%EF%BC%88get%E5%8F%82%E6%95%B0%EF%BC%89\"><span class=\"toc-text\">1、处理url参数（get参数）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E5%A4%B4\"><span class=\"toc-text\">2、配置请求头</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81form%E6%96%B9%E5%BC%8Fpost%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">3、form方式post请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%AE%9A%E5%88%B6json%E8%A7%A3%E6%9E%90%E5%99%A8\"><span class=\"toc-text\">3、定制json解析器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%AE%9A%E5%88%B6200%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">4、定制200错误处理</span></a></li></ol></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"用手写一个请求合并","uid":"b6f5eb01abd12277953691dc9b2fec2e","slug":"JAVA/用手写一个请求合并","date":"2023-04-19T15:45:48.000Z","updated":"2025-09-30T03:26:28.159Z","comments":true,"path":"api/articles/JAVA/用手写一个请求合并.json","keywords":"XuGuangSheng","cover":"/covers/e425c5f6a9af.jpg","text":"用手写一个请求合并推荐阅读： 一、服务器崩溃的思考老板说，他要做个现场营销活动，线上线下都要参与推广，这个活动参与人数可能很大哦··· 果然，由于不是我写的代码...","permalink":"/post/JAVA/用手写一个请求合并","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"https","slug":"https","count":12,"path":"api/categories/https.json"},{"name":"JAVA","slug":"https/JAVA","count":5,"path":"api/categories/https/JAVA.json"}],"tags":[{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"pic","slug":"pic","count":2,"path":"api/tags/pic.json"},{"name":"zhimg","slug":"zhimg","count":2,"path":"api/tags/zhimg.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SQL解析器组件","uid":"d877b3555659291721a2f384975f0ecc","slug":"JAVA/SQL解析器组件","date":"2023-03-22T14:25:04.000Z","updated":"2025-09-30T03:26:15.631Z","comments":true,"path":"api/articles/JAVA/SQL解析器组件.json","keywords":"XuGuangSheng","cover":"/covers/sql.jpg","text":"SQL解析器组件 hzero-starter-sqlparser是基于druid的sql解析器移植而来，未来会逐渐完善功能、增强api。 sql语句首先需要由p...","permalink":"/post/JAVA/SQL解析器组件","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"sql","slug":"sql","count":1,"path":"api/categories/sql.json"},{"name":"JAVA","slug":"sql/JAVA","count":1,"path":"api/categories/sql/JAVA.json"}],"tags":[{"name":"ast","slug":"ast","count":1,"path":"api/tags/ast.json"},{"name":"AST","slug":"AST","count":1,"path":"api/tags/AST.json"},{"name":"starter","slug":"starter","count":1,"path":"api/tags/starter.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}