{"title":"ConditionalOnMissingBean失效问题追踪","uid":"81d9f9cbb43ffb5d74b9291c7102db6e","slug":"JAVA/ConditionalOnMissingBean失效问题追踪","date":"2024-04-01T18:25:44.000Z","updated":"2025-09-30T03:26:09.106Z","comments":true,"path":"api/articles/JAVA/ConditionalOnMissingBean失效问题追踪.json","keywords":"XuGuangSheng","cover":"/covers/conditionalonmissingbean.jpg","content":"<h1 id=\"ConditionalOnMissingBean失效问题追踪\"><a href=\"#ConditionalOnMissingBean失效问题追踪\" class=\"headerlink\" title=\"ConditionalOnMissingBean失效问题追踪\"></a>ConditionalOnMissingBean失效问题追踪</h1><p>遇到一个<code>@ConditionalOnMissingBean</code>失效的问题，今天花点时间来分析一下。</p>\n<h3 id=\"现场回放\"><a href=\"#现场回放\" class=\"headerlink\" title=\"现场回放\"></a>现场回放</h3><h4 id=\"services\"><a href=\"#services\" class=\"headerlink\" title=\"services\"></a>services</h4><p>首先介绍下代码结构：有<code>RunService</code>,以及它的两个实现类：<code>TrainRunServiceImpl</code>和<code>CarRunServiceImpl</code><br><img src=\"https://img-blog.csdnimg.cn/20190823100348285.png\"></p>\n<p><strong>RunService</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">RunService</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span>()</span>;</span><br><span class=\"line\">&#125;` </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>TrainRunServiceImpl</strong></p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"symbol\">TrainRunServiceImpl</span> <span class=\"symbol\">implements</span> <span class=\"symbol\">RunService</span> &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> run() &#123;</span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;开火车,wuwuwuwuwu&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;` </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>CarRunServiceImpl</strong></p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"symbol\">CarRunServiceImpl</span> <span class=\"symbol\">implements</span> <span class=\"symbol\">RunService</span> &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> run() &#123;</span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;汽车,dididi&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;` </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"操作类\"><a href=\"#操作类\" class=\"headerlink\" title=\"操作类\"></a>操作类</h4><p>操作类<code>MyInitBean</code>中，注入了<code>RunService</code> – <strong>byType</strong></p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInitBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">InitializingBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RunService runService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        runService.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;` </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"configuration\"><a href=\"#configuration\" class=\"headerlink\" title=\"configuration\"></a>configuration</h4><p>我们在配置类中，注入<code>RunService</code>的实现bean,并通过<code>@ConditionalOnMissingBean</code>来判断是否注入。</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title class_\"><span class=\"keyword\">class</span> <span class=\"title\">MyConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RunService carRunServiceImpl() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">CarRunServiceImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RunService trainRunServiceImpl() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">TrainRunServiceImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;` </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h4><p>按照上述的代码，执行后，本以为会成功执行，但是却抛出了异常，异常信息如下：<br><img src=\"https://img-blog.csdnimg.cn/20190823101831266.png\"></p>\n<p>在spring容器中存在了两个<code>RunService</code>实现类。<br>这导致了<code>MyInitBean</code>无法决定它到底该使用这两个中的哪一个。(默认是<code>byType</code>注入的)</p>\n<p>按照上述的异常信息，它给出了两种解决方案：</p>\n<p><strong>@Qualifier</strong><br>在注入bean时，指定bean的名称.</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"variable\">@Controller</span></span><br><span class=\"line\">public class MyInitBean implements InitializingBean &#123;</span><br><span class=\"line\">    <span class=\"variable\">@Autowired</span></span><br><span class=\"line\">    <span class=\"variable\">@Qualifier</span>(<span class=\"string\">&quot;carRunServiceImpl&quot;</span>)</span><br><span class=\"line\">    private RunService runService;</span><br><span class=\"line\">&#125;` </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>通过<code>@Configuration</code>配置类注入的bean,默认名称为<code>方法名称</code></li>\n</ul>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"meta\">@Bean</span> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\">RunService <span class=\"title\">trainRunServiceImpl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TrainRunServiceImpl();</span><br><span class=\"line\">&#125;` </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>直接在类头部申明注入的bean,默认名称为<code>类名称</code></li>\n</ul>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"meta\">@Service  </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title class_\"><span class=\"keyword\">class</span> <span class=\"title\">TrainRunServiceImpl</span> <span class=\"keyword\"><span class=\"keyword\">implements</span> <span class=\"type\">RunService</span></span> </span>&#123;</span><br><span class=\"line\">&#125;` </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></blockquote>\n<p><strong>@Primary</strong><br><code>@Primary</code>的作用是，在bean存在多个候选者且无法决定使用哪一个时，<code>优先</code>使用带有该注解的bean.</p>\n<ul>\n<li>在配置类中<code>Configuration</code>添加</li>\n</ul>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"variable\">@Bean</span></span><br><span class=\"line\"> <span class=\"variable\">@Primary</span></span><br><span class=\"line\"> public RunService <span class=\"built_in\">trainRunServiceImpl</span>() &#123;</span><br><span class=\"line\">     <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">TrainRunServiceImpl</span>();</span><br><span class=\"line\"> &#125;` </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在类申明中添加</li>\n</ul>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"meta\">@Primary</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title class_\"><span class=\"keyword\">class</span> <span class=\"title\">TrainRunServiceImpl</span> <span class=\"keyword\"><span class=\"keyword\">implements</span> <span class=\"type\">RunService</span></span> </span>&#123;</span><br><span class=\"line\">&#125;` </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>注意</strong><br>在上述给出的两种方法中，无论是使用<code>@Primary</code>还是这里容器中仍然<code>存在多个实现类</code>,<br>这并不是我们想要的结果。<br>这里为什么<code>@ConditionalOnMissingBean</code>会失效呢?</p>\n<h3 id=\"问题定位\"><a href=\"#问题定位\" class=\"headerlink\" title=\"问题定位\"></a>问题定位</h3><p>在进行问题定位前，我们先来回顾一下<code>@ConditionalOnMissingBean</code>的工作原理</p>\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><p><strong>@ConditionalOnMissingBean</strong><br><code>ConditionalOnMissingBean</code>的注解定义如下：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"keyword\">@Target</span>(&#123; ElementType<span class=\"selector-class\">.TYPE</span>, ElementType<span class=\"selector-class\">.METHOD</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">@Conditional</span>(OnBeanCondition.class)</span><br><span class=\"line\">public <span class=\"keyword\">@interface</span> ConditionalOnMissingBean &#123;</span><br><span class=\"line\">\tClass&lt;?&gt;<span class=\"selector-attr\">[]</span> <span class=\"built_in\">value</span>() default &#123;&#125;;</span><br><span class=\"line\">\tString<span class=\"selector-attr\">[]</span> <span class=\"built_in\">type</span>() default &#123;&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;` </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>@ConditionalOnMissingBean</code>通常可以有如下三种使用方式：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"variable\">@Bean</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"variable\">@ConditionalOnMissingBean</span> </span><br><span class=\"line\">   public RunService <span class=\"built_in\">carRunServiceImpl</span>() &#123;</span><br><span class=\"line\">       <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">CarRunServiceImpl</span>();</span><br><span class=\"line\">   &#125;` </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在注解上看到了一个<code>OnBeanCondition</code>类，在<code>@ConditionalOnBean</code>,<code>ConditionalOnSingleCandidate</code>和<code>ConditionalOnMissingBean</code>都看到了它的身影。</p>\n<p><strong>OnBeanCondition</strong></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"meta\">@Order</span>(<span class=\"type\">Ordered</span>.<span class=\"type\">LOWEST_PRECEDENCE</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OnBeanCondition</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBootCondition</span> <span class=\"title\">implements</span> <span class=\"title\">ConfigurationCondition</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\tpublic <span class=\"type\">ConditionOutcome</span> getMatchOutcome(<span class=\"type\">ConditionContext</span> context,</span><br><span class=\"line\">\t\t\t<span class=\"type\">AnnotatedTypeMetadata</span> metadata) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (metadata.isAnnotated(<span class=\"type\">ConditionalOnMissingBean</span>.<span class=\"keyword\">class</span>.getName())) &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"type\">BeanSearchSpec</span> spec = <span class=\"keyword\">new</span> <span class=\"type\">BeanSearchSpec</span>(context, metadata,<span class=\"type\">ConditionalOnMissingBean</span>.<span class=\"keyword\">class</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"type\">MatchResult</span> matchResult = getMatchingBeans(context, spec);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (matchResult.isAnyMatched()) &#123;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> reason = createOnMissingBeanNoMatchReason(matchResult);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"type\">ConditionOutcome</span>.noMatch(<span class=\"type\">ConditionMessage</span></span><br><span class=\"line\">\t\t\t\t\t\t.forCondition(<span class=\"type\">ConditionalOnMissingBean</span>.<span class=\"keyword\">class</span>, spec)</span><br><span class=\"line\">\t\t\t\t\t\t.because(reason));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tmatchMessage = matchMessage.andCondition(<span class=\"type\">ConditionalOnMissingBean</span>.<span class=\"keyword\">class</span>, spec)</span><br><span class=\"line\">\t\t\t\t\t.didNotFind(<span class=\"string\">&quot;any beans&quot;</span>).atAll();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"type\">ConditionOutcome</span>.<span class=\"keyword\">match</span>(matchMessage);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;` </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>ConditionOutcome</code> 的用法：当<code>match= true</code>时，才注入容器.<br>若<code>@ConditionalOnMissingBean</code>找到了匹配项，则返回<code>ConditionOutcome.notMatch</code>，则不注入容器。</p></blockquote>\n<h4 id=\"问题出在哪\"><a href=\"#问题出在哪\" class=\"headerlink\" title=\"问题出在哪?\"></a>问题出在哪?</h4><p>有了上面的一系列原理支撑,但是为什么没有执行到我们想要的结果呢？<br>debug执行后，发现问题出现在<code>OnBeanCondition .getMatchingBeans(context, spec)</code>这个方法中。<br>首先再次回顾下配置类：<br><img src=\"https://img-blog.csdnimg.cn/20190823112124133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0X2ZyZXNobWFu,size_16,color_FFFFFF,t_70\"></p>\n<p>在注入<code>carRunServiceImpl</code>时，执行<code>OnBeanCondition .getMatchingBeans(context, spec)</code>并没有找到下面定义的<code>trainRunServiceImpl</code>.</p>\n<p><strong>真相只有一个：</strong><br><code>@Configuration</code> 在初始化bean的时候，顺序出现了问题，那么如何控制初始化bean的顺序呢？</p>\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><p>一顿分析之后，我们发现只要控制了bean的加载顺序之后，上述的问题就可以解决了。<br>接下来我们来尝试控制bean初始化顺序：</p>\n<p><strong>Configuration中bean使用@Order —————– <code>failure</code></strong></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"variable\">@Configuration</span></span><br><span class=\"line\">public class MyConfiguration &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">@Order</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"variable\">@Bean</span></span><br><span class=\"line\">    <span class=\"variable\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    public RunService <span class=\"built_in\">carRunServiceImpl</span>() &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">CarRunServiceImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @<span class=\"selector-tag\">Order</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    @<span class=\"selector-tag\">Bean</span></span><br><span class=\"line\">    <span class=\"selector-tag\">public</span> <span class=\"selector-tag\">RunService</span> <span class=\"selector-tag\">trainRunServiceImpl</span>() &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">TrainRunServiceImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;` </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>Configuration 调整bean申明顺序—————– <code>success</code></strong><br>将带有<code>@ConditionalOnMissingBean</code>注解的bean,申明在代码的末尾位置，操作成功：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title class_\"><span class=\"keyword\">class</span> <span class=\"title\">MyConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RunService trainRunServiceImpl() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">TrainRunServiceImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RunService carRunServiceImpl() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">CarRunServiceImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;` </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>配置多个Configuration类，并通过@Order指定顺序—————- <code>failure</code></strong></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"variable\">@Configuration</span></span><br><span class=\"line\"><span class=\"variable\">@Order</span>(Ordered.LOWEST_PRECEDENCE) </span><br><span class=\"line\">public class MyConfiguration &#123;</span><br><span class=\"line\">    <span class=\"variable\">@Bean</span></span><br><span class=\"line\">    <span class=\"variable\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    public RunService <span class=\"built_in\">carRunServiceImpl</span>() &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">CarRunServiceImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"selector-tag\">Configuration</span></span><br><span class=\"line\">@<span class=\"selector-tag\">Order</span>(Ordered.HIGHEST_PRECEDENCE) </span><br><span class=\"line\"><span class=\"selector-tag\">public</span> <span class=\"selector-tag\">class</span> <span class=\"selector-tag\">MyConfiguration2</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">@Bean</span></span><br><span class=\"line\">    public RunService <span class=\"built_in\">trainRunServiceImpl</span>() &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">new</span> <span class=\"selector-tag\">TrainRunServiceImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;` </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>@Configuration</code>并不能通过<code>@Order</code>指定顺序。<br><strong>大胆猜测下</strong>： <code>@Configuration</code>通过<code>配置类名</code>的自然顺序来加载的。</p>\n<p><strong>@Configuration配置类加载顺序通过类名顺序来加载 ——- 验证<code>success</code></strong><br>将<code>MyConfiguration2</code>重命名为<code>Configuration2</code>，而它的加载顺序在<code>MyConfiguration</code>之前，执行程序成功。<br><img src=\"https://img-blog.csdnimg.cn/20190823120558217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0X2ZyZXNobWFu,size_16,color_FFFFFF,t_70\"></p>\n<p>这里貌似所有的问题似乎都解决了， 只需要我们自定义的配置类名称保证最优先加载就可以了。<code>我们只需要注意配置类的命名规则即可.</code><br>但是，这种解决方案，似乎并不是那么令人信服。</p>\n<p><strong>@AutoConfigureBefore，@AutoConfigureAfter</strong><br>经查文档，终于找到了需要的东西：我们可以通过<code>@AutoConfigureBefore</code>,<code>@AutoConfigureAfter</code>来控制<code>配置类</code>的加载顺序。</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title class_\"><span class=\"keyword\">class</span> <span class=\"title\">MyConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RunService carRunServiceImpl() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">CarRunServiceImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureBefore</span>(MyConfiguration.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title class_\"><span class=\"keyword\">class</span> <span class=\"title\">MyConfiguration2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RunService trainRunServiceImpl() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">TrainRunServiceImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;` </span><br></pre></td></tr></table></figure>\n\n\n<p><strong>注意:</strong><br>如果要开启<code>@EnableAutoConfiguration</code>需要在<code>META-INF/spring.factories</code>文件中添加如下内容：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`org<span class=\"selector-class\">.springframework</span><span class=\"selector-class\">.boot</span><span class=\"selector-class\">.autoconfigure</span>.EnableAutoConfiguration=\\</span><br><span class=\"line\">xxx<span class=\"selector-class\">.configuration</span><span class=\"selector-class\">.MyConfiguration2</span>,\\</span><br><span class=\"line\">xxx<span class=\"selector-class\">.configuration</span>.MyConfiguration` </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>我们需要控制目标<code>bean</code>的加载顺序即可。<br>但是我们在实际的使用一些通用plugin过程中（如redis），并没有刻意的指定bean的加载顺序，这是为什么呢?<br>因为：在实际的应用过程中，我们使用第三方插件，他们的默认配置都会存在于插件的jar包中，而我们的个性化配置则存在于自身的应用中。<br>而容器会优先执行<code>classes/</code>，然后才执行<code>jars/classes</code>.</p>\n","text":"ConditionalOnMissingBean失效问题追踪遇到一个@ConditionalOnMissingBean失效的问题，今天花点时间来分析一下。 现场...","permalink":"/post/JAVA/ConditionalOnMissingBean失效问题追踪","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"bean","slug":"bean","count":2,"path":"api/categories/bean.json"},{"name":"JAVA","slug":"bean/JAVA","count":2,"path":"api/categories/bean/JAVA.json"}],"tags":[{"name":"ConditionalOnMissingBean","slug":"ConditionalOnMissingBean","count":1,"path":"api/tags/ConditionalOnMissingBean.json"},{"name":"Configuration","slug":"Configuration","count":1,"path":"api/tags/Configuration.json"},{"name":"RunService","slug":"RunService","count":1,"path":"api/tags/RunService.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ConditionalOnMissingBean%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA\"><span class=\"toc-text\">ConditionalOnMissingBean失效问题追踪</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%8E%B0%E5%9C%BA%E5%9B%9E%E6%94%BE\"><span class=\"toc-text\">现场回放</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#services\"><span class=\"toc-text\">services</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B1%BB\"><span class=\"toc-text\">操作类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#configuration\"><span class=\"toc-text\">configuration</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">抛出异常</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D\"><span class=\"toc-text\">问题定位</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">工作原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E5%87%BA%E5%9C%A8%E5%93%AA\"><span class=\"toc-text\">问题出在哪?</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">解决问题</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结","uid":"127dff9b19567a7dce7fda63128b9f65","slug":"JAVA/JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结","date":"2024-04-03T09:43:02.000Z","updated":"2025-09-30T03:26:12.107Z","comments":true,"path":"api/articles/JAVA/JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结.json","keywords":"XuGuangSheng","cover":"/covers/jvmkubernetespodoomkilled.jpg","text":"JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结承接上文在整个JVM进程体系而言，不仅仅只包含了Heap堆内存...","permalink":"/post/JAVA/JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"MaxDirectMemorySize","slug":"MaxDirectMemorySize","count":1,"path":"api/categories/MaxDirectMemorySize.json"},{"name":"JAVA","slug":"MaxDirectMemorySize/JAVA","count":1,"path":"api/categories/MaxDirectMemorySize/JAVA.json"}],"tags":[{"name":"JVM","slug":"JVM","count":6,"path":"api/tags/JVM.json"},{"name":"java","slug":"java","count":2,"path":"api/tags/java.json"},{"name":"direct","slug":"direct","count":1,"path":"api/tags/direct.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Netty ChannelInactive 断链场景分析","uid":"a159c983ebe30de9eaec5108a827bcdd","slug":"JAVA/Netty ChannelInactive 断链场景分析","date":"2024-03-25T16:04:40.000Z","updated":"2025-09-30T03:26:13.974Z","comments":true,"path":"api/articles/JAVA/Netty ChannelInactive 断链场景分析.json","keywords":"XuGuangSheng","cover":"/covers/netty-channelinactive.jpg","text":"Netty ChannelInactive 断链场景分析本文档主要列举离会、关闭进程、断网、重连等会导致sdk与服务端断开连接的场景的设计与实现，并试图解释其原...","permalink":"/post/JAVA/Netty ChannelInactive 断链场景分析","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Netty","slug":"Netty","count":1,"path":"api/categories/Netty.json"},{"name":"JAVA","slug":"Netty/JAVA","count":1,"path":"api/categories/Netty/JAVA.json"}],"tags":[{"name":"netty","slug":"netty","count":1,"path":"api/tags/netty.json"},{"name":"channel","slug":"channel","count":1,"path":"api/tags/channel.json"},{"name":"channelInactive","slug":"channelInactive","count":1,"path":"api/tags/channelInactive.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}