{"title":"java进程cpu占用高如何排查_java web应用服务器cpu90","uid":"7c7426f177489c87044a1c12209cf448","slug":"JAVA/java进程cpu占用高如何排查_java web应用服务器cpu90","date":"2024-05-29T09:25:15.000Z","updated":"2025-09-30T03:26:22.867Z","comments":true,"path":"api/articles/JAVA/java进程cpu占用高如何排查_java web应用服务器cpu90.json","keywords":"XuGuangSheng","cover":"/covers/javacpu-java-webcpu90.jpg","content":"<h1 id=\"java进程cpu占用高如何排查-java-web应用服务器cpu90\"><a href=\"#java进程cpu占用高如何排查-java-web应用服务器cpu90\" class=\"headerlink\" title=\"java进程cpu占用高如何排查_java web应用服务器cpu90\"></a>java进程cpu占用高如何排查_java web应用服务器cpu90</h1><h3 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a><strong>问题：</strong></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>公司参加HW期间，项目两台双活的jboss服务器频繁触发cpu利用率过高告警，cpu利用率长时间在90%以上。</strong> </p></blockquote>\n<h3 id=\"排查思路：\"><a href=\"#排查思路：\" class=\"headerlink\" title=\"排查思路：\"></a><strong>排查思路：</strong></h3><p><strong>第一步：</strong> 在两台Linux服务器上，执行top命令，并按大写P以cpu利用率排序，确定cpu占用最高的进程为 java进程</p>\n<p><strong>那么，java进程cpu占用过高该如何排查呢，我们从两个角度出发：</strong> </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>（1）执行任务的java线程本身存在bug，死循环或者操作本身耗cpu，导致cpu占用过高</p>\n<p>（2）jvm发生频繁gc，导致cpu过高</p></blockquote>\n<p><strong>第二步：</strong> 先排查java任务线程本身，确定什么线程cpu占用过高</p>\n<p>（1）方法一：ps -mp [java进程id] -o THREAD,tid,time | sort -n   找到cpu占用最大的线程id</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210407100513581.png\"></p>\n<p><em><strong>注意</strong>，该方法在生产环境测试，发现无法找到cpu占用高的线程，显示所有线程cpu占用均为0，因此实际排查采用方法二</em></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210407100658287.png\"></p>\n<p>（2）使用top -H -p [java进程id]，找到cpu占用较高的线程id，如下图所示，左边红框标注的PID列为线程id</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210407100752520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p3ZW50YW8wMQ==,size_16,color_FFFFFF,t_70\"></p>\n<p><strong>第三步：</strong> 计算java线程id的16进制值，因为后续用jstack看到的线程快照中，线程id为小写十六进制值</p>\n<p>（1）可百度在线进制转换</p>\n<p>（2）可使用windows自带的计算器，程序员模式，可转换十六进制</p>\n<p>（3）Linux可使用命令：<strong>printf “%x\\n” [线程_id]</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210407101534309.png\"></p>\n<p><strong>第四步：使用命令 jstack [java进程pid] | grep [线程id十六进制值] -A 30</strong>（-A 30表示向下打印30行）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2021040710285629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p3ZW50YW8wMQ==,size_16,color_FFFFFF,t_70\"></p>\n<p><strong>分析上图可知，线程在做正则匹配，查看完整堆栈可定位到具体代码位置，分析后，确定在做url的正则匹配。继续分析其他线程，发现基本都在做url正则匹配。</strong> </p>\n<p><strong>后续分析，则需要结合业务代码分析，正则匹配是否耗时。</strong> </p>\n<p><strong><em>正则分析参考博客：</em></strong><a href=\"https://blog.csdn.net/weixin_33023873/article/details/114740786\">https://blog.csdn.net/weixin_33023873&#x2F;article&#x2F;details&#x2F;114740786</a></p>\n<p><strong>第五步：</strong> 从gc角度出发，是否存在大量gc，首先确定当前内存消耗情况，使用top命令或者查看设备监控管理系统，确定内存利用率达97%：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2021040710273567.png\"></p>\n<p><strong>第六步：</strong> 确认gc次数，使用命令 jstat -gc [java进程ID]：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2021040710434242.png\"></p>\n<p><strong><em>YGC，表示 Young GC，也就是Minor GC，发生在新生代中的GC</em></strong></p>\n<p><strong><em>FGC，表示 Full GC，发生在老年代中的GC</em></strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>_S0C：第一个幸存区的大小<br>S1C：第二个幸存区的大小<br>S0U：第一个幸存区的使用大小<br>S1U：第二个幸存区的使用大小<br>EC：伊甸园区的大小<br>EU：伊甸园区的使用大小<br>OC：老年代大小<br>OU：老年代使用大小<br>MC：方法区大小<br>MU：方法区使用大小<br>CCSC:压缩类空间大小<br>CCSU:压缩类空间使用大小<br>YGCT：年轻代垃圾回收消耗时间<br>FGCT：老年代垃圾回收消耗时间<br>GCT：垃圾回收消耗总时间 _</strong></p>\n<p><strong><em>如何计算gc频率，参考：</em></strong><a href=\"https://blog.csdn.net/qq_18671415/article/details/104446568\">https://blog.csdn.net/qq_18671415&#x2F;article&#x2F;details&#x2F;104446568</a></p></blockquote>\n<p><strong>结合上图可知，程序运行以来共发生7436次YGC，63次FGC，gc次数较多</strong></p>\n<p><strong>基本可以说明存在频繁GC导致cpu占用高的问题</strong></p>\n<p><strong>第七步：</strong> 使用命令dump 内存堆存储快照：<strong>jmap -dump:format&#x3D;b,file&#x3D;&#x2F;tmp&#x2F;my.hprof [java进程id]</strong></p>\n<p><strong>第八步：</strong> 使用内存分析工具，如Eclipse Memory Analyzer等分析<strong>my.hprof</strong>文件，分析内存那块占用大，存在内存泄露，导致空间无法释放。</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a><strong>总结：</strong></h3><p><strong>cpu利用率过高排查，需要从两个角度排查，一是自身任务线程是否存在bug，二是是否内存泄露导致触发频繁gc；然后利用top、jstack、jmap等工具，定位出问题的代码位置，然后针对性分析修改。</strong></p>\n","text":"java进程cpu占用高如何排查_java web应用服务器cpu90问题： 公司参加HW期间，项目两台双活的jboss服务器频繁触发cpu利用率过高告警，cp...","permalink":"/post/JAVA/java进程cpu占用高如何排查_java web应用服务器cpu90","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"cpu","slug":"cpu","count":1,"path":"api/categories/cpu.json"},{"name":"JAVA","slug":"cpu/JAVA","count":1,"path":"api/categories/cpu/JAVA.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"java","slug":"java","count":2,"path":"api/tags/java.json"},{"name":"blog","slug":"blog","count":3,"path":"api/tags/blog.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#java%E8%BF%9B%E7%A8%8Bcpu%E5%8D%A0%E7%94%A8%E9%AB%98%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5-java-web%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8cpu90\"><span class=\"toc-text\">java进程cpu占用高如何排查_java web应用服务器cpu90</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%EF%BC%9A\"><span class=\"toc-text\">问题：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF%EF%BC%9A\"><span class=\"toc-text\">排查思路：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">总结：</span></a></li></ol></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"高校项目汇总","uid":"b7a0ddae62c7a26d383904662692ec9c","slug":"OTHER/高校项目汇总","date":"2024-06-06T23:53:57.000Z","updated":"2025-09-30T03:27:02.398Z","comments":true,"path":"api/articles/OTHER/高校项目汇总.json","keywords":"XuGuangSheng","cover":"/covers/309e2b0f0197.jpg","text":"高校项目汇总【清华大学】 1.学堂在线：https://www.xuetangx.com 2.深言达意：https://www.shenyandayi.com ...","permalink":"/post/OTHER/高校项目汇总","photos":[],"count_time":{"symbolsCount":908,"symbolsTime":"1 mins."},"categories":[{"name":"https","slug":"https","count":12,"path":"api/categories/https.json"},{"name":"OTHER","slug":"https/OTHER","count":2,"path":"api/categories/https/OTHER.json"}],"tags":[{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"www","slug":"www","count":8,"path":"api/tags/www.json"},{"name":"org","slug":"org","count":2,"path":"api/tags/org.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"我在 Elasticsearch 集群内应该设置多少个分片？","uid":"0a458e361f4a92244bc682099842a8db","slug":"MIDDLEWARE/我在 Elasticsearch 集群内应该设置多少个分片？","date":"2024-05-29T09:22:31.000Z","updated":"2025-09-30T03:26:54.328Z","comments":true,"path":"api/articles/MIDDLEWARE/我在 Elasticsearch 集群内应该设置多少个分片？.json","keywords":"XuGuangSheng","cover":"/covers/elasticsearch.jpg","text":"我在 Elasticsearch 集群内应该设置多少个分片？我在 Elasticsearch 集群内应该设置多少个分片？ | Elastic Blog Elas...","permalink":"/post/MIDDLEWARE/我在 Elasticsearch 集群内应该设置多少个分片？","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"Elasticsearch","slug":"Elasticsearch","count":1,"path":"api/categories/Elasticsearch.json"},{"name":"MIDDLEWARE","slug":"Elasticsearch/MIDDLEWARE","count":1,"path":"api/categories/Elasticsearch/MIDDLEWARE.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"elastic","slug":"elastic","count":1,"path":"api/tags/elastic.json"},{"name":"guide","slug":"guide","count":1,"path":"api/tags/guide.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}