{"title":"Spring中classpath的使用问题","uid":"78e24240498cee987d87ef60883b2ac7","slug":"JAVA/Spring中classpath的使用问题","date":"2021-09-07T20:30:06.000Z","updated":"2025-09-30T03:26:21.651Z","comments":true,"path":"api/articles/JAVA/Spring中classpath的使用问题.json","keywords":"XuGuangSheng","cover":"/covers/springclasspath.jpg","content":"<h1 id=\"Spring中classpath的使用问题\"><a href=\"#Spring中classpath的使用问题\" class=\"headerlink\" title=\"Spring中classpath的使用问题\"></a>Spring中classpath的使用问题</h1><p>在 Spring 的配置文件中，经常使用<strong>classpath：xxx.xxx</strong>来读取文件。对于 maven 项目，误区是读取的文件必须在<strong>resources</strong>下，其实并不是。</p>\n<h2 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a><a href=\"#%E5%AE%9E%E9%AA%8C\" title=\"实验\"></a>实验</h2><p>对于 maven 管理的项目，我们分别从三个例子分析，读取的文件位置可以在什么地方。</p>\n<p>配置文件中加入以下配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;txt&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.beans.factory.config.PropertiesFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;location&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath:/txt/readme.txt&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource(name=&quot;txt&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> Properties Properties;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第一种情况（resources-下）\"><a href=\"#第一种情况（resources-下）\" class=\"headerlink\" title=\"第一种情况（resources 下）\"></a><a href=\"#%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%88resources%E4%B8%8B%EF%BC%89\" title=\"第一种情况（resources 下）\"></a>第一种情况（resources 下）</h3><p>在 resources 下，新建文件夹 txt，在 txt 中放入 readme.txt，执行测试代码可以正常输出 txt 中的 readme.txt。</p>\n<h3 id=\"第二种情况（jar-包中）\"><a href=\"#第二种情况（jar-包中）\" class=\"headerlink\" title=\"第二种情况（jar 包中）\"></a><a href=\"#%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%88jar%E5%8C%85%E4%B8%AD%EF%BC%89\" title=\"第二种情况（jar 包中）\"></a>第二种情况（jar 包中）</h3><p>新建项目，文件夹 txt 中放入 readme.txt，打包生成. jar 文件，在测试项目中引入生成的 jar 包，执行测试代码获取到 jar 包中 readme.txt。</p>\n<h3 id=\"第三种情况（resouces-和-jar-中都存在）\"><a href=\"#第三种情况（resouces-和-jar-中都存在）\" class=\"headerlink\" title=\"第三种情况（resouces 和 jar 中都存在）\"></a><a href=\"#%E7%AC%AC%E4%B8%89%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%88resouces%E5%92%8Cjar%E4%B8%AD%E9%83%BD%E5%AD%98%E5%9C%A8%EF%BC%89\" title=\"第三种情况（resouces 和 jar 中都存在）\"></a>第三种情况（resouces 和 jar 中都存在）</h3><p>当 resources 和 jar 包中都有这个文件的时候，默认只读取 resources 下的资源文件。</p>\n<h2 id=\"后记-12-月-4-日补充\"><a href=\"#后记-12-月-4-日补充\" class=\"headerlink\" title=\"后记 (12 月 4 日补充)\"></a><a href=\"#%E5%90%8E%E8%AE%B0-12%E6%9C%884%E6%97%A5%E8%A1%A5%E5%85%85\" title=\"后记 (12 月 4 日补充)\"></a>后记 (12 月 4 日补充)</h2><p>对于不同项目来说，其 classpath 不同，上述结论不适用于所有项目。</p>\n<h3 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"Resource\"></a><a href=\"#Resource\" title=\"Resource\"></a>Resource</h3><p>上述实验用到的<strong>PropertiesFactoryBean</strong>返回<strong>java.util.Properties</strong>，依赖注入时用到的<strong>setlocation(Resource location)<strong>，所以我们需要对</strong>Resource</strong>进行简单的研究。</p>\n<h3 id=\"Resource-接口\"><a href=\"#Resource-接口\" class=\"headerlink\" title=\"Resource 接口\"></a><a href=\"#Resource%E6%8E%A5%E5%8F%A3\" title=\"Resource 接口\"></a>Resource 接口</h3><p>Spring 的 Resource 接口抽象了对低级资源文件的访问，接口定义如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Resource</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">InputStreamSource</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">exists</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isOpen</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    URL <span class=\"title function_\">getURL</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    File <span class=\"title function_\">getFile</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    Resource <span class=\"title function_\">createRelative</span><span class=\"params\">(String relativePath)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">getFilename</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">getDescription</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个接口继承于 InputStreamSource 接口，接口定义如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">InputStreamSource</span> &#123;</span><br><span class=\"line\">    InputStream <span class=\"title function_\">getInputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Resource 接口中的一些重要的方法如下：</p>\n<ul>\n<li><strong>getInputStream()<strong>：定位和打开资源文件，从资源文件中返回</strong>InputStream</strong></li>\n<li><strong>exists()<strong>：返回</strong>boolean</strong>，表示资源是否存在</li>\n<li><strong>isOpen()<strong>：返回</strong>boolean</strong>，如果是<strong>true</strong>，资源就只能被访问一次，且需要被关闭。对于其一般的实现类，返回的是<strong>false</strong>，除了<strong>InputStreamResource</strong></li>\n<li>**getDescription()**：返回对这个资源文件的描述</li>\n</ul>\n<p>其他的方法可以获得一个真正的<strong>URL</strong>对象或者<strong>File</strong>对象，代表资源文件。<br>在 Spring 框架中，当一个资源文件被需要时，会大量地使用<strong>Resource</strong>接口作为参数类型。当然在我们自己的代码中，也可以使用它的实现类获取文件资源，是<strong>URL</strong>更有用的代替。</p>\n<h3 id=\"内置的-Resource-实现类\"><a href=\"#内置的-Resource-实现类\" class=\"headerlink\" title=\"内置的 Resource 实现类\"></a><a href=\"#%E5%86%85%E7%BD%AE%E7%9A%84Resource%E5%AE%9E%E7%8E%B0%E7%B1%BB\" title=\"内置的 Resource 实现类\"></a>内置的 Resource 实现类</h3><ul>\n<li><strong>UrlResource</strong>：包含了<strong>java.net.URL</strong>，可以用 URL 访问对象，如<strong>Files</strong>，<strong>Http</strong>，<strong>Ftp</strong>，一些前缀被使用，用来表名 URL 的类型，如<strong>file:<strong>，</strong>http&amp;#x3A;<strong>，</strong>ftp:</strong></li>\n<li><strong>ClassPathResource</strong>：这个类代表了一个应该从<strong>classpath</strong>获取的资源文件，使用<strong>classloader</strong>，或者<strong>class</strong>来载入资源</li>\n<li>FileSystemResource</li>\n<li>ServletContextResource</li>\n<li>InputStreamResource</li>\n<li>ByteArrayResource</li>\n</ul>\n<p>前两个实现类都可以直接用构造器显式创建，不过大部分情况下，是用 string 表示路径来调用 api 方法（bean 依赖注入），隐式创建，如果前缀是<strong>classpath</strong>，则创建<strong>ClassPathResource</strong>。</p>\n<h3 id=\"ClassPathResource\"><a href=\"#ClassPathResource\" class=\"headerlink\" title=\"ClassPathResource\"></a><a href=\"#ClassPathResource\" title=\"ClassPathResource\"></a>ClassPathResource</h3><p>现在可以知道上述实验是生成了<strong>ClassPathResource</strong>类，再看源码（代码中所用到的 path 为去掉 classpath: 前缀的路径）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ClassPathResource</span><span class=\"params\">(String path)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>(path, (ClassLoader)<span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ClassPathResource</span><span class=\"params\">(String path, ClassLoader classLoader)</span> &#123;</span><br><span class=\"line\">\tAssert.notNull(path, <span class=\"string\">&quot;Path must not be null&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">pathToUse</span> <span class=\"operator\">=</span> StringUtils.cleanPath(path);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pathToUse.startsWith(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">\t  pathToUse = pathToUse.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.path = pathToUse;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.classLoader = (classLoader != <span class=\"literal\">null</span> ? classLoader : ClassUtils.getDefaultClassLoader());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> InputStream <span class=\"title function_\">getInputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    InputStream is;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.clazz != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      is = <span class=\"built_in\">this</span>.clazz.getResourceAsStream(<span class=\"built_in\">this</span>.path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.classLoader != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        is = <span class=\"built_in\">this</span>.classLoader.getResourceAsStream(<span class=\"built_in\">this</span>.path);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        is = ClassLoader.getSystemResourceAsStream(<span class=\"built_in\">this</span>.path);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileNotFoundException</span>(getDescription() + <span class=\"string\">&quot; cannot be opened because it does not exist&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> is;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终调用<strong>java.lang.ClassLoader</strong>类中的<strong>getResource</strong>方法，在 api 中关于查找顺序，有以下的描述</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>This method will first search the parent class loader for the resource; if the parent is null the path of the class loader built-in to the virtual machine is searched. That failing, this method will invoke findResource(String) to find the resource.</p></blockquote>\n<p>此方法首先搜索资源的父类加载器；如果父类加载器为 null，则搜索的路径就是虚拟机的内置类加载器的路径。如果搜索失败，则此方法将调用 findResource(String) 来查找资源。</p>\n","text":"Spring中classpath的使用问题在 Spring 的配置文件中，经常使用classpath：xxx.xxx来读取文件。对于 maven 项目，误区是读...","permalink":"/post/JAVA/Spring中classpath的使用问题","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Resource","slug":"Resource","count":1,"path":"api/categories/Resource.json"},{"name":"JAVA","slug":"Resource/JAVA","count":1,"path":"api/categories/Resource/JAVA.json"}],"tags":[{"name":"jar","slug":"jar","count":1,"path":"api/tags/jar.json"},{"name":"txt","slug":"txt","count":1,"path":"api/tags/txt.json"},{"name":"resources","slug":"resources","count":1,"path":"api/tags/resources.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Spring%E4%B8%ADclasspath%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">Spring中classpath的使用问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C\"><span class=\"toc-text\">实验</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%88resources-%E4%B8%8B%EF%BC%89\"><span class=\"toc-text\">第一种情况（resources 下）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%88jar-%E5%8C%85%E4%B8%AD%EF%BC%89\"><span class=\"toc-text\">第二种情况（jar 包中）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%88resouces-%E5%92%8C-jar-%E4%B8%AD%E9%83%BD%E5%AD%98%E5%9C%A8%EF%BC%89\"><span class=\"toc-text\">第三种情况（resouces 和 jar 中都存在）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%8E%E8%AE%B0-12-%E6%9C%88-4-%E6%97%A5%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">后记 (12 月 4 日补充)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Resource\"><span class=\"toc-text\">Resource</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Resource-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">Resource 接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%AE%E7%9A%84-Resource-%E5%AE%9E%E7%8E%B0%E7%B1%BB\"><span class=\"toc-text\">内置的 Resource 实现类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ClassPathResource\"><span class=\"toc-text\">ClassPathResource</span></a></li></ol></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java线程的六种状态 Thread.State","uid":"e527db9dc4d4819a60eaa7ad7fd37a44","slug":"JAVA/Java线程的六种状态 Thread.State","date":"2021-09-09T09:20:36.000Z","updated":"2025-09-30T03:26:13.201Z","comments":true,"path":"api/articles/JAVA/Java线程的六种状态 Thread.State.json","keywords":"XuGuangSheng","cover":"/covers/java-thread-state.jpg","text":"Java线程的六种状态 Thread.StateThread.State 是 Thread 中的一个内部类，表示了 Thread 的六种状态，还有，这个类是一个...","permalink":"/post/JAVA/Java线程的六种状态 Thread.State","photos":[],"count_time":{"symbolsCount":"7.9k","symbolsTime":"7 mins."},"categories":[{"name":"Thread","slug":"Thread","count":1,"path":"api/categories/Thread.json"},{"name":"JAVA","slug":"Thread/JAVA","count":1,"path":"api/categories/Thread/JAVA.json"}],"tags":[{"name":"代码示例","slug":"代码示例","count":1,"path":"api/tags/代码示例.json"},{"name":"Object","slug":"Object","count":1,"path":"api/tags/Object.json"},{"name":"WAITING","slug":"WAITING","count":1,"path":"api/tags/WAITING.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Linux 快捷键","uid":"bed926b9b5ce2da9bc2fbda11d1273e0","slug":"LINUX/Linux 快捷键","date":"2021-09-06T13:24:10.000Z","updated":"2025-09-30T03:26:33.174Z","comments":true,"path":"api/articles/LINUX/Linux 快捷键.json","keywords":"XuGuangSheng","cover":"/covers/linux.jpg","text":"Linux 快捷键最有用快捷键 Tab 命令或路径的补全键。应该是 Linux 最常用的快捷键，它将节省你 Linux 命令行中的大量时间。只需要输入一个命令，...","permalink":"/post/LINUX/Linux 快捷键","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"Ctrl","slug":"Ctrl","count":1,"path":"api/categories/Ctrl.json"},{"name":"LINUX","slug":"Ctrl/LINUX","count":1,"path":"api/categories/Ctrl/LINUX.json"}],"tags":[{"name":"Alt","slug":"Alt","count":1,"path":"api/tags/Alt.json"},{"name":"Esc","slug":"Esc","count":1,"path":"api/tags/Esc.json"},{"name":"foo","slug":"foo","count":1,"path":"api/tags/foo.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}