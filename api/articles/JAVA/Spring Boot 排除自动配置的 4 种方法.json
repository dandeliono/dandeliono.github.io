{"title":"Spring Boot 排除自动配置的 4 种方法","uid":"a3c579c0425bdc8d839cf9bbfcb91047","slug":"JAVA/Spring Boot 排除自动配置的 4 种方法","date":"2021-08-09T23:05:31.000Z","updated":"2025-09-30T03:26:17.178Z","comments":true,"path":"api/articles/JAVA/Spring Boot 排除自动配置的 4 种方法.json","keywords":"XuGuangSheng","cover":"/covers/spring-boot-4.jpg","content":"<h1 id=\"Spring-Boot-排除自动配置的-4-种方法\"><a href=\"#Spring-Boot-排除自动配置的-4-种方法\" class=\"headerlink\" title=\"Spring Boot 排除自动配置的 4 种方法\"></a>Spring Boot 排除自动配置的 4 种方法</h1><p>Spring Boot 提供的自动配置非常强大，某些情况下，自动配置的功能可能不符合我们的需求，需要我们自定义配置，这个时候就需要排除 &#x2F; 禁用 Spring Boot 某些类的自动化配置了。</p>\n<p>比如：数据源、邮件，这些都是提供了自动配置的，我们需要排除 Spring Boot 的自动化配置，交给我们自己来自定义，该如何做呢？</p>\n<p>今天栈长给你介绍 4 种排除方式，总有一种能帮到你！</p>\n<h4 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法 1\"></a>方法 1</h4><p>使用 <code>@SpringBootApplication</code> 注解的时候，使用 exclude 属性进行排除指定的类：</p>\n<pre><code>@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class, MailSenderAutoConfiguration.class&#125;)\npublic class Application &#123;\n    \n&#125;\n</code></pre>\n<p>自动配置类不在类路径下的时候，使用 excludeName 属性进行排除指定的类名全路径：</p>\n<pre><code>@SpringBootApplication(excludeName = &#123;&quot;org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration&quot;, &quot;org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration&quot;&#125;)\npublic class Application &#123;\n    \n&#125;\n</code></pre>\n<h4 id=\"方法-2\"><a href=\"#方法-2\" class=\"headerlink\" title=\"方法 2\"></a>方法 2</h4><p>单独使用 <code>@EnableAutoConfiguration</code> 注解的时候：</p>\n<pre><code>@...\n@EnableAutoConfiguration\n(exclude = &#123;DataSourceAutoConfiguration.class, MailSenderAutoConfiguration.class&#125;)\npublic class Application &#123;\n    \n&#125;\n</code></pre>\n<p>自动配置类不在类路径下的时候，使用 excludeName 属性进行排除指定的类名全路径：</p>\n<pre><code>@...\n@EnableAutoConfiguration &#123;&quot;org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration&quot;, &quot;org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration&quot;&#125;)\npublic class Application &#123;\n    \n&#125;\n</code></pre>\n<h4 id=\"方法-3\"><a href=\"#方法-3\" class=\"headerlink\" title=\"方法 3\"></a>方法 3</h4><p>使用 Spring Cloud 和 <code>@SpringCloudApplication</code> 注解的时候：</p>\n<pre><code>@...\n@EnableAutoConfiguration\n(exclude = &#123;DataSourceAutoConfiguration.class, MailSenderAutoConfiguration.class&#125;)\n@SpringCloudApplication\npublic class Application &#123;\n    \n&#125;\n</code></pre>\n<p>Spring Cloud 必须建立在 Spring Boot 应用之上，所以这个不用多解释了。</p>\n<h4 id=\"方法-4\"><a href=\"#方法-4\" class=\"headerlink\" title=\"方法 4\"></a>方法 4</h4><p>终极方案，不管是 Spring Boot 还是 Spring Cloud 都可以搞定，在配置文件中指定参数 <code>spring.autoconfigure.exclude</code> 进行排除：</p>\n<pre><code>spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\\\\n    org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration\n</code></pre>\n<p>或者还可以这样写：</p>\n<pre><code>spring.autoconfigure.exclude\\[0\\]\\=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration\nspring.autoconfigure.exclude\\[1\\]\\=org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration\n</code></pre>\n<p>如果你用的是 yaml 配置文件，可以这么写：</p>\n<pre><code>spring:     \n  autoconfigure:\n    exclude:\n      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration\n      - org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration\n</code></pre>\n","text":"Spring Boot 排除自动配置的 4 种方法Spring Boot 提供的自动配置非常强大，某些情况下，自动配置的功能可能不符合我们的需求，需要我们自定义...","permalink":"/post/JAVA/Spring Boot 排除自动配置的 4 种方法","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Spring","slug":"Spring","count":4,"path":"api/categories/Spring.json"},{"name":"JAVA","slug":"Spring/JAVA","count":4,"path":"api/categories/Spring/JAVA.json"}],"tags":[{"name":"Boot","slug":"Boot","count":1,"path":"api/tags/Boot.json"},{"name":"使用","slug":"使用","count":5,"path":"api/tags/使用.json"},{"name":"方法","slug":"方法","count":1,"path":"api/tags/方法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Spring-Boot-%E6%8E%92%E9%99%A4%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%9A%84-4-%E7%A7%8D%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">Spring Boot 排除自动配置的 4 种方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95-1\"><span class=\"toc-text\">方法 1</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95-2\"><span class=\"toc-text\">方法 2</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95-3\"><span class=\"toc-text\">方法 3</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95-4\"><span class=\"toc-text\">方法 4</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java内存访问重排序的研究","uid":"db9816c4607e7d8e795e08923e1430dc","slug":"JAVA/Java内存访问重排序的研究","date":"2021-08-15T23:36:56.000Z","updated":"2025-09-30T03:26:12.671Z","comments":true,"path":"api/articles/JAVA/Java内存访问重排序的研究.json","keywords":"XuGuangSheng","cover":"/covers/java.jpg","text":"Java内存访问重排序的研究什么是重排序请先看这样一段代码： 12345678910111213141516171819202122public class P...","permalink":"/post/JAVA/Java内存访问重排序的研究","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"Java","slug":"Java","count":1,"path":"api/categories/Java.json"},{"name":"JAVA","slug":"Java/JAVA","count":1,"path":"api/categories/Java/JAVA.json"}],"tags":[{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"volatile","slug":"volatile","count":2,"path":"api/tags/volatile.json"},{"name":"before","slug":"before","count":1,"path":"api/tags/before.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java异步编程","uid":"24d9916b82108a815fcb896c7754eb78","slug":"JAVA/Java异步编程","date":"2021-08-08T23:36:51.000Z","updated":"2025-09-30T03:26:12.693Z","comments":true,"path":"api/articles/JAVA/Java异步编程.json","keywords":"XuGuangSheng","cover":"/covers/java.jpg","text":"Java异步编程随着RxJava、Reactor等异步框架的流行，异步编程受到了越来越多的关注，尤其是在 IO 密集型的业务场景中，相比传统的同步开发模式，异步...","permalink":"/post/JAVA/Java异步编程","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"com","slug":"com","count":3,"path":"api/categories/com.json"},{"name":"JAVA","slug":"com/JAVA","count":1,"path":"api/categories/com/JAVA.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"raw","slug":"raw","count":5,"path":"api/tags/raw.json"},{"name":"githubusercontent","slug":"githubusercontent","count":3,"path":"api/tags/githubusercontent.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}