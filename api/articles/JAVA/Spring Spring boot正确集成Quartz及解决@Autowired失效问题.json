{"title":"Spring Spring boot正确集成Quartz及解决Autowired失效问题","uid":"d8866dac3e3d178ff93b0801099e3728","slug":"JAVA/Spring Spring boot正确集成Quartz及解决@Autowired失效问题","date":"2022-10-07T14:04:24.000Z","updated":"2025-09-30T03:26:19.047Z","comments":true,"path":"api/articles/JAVA/Spring Spring boot正确集成Quartz及解决@Autowired失效问题.json","keywords":"XuGuangSheng","cover":"/covers/spring-spring-bootquartz-autowired.jpg","content":"<h1 id=\"Spring-x2F-Spring-boot正确集成Quartz及解决-Autowired失效问题-从此寂静无声-博客园\"><a href=\"#Spring-x2F-Spring-boot正确集成Quartz及解决-Autowired失效问题-从此寂静无声-博客园\" class=\"headerlink\" title=\"Spring&#x2F;Spring boot正确集成Quartz及解决@Autowired失效问题 - 从此寂静无声 - 博客园\"></a>Spring&#x2F;Spring boot正确集成Quartz及解决@Autowired失效问题 - 从此寂静无声 - 博客园</h1><h1 id=\"quartz\"><a href=\"#quartz\" class=\"headerlink\" title=\"quartz\"></a>quartz</h1><p>(1) 项目依赖:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;</span><br><span class=\"line\">    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">&lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;quartz&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n\n<p>(2) 问题代码:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class UnprocessedTaskJob extends QuartzJobBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private TaskMapper taskMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    public UnprocessedTaskJob(TaskMapper taskMapper)&#123;</span><br><span class=\"line\">        this.taskMapper = taskMapper;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private JobDetail generateUnprocessedJobDetail(Task task) &#123;</span><br><span class=\"line\">    JobDataMap jobDataMap = new JobDataMap();</span><br><span class=\"line\">    jobDataMap.put(UnprocessedTaskJob.TASK_ID, task.getId());</span><br><span class=\"line\">    return JobBuilder.newJob(UnprocessedTaskJob.class)</span><br><span class=\"line\">            .withIdentity(UnprocessedTaskJob.UNPROCESSED_TASK_KEY_PREFIX + task.getId(), UnprocessedTaskJob.UNPROCESSED_TASK_JOB_GROUP)</span><br><span class=\"line\">            .usingJobData(jobDataMap)</span><br><span class=\"line\">            .storeDurably()</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>(3) 提炼问题:</p>\n<p>以上代码存在错误的原因是,<code>UnprocessedTaskJob</code>添加<code>@Component</code>注解, 表示其是<code>Spring IOC</code>容器中的<code>单例</code>类.<br>然而<code>Quartz</code>在创建<code>Job</code>是通过相应的<code>Quartz Job Bean</code>的<code>class</code>反射创建相应的<code>Job</code>. 也就是说, 每次创建新的<code>Job</code>时, 都会生成相应的<code>Job</code>实例. 从而, 这与<code>UnprocessedTaskJob</code>是<code>单例</code>相冲突.<br>查看代码提交记录, 原因是当时认为不添加<code>@Component</code>注解, 则无法通过<code>@Autowired</code>引入由<code>Spring IOC</code>托管的<code>taskMapper</code>实例, 即无法实现<code>依赖注入</code>.</p>\n<p>然而令人感到奇怪的是, 当我在开发环境去除了<code>UnprocessedTaskJob</code>的<code>@Component</code>注解之后, 运行程序后发现<code>TaskMapper</code>实例依然可以注入到<code>Job</code>中, 程序正常运行…</p>\n<h2 id=\"Spring-托管-Quartz\"><a href=\"#Spring-托管-Quartz\" class=\"headerlink\" title=\"Spring 托管 Quartz\"></a>Spring 托管 Quartz</h2><h3 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h3><p>网上搜索<code>Spring</code>托管<code>Quartz</code>的文章, 大多数都是<code>Spring MVC</code>项目, 集中于如何解决在<code>Job</code>实现类中通过<code>@Autowired</code>实现<code>Spring</code>的<code>依赖注入</code>.<br>网上大多实现均依赖<code>SpringBeanJobFactory</code>去实现<code>Spring</code>与<code>Quartz</code>的集成.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class SpringBeanJobFactory extends AdaptableJobFactory</span><br><span class=\"line\">        implements ApplicationContextAware, SchedulerContextAware &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class AdaptableJobFactory implements JobFactory &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过上述代码以及注释可以发现:<br>(1) <code>AdaptableJobFactory</code>实现了<code>JobFactory</code>接口, 可以藉此创建标准的<code>Quartz</code>实例 (仅限于<code>Quartz</code> 2.1.4 及以上版本);<br>(2) <code>SpringBeanJobFactory</code>继承于<code>AdaptableJobFactory</code>, 从而实现对<code>Quartz</code>封装实例的属性依赖注入.<br>(3) <code>SpringBeanJobFactory</code>实现了<code>ApplicationContextAware</code>以及<code>SchedulerContextAware</code>接口 (<code>Quartz</code>任务调度上下文), 因此可以在创建<code>Job Bean</code>的时候注入<code>ApplicationContex</code>以及<code>SchedulerContext</code>.</p>\n<p>Tips:<br>以上代码基于<code>Spring</code> 5.1.8 版本.<br>在<code>Spring 4.1.0</code>版本, <code>SpringBeanJobFactory</code>的实现如以下代码所示:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SpringBeanJobFactory extends AdaptableJobFactory</span><br><span class=\"line\">    implements SchedulerContextAware&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此, 在早期的<code>Spring</code>项目中, 需要封装<code>SpringBeanJobFactory</code>并实现<code>ApplicationContextAware</code>接口 (惊不惊喜?).</p>\n<h3 id=\"Spring-老版本解决方案\"><a href=\"#Spring-老版本解决方案\" class=\"headerlink\" title=\"Spring 老版本解决方案\"></a>Spring 老版本解决方案</h3><p>基于老版本<code>Spring</code>给出解决<code>Spring</code>集成<code>Quartz</code>解决方案.<br>解决方案由<a href=\"https://www.jianshu.com/p/d52d62fb2ac6\">第三十九章：基于 SpringBoot &amp; Quartz 完成定时任务分布式单节点持久化</a>提供 (大神的系列文章质量很棒).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class QuartzConfiguration</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public static class AutowiringSpringBeanJobFactory extends SpringBeanJobFactory implements</span><br><span class=\"line\">            ApplicationContextAware &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        private transient AutowireCapableBeanFactory beanFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void setApplicationContext(final ApplicationContext context) &#123;</span><br><span class=\"line\">            beanFactory = context.getAutowireCapableBeanFactory();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected Object createJobInstance(final TriggerFiredBundle bundle) throws Exception &#123;</span><br><span class=\"line\">            final Object job = super.createJobInstance(bundle);</span><br><span class=\"line\">            </span><br><span class=\"line\">            beanFactory.autowireBean(job);</span><br><span class=\"line\">            return job;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JobFactory jobFactory(ApplicationContext applicationContext)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        AutowiringSpringBeanJobFactory jobFactory = new AutowiringSpringBeanJobFactory();</span><br><span class=\"line\">        jobFactory.setApplicationContext(applicationContext);</span><br><span class=\"line\">        return jobFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    @Bean(destroyMethod = &quot;destroy&quot;,autowire = Autowire.NO)</span><br><span class=\"line\">    public SchedulerFactoryBean schedulerFactoryBean(JobFactory jobFactory, DataSource dataSource) throws Exception</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SchedulerFactoryBean schedulerFactoryBean = new SchedulerFactoryBean();</span><br><span class=\"line\">        </span><br><span class=\"line\">        schedulerFactoryBean.setJobFactory(jobFactory);</span><br><span class=\"line\">        </span><br><span class=\"line\">        schedulerFactoryBean.setOverwriteExistingJobs(true);</span><br><span class=\"line\">        </span><br><span class=\"line\">        schedulerFactoryBean.setStartupDelay(2);</span><br><span class=\"line\">        </span><br><span class=\"line\">        schedulerFactoryBean.setAutoStartup(true);</span><br><span class=\"line\">        </span><br><span class=\"line\">        schedulerFactoryBean.setDataSource(dataSource);</span><br><span class=\"line\">        </span><br><span class=\"line\">        schedulerFactoryBean.setApplicationContextSchedulerContextKey(&quot;applicationContext&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        schedulerFactoryBean.setConfigLocation(new ClassPathResource(&quot;/quartz.properties&quot;));</span><br><span class=\"line\">        return schedulerFactoryBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过以上代码, 就实现了由<code>SpringBeanJobFactory</code>的<code>createJobInstance</code>创建<code>Job</code>实例, 并将生成的<code>Job</code>实例交付由<code>AutowireCapableBeanFactory</code>来托管.<br><code>schedulerFactoryBean</code>则设置诸如<code>JobFactory</code>(实际上是<code>AutowiringSpringBeanJobFactory</code>, 内部封装了<code>applicationContext</code>) 以及<code>DataSource</code>(数据源, 如果不设置, 则<code>Quartz</code>默认使用<code>RamJobStore</code>).</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>RamJobStore</code>优点是运行速度快, 缺点则是调度任务无法持久化保存.</p></blockquote>\n<p>因此, 我们可以在定时任务内部使用<code>Spring IOC</code>的<code>@Autowired</code>等注解进行<code>依赖注入</code>.</p>\n<h3 id=\"Spring-新版本解决方案\"><a href=\"#Spring-新版本解决方案\" class=\"headerlink\" title=\"Spring 新版本解决方案\"></a>Spring 新版本解决方案</h3><p>(1) 解释</p>\n<p>如果你使用<code>Spring boot</code>, 并且版本好大于<code>2.0</code>, 则推荐使用<code>spring-boot-starter-quartz</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Auto-configuration support is now include for the Quartz Scheduler. We’ve also added a new spring-boot-starter-quartz starter POM.<br>You can use in-memory JobStores, or a full JDBC-based store. All JobDetail, Calendar and Trigger beans from your Spring application context will be automatically registered with the Scheduler.<br>For more details read the new “Quartz Scheduler” section of the reference documentation.</p></blockquote>\n<p>以上是<code>spring-boot-starter-quartz</code>的介绍, 基于介绍可知, 如果你没有关闭<code>Quartz</code>的自动配置, 则<code>SpringBoot</code>会帮助你完成<code>Scheduler</code>的自动化配置, 诸如<code>JobDetail</code>&#x2F;<code>Calendar</code>&#x2F;<code>Trigger</code>等<code>Bean</code>会被自动注册至<code>Shceduler</code>中. 你可以在<code>QuartzJobBean</code>中自由的使用<code>@Autowired</code>等<code>依赖注入</code>注解.</p>\n<p>其实, 不引入<code>spring-boot-starter-quartz</code>, 而仅仅导入<code>org.quartz-scheduler</code>,<code>Quartz</code>的自动化配置依然会起效 (这就是第一节问题分析中, 去除<code>@Bean</code>注解, 程序依然正常运行原因, 悲剧中万幸).</p>\n<p>(2) 代码分析</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@ConditionalOnClass(&#123; Scheduler.class, SchedulerFactoryBean.class, PlatformTransactionManager.class &#125;)</span><br><span class=\"line\">@EnableConfigurationProperties(QuartzProperties.class)</span><br><span class=\"line\">@AutoConfigureAfter(&#123; DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class &#125;)</span><br><span class=\"line\">public class QuartzAutoConfiguration&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    @ConditionalOnMissingBean</span><br><span class=\"line\">    public SchedulerFactoryBean quartzScheduler() &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        SchedulerFactoryBean schedulerFactoryBean = new SchedulerFactoryBean();</span><br><span class=\"line\">        SpringBeanJobFactory jobFactory = new SpringBeanJobFactory();</span><br><span class=\"line\">        </span><br><span class=\"line\">        jobFactory.setApplicationContext(this.applicationContext);</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        schedulerFactoryBean.setJobFactory(jobFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        if (this.properties.getSchedulerName() != null) &#123;</span><br><span class=\"line\">            schedulerFactoryBean.setSchedulerName(this.properties.getSchedulerName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        schedulerFactoryBean.setAutoStartup(this.properties.isAutoStartup());schedulerFactoryBean.setStartupDelay((int) this.properties.getStartupDelay().getSeconds());</span><br><span class=\"line\">        schedulerFactoryBean.setWaitForJobsToCompleteOnShutdown(this.properties.isWaitForJobsToCompleteOnShutdown());</span><br><span class=\"line\">        schedulerFactoryBean.setOverwriteExistingJobs(this.properties.isOverwriteExistingJobs());</span><br><span class=\"line\">        if (!this.properties.getProperties().isEmpty()) &#123;</span><br><span class=\"line\">            schedulerFactoryBean.setQuartzProperties(asProperties(this.properties.getProperties()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (this.jobDetails != null &amp;&amp; this.jobDetails.length &gt; 0) &#123;</span><br><span class=\"line\">            schedulerFactoryBean.setJobDetails(this.jobDetails);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (this.calendars != null &amp;&amp; !this.calendars.isEmpty()) &#123;</span><br><span class=\"line\">            schedulerFactoryBean.setCalendars(this.calendars);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (this.triggers != null &amp;&amp; this.triggers.length &gt; 0) &#123;</span><br><span class=\"line\">            schedulerFactoryBean.setTriggers(this.triggers);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        customize(schedulerFactoryBean);</span><br><span class=\"line\">        return schedulerFactoryBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Configuration</span><br><span class=\"line\">    @ConditionalOnSingleCandidate(DataSource.class)</span><br><span class=\"line\">    protected static class JdbcStoreTypeConfiguration &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面对<code>SpringBeanJobFactory</code>进行分析, 它是生成<code>Job</code>实例, 以及进行<code>依赖注入</code>操作的关键类.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class SpringBeanJobFactory extends AdaptableJobFactory</span><br><span class=\"line\">        implements ApplicationContextAware, SchedulerContextAware &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Nullable</span><br><span class=\"line\">    private String[] ignoredUnknownProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Nullable</span><br><span class=\"line\">    private ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Nullable</span><br><span class=\"line\">    private SchedulerContext schedulerContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    public void setIgnoredUnknownProperties(String... ignoredUnknownProperties) &#123;</span><br><span class=\"line\">        this.ignoredUnknownProperties = ignoredUnknownProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void setApplicationContext(ApplicationContext applicationContext) &#123;</span><br><span class=\"line\">        this.applicationContext = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void setSchedulerContext(SchedulerContext schedulerContext) &#123;</span><br><span class=\"line\">        this.schedulerContext = schedulerContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        Object job = (this.applicationContext != null ?</span><br><span class=\"line\">                        this.applicationContext.getAutowireCapableBeanFactory().createBean(</span><br><span class=\"line\">                            bundle.getJobDetail().getJobClass(), AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR, false) :</span><br><span class=\"line\">                        super.createJobInstance(bundle));</span><br><span class=\"line\"></span><br><span class=\"line\">        if (isEligibleForPropertyPopulation(job)) &#123;</span><br><span class=\"line\">            BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(job);</span><br><span class=\"line\">            MutablePropertyValues pvs = new MutablePropertyValues();</span><br><span class=\"line\">            if (this.schedulerContext != null) &#123;</span><br><span class=\"line\">                pvs.addPropertyValues(this.schedulerContext);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pvs.addPropertyValues(bundle.getJobDetail().getJobDataMap());</span><br><span class=\"line\">            pvs.addPropertyValues(bundle.getTrigger().getJobDataMap());</span><br><span class=\"line\">            if (this.ignoredUnknownProperties != null) &#123;</span><br><span class=\"line\">                for (String propName : this.ignoredUnknownProperties) &#123;</span><br><span class=\"line\">                    if (pvs.contains(propName) &amp;&amp; !bw.isWritableProperty(propName)) &#123;</span><br><span class=\"line\">                        pvs.removePropertyValue(propName);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                bw.setPropertyValues(pvs);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                bw.setPropertyValues(pvs, true);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return job;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class AdaptableJobFactory implements JobFactory &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        Class&lt;?&gt; jobClass = bundle.getJobDetail().getJobClass();</span><br><span class=\"line\">        return ReflectionUtils.accessibleConstructor(jobClass).newInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此处需要解释下<code>AutowireCapableBeanFactory</code>的作用.<br>项目中, 有部分实现并未与<code>Spring</code>深度集成, 因此其实例并未被<code>Spring</code>容器管理.<br>然而, 出于需要, 这些并未被<code>Spring</code>管理的<code>Bean</code>需要引入<code>Spring</code>容器中的<code>Bean</code>.<br>此时, 就需要通过实现<code>AutowireCapableBeanFactory</code>, 从而让<code>Spring</code>实现依赖注入等功能.</p>\n<p> <a href=\"https://www.cnblogs.com/jason1990/p/11110196.html\">https://www.cnblogs.com/jason1990/p/11110196.html</a></p>\n","text":"Spring/Spring boot正确集成Quartz及解决@Autowired失效问题 - 从此寂静无声 - 博客园quartz(1) 项目依赖: 1234...","permalink":"/post/JAVA/Spring Spring boot正确集成Quartz及解决@Autowired失效问题","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Spring","slug":"Spring","count":4,"path":"api/categories/Spring.json"},{"name":"JAVA","slug":"Spring/JAVA","count":4,"path":"api/categories/Spring/JAVA.json"}],"tags":[{"name":"Quartz","slug":"Quartz","count":1,"path":"api/tags/Quartz.json"},{"name":"Job","slug":"Job","count":1,"path":"api/tags/Job.json"},{"name":"SpringBeanJobFactory","slug":"SpringBeanJobFactory","count":1,"path":"api/tags/SpringBeanJobFactory.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Spring-x2F-Spring-boot%E6%AD%A3%E7%A1%AE%E9%9B%86%E6%88%90Quartz%E5%8F%8A%E8%A7%A3%E5%86%B3-Autowired%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98-%E4%BB%8E%E6%AD%A4%E5%AF%82%E9%9D%99%E6%97%A0%E5%A3%B0-%E5%8D%9A%E5%AE%A2%E5%9B%AD\"><span class=\"toc-text\">Spring&#x2F;Spring boot正确集成Quartz及解决@Autowired失效问题 - 从此寂静无声 - 博客园</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#quartz\"><span class=\"toc-text\">quartz</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Spring-%E6%89%98%E7%AE%A1-Quartz\"><span class=\"toc-text\">Spring 托管 Quartz</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">代码分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Spring-%E8%80%81%E7%89%88%E6%9C%AC%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">Spring 老版本解决方案</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Spring-%E6%96%B0%E7%89%88%E6%9C%AC%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">Spring 新版本解决方案</span></a></li></ol></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"BAT 批处理 基础语法 教程","uid":"1545a0366a689b58c66fbe8604cabd3f","slug":"LINUX/BAT 批处理 基础语法 教程","date":"2022-10-13T13:55:12.000Z","updated":"2025-09-30T03:26:31.008Z","comments":true,"path":"api/articles/LINUX/BAT 批处理 基础语法 教程.json","keywords":"XuGuangSheng","cover":"/covers/bat.jpg","text":"BAT 批处理 基础语法 教程特点 批处理脚本存储在文本文件中，其中包含的命令按顺序依次执行，其功能是为了自动执行重复的命令序列 批处理文件具有特殊的扩展名BA...","permalink":"/post/LINUX/BAT 批处理 基础语法 教程","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[{"name":"bash","slug":"bash","count":2,"path":"api/categories/bash.json"},{"name":"LINUX","slug":"bash/LINUX","count":2,"path":"api/categories/bash/LINUX.json"}],"tags":[{"name":"goto","slug":"goto","count":1,"path":"api/tags/goto.json"},{"name":"语句","slug":"语句","count":1,"path":"api/tags/语句.json"},{"name":"SETLOCAL","slug":"SETLOCAL","count":1,"path":"api/tags/SETLOCAL.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Zookeeper客户端Curator使用详解","uid":"b3c9ac518ccca39bee20ee352e4467cb","slug":"JAVA/Zookeeper客户端Curator使用详解","date":"2022-10-07T14:04:24.000Z","updated":"2025-09-30T03:26:22.151Z","comments":true,"path":"api/articles/JAVA/Zookeeper客户端Curator使用详解.json","keywords":"XuGuangSheng","cover":"/covers/zookeepercurator.jpg","text":"Zookeeper客户端Curator使用详解 - 简书Curator 是 Netflix 公司开源的一套 zookeeper 客户端框架，解决了很多 Zook...","permalink":"/post/JAVA/Zookeeper客户端Curator使用详解","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"Zookeeper","slug":"Zookeeper","count":2,"path":"api/categories/Zookeeper.json"},{"name":"JAVA","slug":"Zookeeper/JAVA","count":2,"path":"api/categories/Zookeeper/JAVA.json"}],"tags":[{"name":"Curator","slug":"Curator","count":2,"path":"api/tags/Curator.json"},{"name":"注意","slug":"注意","count":1,"path":"api/tags/注意.json"},{"name":"Cache","slug":"Cache","count":2,"path":"api/tags/Cache.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}