{"title":"InfluxDB 通识篇","uid":"8cbbd86cd3c93044bc5b65f7c8f71a1c","slug":"JAVA/InfluxDB 通识篇","date":"2021-08-23T15:09:05.000Z","updated":"2025-09-30T03:26:10.401Z","comments":true,"path":"api/articles/JAVA/InfluxDB 通识篇.json","keywords":"XuGuangSheng","cover":"/covers/influxdb.jpg","content":"<h1 id=\"InfluxDB-通识篇\"><a href=\"#InfluxDB-通识篇\" class=\"headerlink\" title=\"InfluxDB 通识篇\"></a>InfluxDB 通识篇</h1><h2 id=\"什么是时序数据库？\"><a href=\"#什么是时序数据库？\" class=\"headerlink\" title=\"什么是时序数据库？\"></a>什么是时序数据库？</h2><p>时序数据库全称时间序列数据库，英文名 Time Series DataBase，缩写 TSDB。</p>\n<p>这种数据库专门用作处理时间序列数据。</p>\n<p>那什么是时间序列数据呢？就是随着时间变化而源源不断产生的数据。</p>\n<p>举个例子，Mac 电脑上的活动监视器就是一种时间序列数据，每隔几秒它都会获取电脑上各个部件最新的数据。</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/c86d3de6b4afc8238f070f958937e33f.webp\"><br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/288f78dbee834e3915cc4d8d63d17be7.webp\"><br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/536638d9bb0495b2bbe442503ec2406e.webp\"><br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/1d0161a8c6a3885804f7ca604a7b1c87.webp\"><br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/fec24f545869ee8182b03e7b8301a446.webp\"></p>\n<h2 id=\"为什么需要时序数据库？\"><a href=\"#为什么需要时序数据库？\" class=\"headerlink\" title=\"为什么需要时序数据库？\"></a>为什么需要时序数据库？</h2><p>随着物联网和大数据时代的到来，全球每天产生的数据量大到令人难以想象。这些数据受到业务场景的限制分为不同的种类，每个种类对存储都有不同的要求。单凭传统的 RDBMS 很难完成各种复杂场景下的数据存储。</p>\n<p>这时我们就需要根据不同的数据特性和业务场景的要求，选择不同的数据库。</p>\n<p>一般选择使用哪个数据库，要从低响应时间（Low Response Time）、高可用性（High Availability）、高并发（High Concurrency）、海量数据（Big Data）和可承担成本（Affordable Cost）五个维度去权衡。</p>\n<p>数据库的种类非常繁多，举几个常见的类型来对比一下各自的特点。</p>\n<p>关系型数据库主流代表有 MySQL、Oracle 等，优点是具有 ACID 的特性，各方面能力都比较均衡。缺点是查询、插入和修改的性能都很一般。</p>\n<p>KV 数据库主流带代表有 Redis、Memcached 等，优点是存储简单、读写性能极高。缺点是存储成本非常高，不适合海量数据存储。</p>\n<p>文档型数据库最流行的是 MongoDB，相比 MySQL，数据结构灵活、更擅长存储海量数据，在海量数据的场景下读写性能很强。缺点是占用空间会很大。</p>\n<p>搜索引擎数据库最流行的是 ElasticSearch，非常擅长全文检索和复杂查询，性能极强，并且天生集群。缺点是写入性能低、字段类型无法修改、硬件资源消耗严重。</p>\n<p>而时序数据库，最初诞生的目的很大程度上是在对标 MongoDB，因为在时序数据库出现之前，存储时序数据这项领域一直被 MongoDB 所占据。</p>\n<p>时序数据库一哥 InfluxDB 的公司 InfluxData，曾在 2018 年发表了一篇关于 <a href=\"https://link.juejin.cn/?target=https://www.influxdata.com/blog/influxdb-is-27x-faster-vs-mongodb-for-time-series-workloads/\" title=\"https&#x3A;//www.influxdata.com/blog/influxdb-is-27x-faster-vs-mongodb-for-time-series-workloads/\">InfluxDB vs MongoDB 的博客</a>。文中使用 InfluxDB v1.7.2 和 MongoDB v4.0.4 做对比，得出 InfluxDB 比 MongoDB 快 2.4 倍的结论。当然可信度有待考量。</p>\n<p>总之，时序数据库的特点是：持续高性能写入、高性能查询、低存储成本、支持海量时间线、弹性。</p>\n<h2 id=\"为什么选择-InfluxDB？\"><a href=\"#为什么选择-InfluxDB？\" class=\"headerlink\" title=\"为什么选择 InfluxDB？\"></a>为什么选择 InfluxDB？</h2><p>虽然时序数据库早在 13 年左右就已经出现，但真正流行的时间非常晚，一直到了 17、18 年才稍微普及，即使到了今天，时序数据库在 DB Engiens 的数据库排名中仍然很落后，最靠前的 InfluxDB 也仅仅排在了 28 位。</p>\n<p>选择 InfluxDB 的原因非常简单，因为它目前是最流行的时序数据库。</p>\n<p>InfluxDB 之所以能够从众多时序数据库中脱颖而出，除了自身强大以外，活跃的社区、合理的商业模式和营销功不可没。</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/41185cd7394cd7f522e9418a53e4a6a5.webp\"></p>\n<p>既然时序数据库很好，为什么排名如此考后？原因是应用场景少，记录运维监控和物联网实时数据是时序数据库的用武之地。而大多数的系统使用 MySQL、MongoDB 和 Redis 这些主流数据库就可以很好地支撑。</p>\n<p>除了 InfluxDB 以外，还有几个比较流行的时序数据库，比如基于 PostgreSQL 的 TimeScaleDB，目前排在 97 位。基于 HBase 的 OpenTSDB，排在 122 位。基于 Cassandra 的 KairosDB，目前排在 201 位。</p>\n<h2 id=\"InfluxDB-简介\"><a href=\"#InfluxDB-简介\" class=\"headerlink\" title=\"InfluxDB 简介\"></a>InfluxDB 简介</h2><p>InfluxDB 是 InfluxData 公司在 2013 年开源的数据库，是为了存储物联网设备、DevOps 运维这类场景下大量带有时间戳数据而设计的。</p>\n<p>InfluxDB 源码采用 Go 语言编写，在 InfluxDB OSS 的版本中，部署方式上又分为两个版本，单机版和集群版。单机版开源，目前在 <a href=\"https://link.juejin.cn/?target=https://github.com/influxdata/influxdb\" title=\"https&#x3A;//github.com/influxdata/influxdb\">github</a> 上有 21k+ star。集群版闭源，走商业路线。</p>\n<p>个人认为单机版的 InfluxDB 比较鸡肋。因为一旦选择使 InfluxDB，那么数据量肯定一定达到了某个很高的程度。这时候必须使用集群版。而在数据量不够高的情况下，InfluxDB 并不会比 MongoDB 或者 ElasticSearch 有更明显的优势。</p>\n<p>考虑到学习成本、简化上手难度，InfluxDB1.x 采用了一种类似 SQL 的 InfluxQL 语言来操作数据。2019 年 1 月推出了 InfluxDB2.0 alpha 版本。受到 2018 年最流行的脚本语言 JavaScript 影响，推出了全新的查询语言 Flux。并在 2020 年底推出了 InfluxDB 2.0 正式版本，该版本又分为两个系列，云模式的 InfluxDB Cloud 和独立部署的 InfluxDB OSS。</p>\n<p>Flux 不是绑定在 InfluxDB 上的查询脚本语言，它是一个独立的项目，图灵完备，便于处理数据，也可以用作 InfluxDB 以外。</p>\n<p>由于 InfluxDB 的流行程度不高，而且 2.0 版本也推出不久，所以在国内搜索到的很多 InfluxDB 相关资料都是在讲述 1.x 的内容，参考意义不大，目前最好的学习路径是 <a href=\"https://link.juejin.cn/?target=https://docs.influxdata.com/influxdb/v2.0/\" title=\"https&#x3A;//docs.influxdata.com/influxdb/v2.0/\">InfluxDB 官方文档</a>。本文内容全部基于 InfluxDB OSS 2.0 版本。</p>\n<h2 id=\"TICK-与-InfluxDB\"><a href=\"#TICK-与-InfluxDB\" class=\"headerlink\" title=\"TICK 与 InfluxDB\"></a>TICK 与 InfluxDB</h2><p>TICK 是 InfluxData 平台的组件集的缩写，分别代表四大组件：Telegraf（数据收集器）、InfluxDB（时序数据库）、Chronograf（可视化 UI）和 Kapacitor（监控服务）。</p>\n<p>InfluxData 公司的愿景是帮助人们处理时序数据，仅依靠一个时序数据库是不够的，还需要解决因为时序数据自身产生的一系列问题。因此 InfluxData 决定设计并开发 TICK。</p>\n<p>在早期 Kapacitor 的脚本语言是 TICKScript，但是并不好用，遭受到社区中很多人的诟病。因此出现了 Flux。Flux 的功能性比 InfluxQL 更强，比 TICKScript 更易用。</p>\n<p>随着 Flux 的逐渐发展，InfluxDB 的能力范围也在逐步扩展。</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>InfluxDB 的数据模型概念和 RDBMS 稍有不同，下面是和 MySQL 的概念对照表。</p>\n<table>\n<thead>\n<tr>\n<th>InfluxDB</th>\n<th>MySQL</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Buckets</td>\n<td>Database</td>\n<td>数据桶 - 数据库，即存储数据的命名空间。</td>\n</tr>\n<tr>\n<td>Measurement</td>\n<td>Table</td>\n<td>度量 - 表。</td>\n</tr>\n<tr>\n<td>Point</td>\n<td>Record</td>\n<td>数据点 - 记录。</td>\n</tr>\n<tr>\n<td>Field</td>\n<td>Field</td>\n<td>未设置索引的字段。</td>\n</tr>\n<tr>\n<td>Tag</td>\n<td>Index</td>\n<td>设置了索引的字段。</td>\n</tr>\n</tbody></table>\n<h2 id=\"安装部署\"><a href=\"#安装部署\" class=\"headerlink\" title=\"安装部署\"></a>安装部署</h2><p>安装方式有好几种，这里介绍如何使用 Docker 进行安装。</p>\n<p>首先从 Docker 拉取镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull influxdb</span><br></pre></td></tr></table></figure>\n\n<p>然后快速创建容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name influxdb -p 8086:8086 influxdb</span><br></pre></td></tr></table></figure>\n\n<p>启动成功后访问 <a href=\"https://link.juejin.cn/?target=http://127.0.0.1:8086/\" title=\"http&#x3A;//127.0.0.1:8086/\">http://127.0.0.1:8086/</a> 就可以看到页面了。</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/cf1a4ddb81787718ab1713bf849e54ae.webp\"></p>\n<p>之后填写初始化信息，完成初始化。</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/2b4d3c589720b09081d3911d1da62744.webp\"></p>\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><h3 id=\"将数据持久化到-Docker-容器之外\"><a href=\"#将数据持久化到-Docker-容器之外\" class=\"headerlink\" title=\"将数据持久化到 Docker 容器之外\"></a>将数据持久化到 Docker 容器之外</h3><p>首先创建一个目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> influxdb_docker_data_volume &amp;&amp; <span class=\"built_in\">cd</span> <span class=\"variable\">$_</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个目录下运行启动命令，并添加 volume 参数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name influxdb -p 8086:8086 --volume <span class=\"variable\">$PWD</span>:/root/.influxdbv2 influxdb</span><br></pre></td></tr></table></figure>\n\n<p>这样容器中的数据就会存储到当前目录。</p>\n<h2 id=\"写数据\"><a href=\"#写数据\" class=\"headerlink\" title=\"写数据\"></a>写数据</h2><p>InfluxDB 写数据的方式有两种，一是使用不同语言的客户端库，二是使用 Telegraf 插件。</p>\n<p>这里介绍使用客户端库来进行写数据。</p>\n<p>在 Load Data 页面上，有 Sources 标签，其中又有 Client Libraries 和 Telegraf Plugins 两个分类。</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/0d86bc4fabec6cf2917523d99dfa2ff4.webp\"></p>\n<p>这里选择 Go 语言，点开后会有示例代码。</p>\n<p>写数据最少需要 4 个基础信息。</p>\n<ol>\n<li>组织 ID（org ID）</li>\n<li>存储桶（bucket ID）</li>\n<li>身份认证令牌（authentication token）</li>\n<li>数据库地址（InfluxDB URL）</li>\n</ol>\n<p>写数据的数据格式有两种，第一种是 InfluxDB Line Protocol 格式。</p>\n<h3 id=\"InfluxDB-Line-Protocol\"><a href=\"#InfluxDB-Line-Protocol\" class=\"headerlink\" title=\"InfluxDB Line Protocol\"></a>InfluxDB Line Protocol</h3><p>完整代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tinfluxdb2 <span class=\"string\">&quot;github.com/influxdata/influxdb-client-go/v2&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> token = <span class=\"string\">&quot;vgqVL_p-qbSpQO0DIzU4QcRgaEyQM-wcEmK2cOkDUHAiQYwLOba7qEZr9Xcq3YvZ2UH-ovu9RG7XkMwChO6eeA==&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> bucket = <span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> org = <span class=\"string\">&quot;lzq&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tclient := influxdb2.NewClient(<span class=\"string\">&quot;http://127.0.0.1:8086&quot;</span>, token)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> client.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\twriteAPI := client.WriteAPI(org, bucket)</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\twriteAPI.WriteRecord(fmt.Sprintf(<span class=\"string\">&quot;stat,unit=temperature avg=%f,max=%f&quot;</span>, <span class=\"number\">23.5</span>, <span class=\"number\">45.0</span>))</span><br><span class=\"line\">\twriteAPI.WriteRecord(fmt.Sprintf(<span class=\"string\">&quot;stat,unit=temperature avg=%f,max=%f&quot;</span>, <span class=\"number\">22.5</span>, <span class=\"number\">45.0</span>))</span><br><span class=\"line\">\t</span><br><span class=\"line\">\twriteAPI.Flush()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>InfluxDB Line Protocol 本质上是一个具有约定格式的字符串。通过这个字符串形成一个记录，这个字符串必须包含一个测量（measurement）和一组字段（field），同时可能会包含 N 个标签（tag）和一个时间戳（timestamp）。</p>\n<p>如果不附带时间戳，那么 InfluxDB 会使用其主机的当前系统时间，单位默认为纳秒。</p>\n<h3 id=\"Data-Point\"><a href=\"#Data-Point\" class=\"headerlink\" title=\"Data Point\"></a>Data Point</h3><p>另一种是数据点（Data Point）的数据格式。</p>\n<p>这种格式又分为两种风格的 API。</p>\n<p>第一种风格是一个函数，传递 N 个参数。</p>\n<p>示例代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p := influxdb2.NewPoint(<span class=\"string\">&quot;stat&quot;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;unit&quot;</span>: <span class=\"string\">&quot;temperature&quot;</span>&#125;,</span><br><span class=\"line\">  <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">&quot;avg&quot;</span>: <span class=\"number\">24.5</span>, <span class=\"string\">&quot;max&quot;</span>: <span class=\"number\">45</span>&#125;,</span><br><span class=\"line\">  time.Now())</span><br><span class=\"line\"></span><br><span class=\"line\">writeAPI.WritePoint(p)</span><br></pre></td></tr></table></figure>\n\n<p>第二种风格是类似 DSL 的 API。</p>\n<p>代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">p = influxdb2.NewPointWithMeasurement(<span class=\"string\">&quot;stat&quot;</span>).</span><br><span class=\"line\">  AddTag(<span class=\"string\">&quot;unit&quot;</span>, <span class=\"string\">&quot;temperature&quot;</span>).</span><br><span class=\"line\">  AddField(<span class=\"string\">&quot;avg&quot;</span>, <span class=\"number\">23.2</span>).</span><br><span class=\"line\">  AddField(<span class=\"string\">&quot;max&quot;</span>, <span class=\"number\">45</span>).</span><br><span class=\"line\">  SetTime(time.Now())</span><br><span class=\"line\"></span><br><span class=\"line\">writeAPI.WritePoint(p)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删数据\"><a href=\"#删数据\" class=\"headerlink\" title=\"删数据\"></a>删数据</h2><p>InfluxDB 不支持修改数据，但是可以删除数据。</p>\n<p>删数据的方式有两种，一种是 InfluxDB CLI，一种是 HTTP API。</p>\n<h3 id=\"InfluxDB-CLI\"><a href=\"#InfluxDB-CLI\" class=\"headerlink\" title=\"InfluxDB CLI\"></a>InfluxDB CLI</h3><p>运行 <code>influx delete</code>  命令即可删除数据，需要附带参数。</p>\n<ol>\n<li>bucket：指定某个数据桶。</li>\n<li>start 和 stop：指定删除的数据时间戳范围。</li>\n<li>predicate：可选项，删除符合某种条件的数据。</li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">influx delete --bucket example-bucket \\</span><br><span class=\"line\">  --start 2020-03-01T00:00:00Z \\</span><br><span class=\"line\">  --stop 2020-11-14T00:00:00Z</span><br></pre></td></tr></table></figure>\n\n<p>带有条件的示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">influx delete --bucket example-bucket \\</span><br><span class=\"line\">  --start <span class=\"string\">&#x27;1970-01-01T00:00:00Z&#x27;</span> \\</span><br><span class=\"line\">  --stop $(<span class=\"built_in\">date</span> +<span class=\"string\">&quot;%Y-%m-%dT%H:%M:%SZ&quot;</span>) \\</span><br><span class=\"line\">  --predicate <span class=\"string\">&#x27;_measurement=&quot;example-measurement&quot; AND exampleTag=&quot;exampleTagValue&quot;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HTTP-API\"><a href=\"#HTTP-API\" class=\"headerlink\" title=\"HTTP API\"></a>HTTP API</h3><p>和 CLI 的方式类似。调用 <code>api/v2/delete</code>  即可。</p>\n<p>需要符合以下条件。</p>\n<ol>\n<li>请求方式（Method）：POST。</li>\n<li>请求头（Headers）：带有 <code>Authorization</code>  用于验证身份，请求格式为 <code>application/json</code>。</li>\n<li>查询参数（QueryParams）：org&#x2F;orgID，指定组织。bucket&#x2F;bucketID，指定数据桶。</li>\n<li>请求体（Body）：start：表示开始时间，stop：表示结束时间，predicate（可选）：表示删除条件。</li>\n</ol>\n<p>请求示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --request POST http://localhost:8086/api/v2/delete/?org=example-org&amp;bucket=example-bucket \\</span><br><span class=\"line\">  --header <span class=\"string\">&#x27;Authorization: Token &lt;YOURAUTHTOKEN&gt;&#x27;</span> \\</span><br><span class=\"line\">  --header <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">  --data <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;start&quot;: &quot;2020-03-01T00:00:00Z&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;stop&quot;: &quot;2020-11-14T00:00:00Z&quot;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>我不建议在 InfluxDB 中对数据进行删除操作。</p>\n<p>时序数据库更适合存储完整的原始数据，而经过分析和提炼后的价值更高的数据，可以存入 MongoDB 或者 MySQL。</p>\n<h2 id=\"读数据\"><a href=\"#读数据\" class=\"headerlink\" title=\"读数据\"></a>读数据</h2><p>InfluxDB 读数据的方式有 5 种。</p>\n<ol>\n<li>InfluxDB UI</li>\n<li>InfluxDB HTTP API</li>\n<li>Flux REPL</li>\n<li>InfluxDB CLI</li>\n<li>Client libraries</li>\n</ol>\n<p>这里介绍第 5 种，使用客户端的方式来读取数据。</p>\n<p>下面是代码演示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client := influxdb2.NewClient(url, token)</span><br><span class=\"line\"><span class=\"keyword\">defer</span> client.Close()</span><br><span class=\"line\">query := fmt.Sprintf(<span class=\"string\">&quot;from(bucket:\\&quot;%v\\&quot;)|&gt; range(start: -1h) |&gt; filter(fn: (r) =&gt; r._measurement == \\&quot;stat\\&quot;)&quot;</span>, bucket)</span><br><span class=\"line\"></span><br><span class=\"line\">queryAPI := client.QueryAPI(org)</span><br><span class=\"line\"></span><br><span class=\"line\">result, err := queryAPI.Query(context.Background(), query)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> result.Next() &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> result.TableChanged() &#123;</span><br><span class=\"line\">            fmt.Printf(<span class=\"string\">&quot;table: %s\\n&quot;</span>, result.TableMetadata().String())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">&quot;value: %v\\n&quot;</span>, result.Record().Value())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> result.Err() != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">&quot;query parsing error: %\\n&quot;</span>, result.Err().Error())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中关键的是第 3 行名为 query 的字符串变量，它是使用 flux 语法编写的一段脚本。</p>\n<pre><code>from(bucket:&quot;test&quot;)\n  |&gt; range(start: -1h)\n  |&gt; filter(fn: (r) =&gt; r._measurement == &quot;stat&quot;)\n复制代码\n</code></pre>\n<p><code>from</code>  表示从哪个数据源检索数据。</p>\n<p><code>range</code>  表示根据时间范围过滤数据。start: -1 表示当前时间减掉 1 个小时。</p>\n<p><code>filter</code>  表示自定义过滤条件，其中 fn 是一个函数，在函数内定义规则，语法和 JavaScript 中 Array 的 filter 函数极其类似。</p>\n<p><code>|&gt;</code>  表示管道前移符，将数据通过管道的形式传递到下一个操作中。</p>\n<p> <a href=\"https://juejin.cn/post/6947575345570643981\">https://juejin.cn/post/6947575345570643981</a></p>\n","text":"InfluxDB 通识篇什么是时序数据库？时序数据库全称时间序列数据库，英文名 Time Series DataBase，缩写 TSDB。 这种数据库专门用作处...","permalink":"/post/JAVA/InfluxDB 通识篇","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[{"name":"InfluxDB","slug":"InfluxDB","count":1,"path":"api/categories/InfluxDB.json"},{"name":"JAVA","slug":"InfluxDB/JAVA","count":1,"path":"api/categories/InfluxDB/JAVA.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"raw","slug":"raw","count":5,"path":"api/tags/raw.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#InfluxDB-%E9%80%9A%E8%AF%86%E7%AF%87\"><span class=\"toc-text\">InfluxDB 通识篇</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%9F\"><span class=\"toc-text\">什么是时序数据库？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%9F\"><span class=\"toc-text\">为什么需要时序数据库？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9-InfluxDB%EF%BC%9F\"><span class=\"toc-text\">为什么选择 InfluxDB？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#InfluxDB-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">InfluxDB 简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TICK-%E4%B8%8E-InfluxDB\"><span class=\"toc-text\">TICK 与 InfluxDB</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">基本概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">安装部署</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">基本配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%86%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E5%88%B0-Docker-%E5%AE%B9%E5%99%A8%E4%B9%8B%E5%A4%96\"><span class=\"toc-text\">将数据持久化到 Docker 容器之外</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%99%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">写数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#InfluxDB-Line-Protocol\"><span class=\"toc-text\">InfluxDB Line Protocol</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Data-Point\"><span class=\"toc-text\">Data Point</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A0%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">删数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#InfluxDB-CLI\"><span class=\"toc-text\">InfluxDB CLI</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HTTP-API\"><span class=\"toc-text\">HTTP API</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">读数据</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"top linux下的任务管理器","uid":"549d64a763c7476fdfa760218054955e","slug":"LINUX/top linux下的任务管理器","date":"2021-08-23T17:12:55.000Z","updated":"2025-09-30T03:26:40.185Z","comments":true,"path":"api/articles/LINUX/top linux下的任务管理器.json","keywords":"XuGuangSheng","cover":"/covers/top-linux.jpg","text":"top linux下的任务管理器Linux Tools Quick Tutorial top 命令是 Linux 下常用的性能分析工具，能够实时显示系统中各个进...","permalink":"/post/LINUX/top linux下的任务管理器","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"top","slug":"top","count":1,"path":"api/categories/top.json"},{"name":"LINUX","slug":"top/LINUX","count":1,"path":"api/categories/top/LINUX.json"}],"tags":[{"name":"CPU","slug":"CPU","count":3,"path":"api/tags/CPU.json"},{"name":"total","slug":"total","count":2,"path":"api/tags/total.json"},{"name":"Cpu","slug":"Cpu","count":1,"path":"api/tags/Cpu.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"async-profiler","uid":"142536715563d02ed2a04093bf771493","slug":"JAVA/async-profiler","date":"2021-08-17T15:15:33.000Z","updated":"2025-09-30T03:26:22.625Z","comments":true,"path":"api/articles/JAVA/async-profiler.json","keywords":"XuGuangSheng","cover":"/covers/async-profiler.jpg","text":"async-profiler​简介async-profiler 是一款采集分析 java 性能的工具，翻译一下 github 上的项目介绍： ❝ async-p...","permalink":"/post/JAVA/async-profiler","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"profiler","slug":"profiler","count":1,"path":"api/categories/profiler.json"},{"name":"JAVA","slug":"profiler/JAVA","count":1,"path":"api/categories/profiler/JAVA.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"cpu","slug":"cpu","count":1,"path":"api/tags/cpu.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}