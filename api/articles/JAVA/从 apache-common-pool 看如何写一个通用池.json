{"title":"从 apache-common-pool 看如何写一个通用池","uid":"a3ec52c6805d10835480c023a68f988e","slug":"JAVA/从 apache-common-pool 看如何写一个通用池","date":"2023-11-16T11:44:17.000Z","updated":"2025-09-30T03:26:24.369Z","comments":true,"path":"api/articles/JAVA/从 apache-common-pool 看如何写一个通用池.json","keywords":"XuGuangSheng","cover":"/covers/apache-common-pool.jpg","content":"<h1 id=\"从-apache-common-pool-看如何写一个通用池\"><a href=\"#从-apache-common-pool-看如何写一个通用池\" class=\"headerlink\" title=\"从 apache-common-pool 看如何写一个通用池\"></a>从 apache-common-pool 看如何写一个通用池</h1><p>对象的创建和销毁在一定程度上会消耗系统的资源，虽然 jvm 的性能在近几年已经得到了很大的提高，对于多数对象来说，没有必要利用对象池技术来进行对象的创建和管理。但是对于有些对象来说，其创建的代价还是比较昂贵的，比如线程、tcp 连接、数据库连接等对象。对于那些创建耗时较长，或者资源占用较多的对象，比如网络连接，线程之类的资源，通常使用池化来管理这些对象，从而达到提高性能的目的。</p>\n<p>apache-common-pool 提供了一个通用的对象池技术的实现。可以很方便的基于它来实现自己的对象池。比如 DBCP 和 Jedis 他们的内部对象池的实现就是依赖于 apache-common-pool (本文分析的是 apache common pool2)。</p>\n<h2 id=\"组件分析\"><a href=\"#组件分析\" class=\"headerlink\" title=\"组件分析\"></a><a href=\"#%E7%BB%84%E4%BB%B6%E5%88%86%E6%9E%90\"></a>组件分析</h2><p>先来看看 apache-common-pool 的组成结构:</p>\n<ul>\n<li>PooledObjectFactory|KeyedPooledObjectFactory: 池化对象工厂，负责对 PooledOjbect 的创建，状态验证，销毁，钝化，激活工作。</li>\n<li>PooledObject: 池化对象，这个就是前面所说需要池化的资源，被池化的对象可以抽离出共有属性，如，创建时间，状态，最近一次使用时间等。</li>\n<li>ObjectPool|KeyedObjectPool: 对象池，它是负责和对象使用者直接打交道的，对使用者提供获取对象，返还对象接口。</li>\n</ul>\n<h2 id=\"池化对象工厂\"><a href=\"#池化对象工厂\" class=\"headerlink\" title=\"池化对象工厂\"></a><a href=\"#%E6%B1%A0%E5%8C%96%E5%AF%B9%E8%B1%A1%E5%B7%A5%E5%8E%82\"></a>池化对象工厂</h2><h3 id=\"PooledObjectFactory\"><a href=\"#PooledObjectFactory\" class=\"headerlink\" title=\"PooledObjectFactory\"></a><a href=\"#pooledobjectfactory\"></a>PooledObjectFactory</h3><p>PooledObjectFactory 是一个池化对象工厂接口，定义了生成对象、激活对象、钝化对象、销毁对象的方法，其方法和继承关系如下图：</p>\n<p><a href=\"https://www.victorchu.info/posts/185faec8/PooledObjectFactory.svg\" title=\"PooledObjectFactory\"><img src=\"https://www.victorchu.info/posts/185faec8/PooledObjectFactory.svg\">\n</a></p>\n<p><a href=\"https://www.victorchu.info/posts/185faec8/PooledObjectFactory.svg\" title=\"PooledObjectFactory\">PooledObjectFactory</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PooledObjectFactory</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  PooledObject&lt;T&gt; <span class=\"title function_\">makeObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">destroyObject</span><span class=\"params\">(PooledObject&lt;T&gt; p)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"type\">boolean</span> <span class=\"title function_\">validateObject</span><span class=\"params\">(PooledObject&lt;T&gt; p)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">activateObject</span><span class=\"params\">(PooledObject&lt;T&gt; p)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">passivateObject</span><span class=\"params\">(PooledObject&lt;T&gt; p)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从类图中可以看到 PooledObjectFactory 有两个实现类:</p>\n<ul>\n<li><code>BasePooledObjectFactory&lt;T&gt;</code></li>\n<li><code>SynchronizedPooledObjectFactory&lt;T&gt;</code></li>\n</ul>\n<p><code>BasePooledObjectFactory&lt;T&gt;</code> 是有个抽象类，提供了两个抽象方法:</p>\n<ul>\n<li><code>public abstract T create() throws Exception;</code>: 用来创建泛型实例</li>\n<li><code>public abstract PooledObject&lt;T&gt; wrap(T obj);</code>: 用来将泛型实例包装为池化对象</li>\n</ul>\n<p><code>BasePooledObjectFactory&lt;T&gt;</code> 的继承方法基本是空实现或默认实现，除了 <code>makeObject</code> 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> PooledObject&lt;T&gt; <span class=\"title function_\">makeObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> wrap(create());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面来看看 <code>SynchronizedPooledObjectFactory&lt;T&gt;</code>, 这是一个基于装饰器模式设计的同步对象工厂，可以看到内部存在两个属性，一个是可重入读写锁的写锁，一个是对象工厂的实例。所有继承方法都进行了锁的功能扩展，例如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> PooledObject&lt;T&gt; <span class=\"title function_\">makeObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">  writeLock.lock(); </span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> factory.makeObject();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    writeLock.unlock();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"KeyedPooledObjectFactory\"><a href=\"#KeyedPooledObjectFactory\" class=\"headerlink\" title=\"KeyedPooledObjectFactory\"></a><a href=\"#keyedpooledobjectfactory\"></a>KeyedPooledObjectFactory</h3><p>KeyedPooledObjectFactory 也是一个池化对象工厂接口，和 PooledObjectFactory 相比，特点是可以通过 key 来查找池化对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">KeyedPooledObjectFactory</span>&lt;K, V&gt; &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  PooledObject&lt;V&gt; <span class=\"title function_\">makeObject</span><span class=\"params\">(K key)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">destroyObject</span><span class=\"params\">(K key, PooledObject&lt;V&gt; p)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"type\">boolean</span> <span class=\"title function_\">validateObject</span><span class=\"params\">(K key, PooledObject&lt;V&gt; p)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">activateObject</span><span class=\"params\">(K key, PooledObject&lt;V&gt; p)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">passivateObject</span><span class=\"params\">(K key, PooledObject&lt;V&gt; p)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.victorchu.info/posts/185faec8/KeyedPooledObjectFactory.svg\" title=\"KeyedPooledObjectFactory\"><img src=\"https://www.victorchu.info/posts/185faec8/KeyedPooledObjectFactory.svg\">\n</a></p>\n<p><a href=\"https://www.victorchu.info/posts/185faec8/KeyedPooledObjectFactory.svg\" title=\"KeyedPooledObjectFactory\">KeyedPooledObjectFactory</a></p>\n<p>从类图中可以看到 KeyedPooledObjectFactory 也有两个实现类:</p>\n<ul>\n<li><code>BaseKeyedPooledObjectFactory&lt;K, V&gt;</code></li>\n<li><code>SynchronizedKeyedPooledObjectFactory&lt;K, V&gt;</code></li>\n</ul>\n<p>这两个实现类的特点和 PooledObjectFactory 的两个实现类类似，此处就不多说了。</p>\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a><a href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"></a>生命周期</h3><p>当通过对象工厂创建对象时:</p>\n<ul>\n<li>每当需要新实例时，都会调用 <code>makeObject()</code>。</li>\n<li>在从池中借用之前已钝化的实例时都会调用 <code>activateObject()</code>。</li>\n<li>在激活的实例上调用 <code>validateObject</code>，以确保它们可以从池中借用；在归还池的实例钝化之前调用 <code>validateObject</code>.<code>validateObject</code> 只会在已被激活的实例上使用。</li>\n<li>当每个实例返回池时，会调用 <code>passivateObject</code>。</li>\n<li>当从池中 “删除” 时，会在每个实例上调用 destroyObject</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>PooledObjectFactory 必须是线程安全的。ObjectPool 唯一的承诺是，对象的同一个实例不会一次传递给 PoolableObjectFactory 的多个方法。</p></blockquote>\n<h2 id=\"池化对象\"><a href=\"#池化对象\" class=\"headerlink\" title=\"池化对象\"></a><a href=\"#%E6%B1%A0%E5%8C%96%E5%AF%B9%E8%B1%A1\"></a>池化对象</h2><p>池化对象是对象池中对象的包装类，用于记录对象池需要的额外信息，例如状态，时间等。</p>\n<h3 id=\"PooledObject\"><a href=\"#PooledObject\" class=\"headerlink\" title=\"PooledObject\"></a><a href=\"#pooledobject\"></a>PooledObject</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PooledObject</span>&lt;T&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">Comparable</span>&lt;PooledObject&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    T <span class=\"title function_\">getObject</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"title function_\">getCreateTime</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"title function_\">getActiveTimeMillis</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"title function_\">getIdleTimeMillis</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"title function_\">getLastBorrowTime</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"title function_\">getLastReturnTime</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"title function_\">getLastUsedTime</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(PooledObject&lt;T&gt; other)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object obj)</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    String <span class=\"title function_\">toString</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">startEvictionTest</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">endEvictionTest</span><span class=\"params\">(Deque&lt;PooledObject&lt;T&gt;&gt; idleQueue)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">allocate</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">deallocate</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">invalidate</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">setLogAbandoned</span><span class=\"params\">(<span class=\"type\">boolean</span> logAbandoned)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">use</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">printStackTrace</span><span class=\"params\">(PrintWriter writer)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    PooledObjectState <span class=\"title function_\">getState</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">markAbandoned</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">markReturning</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.victorchu.info/posts/185faec8/PooledObject.svg\"><img src=\"https://www.victorchu.info/posts/185faec8/PooledObject.svg\">\n</a></p>\n<h3 id=\"DefaultPooledObject\"><a href=\"#DefaultPooledObject\" class=\"headerlink\" title=\"DefaultPooledObject\"></a><a href=\"#defaultpooledobject\"></a>DefaultPooledObject</h3><p>从上面的类图中我们可以看到 DefaultPooledObject 实现了 PooledObject 接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DefaultPooledObject</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">PooledObject</span>&lt;T&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> T object;</span><br><span class=\"line\"><span class=\"meta\">@GuardedBy(&quot;this&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">PooledObjectState</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> PooledObjectState.IDLE;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">createTime</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">long</span> <span class=\"variable\">lastBorrowTime</span> <span class=\"operator\">=</span> createTime;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">long</span> <span class=\"variable\">lastUseTime</span> <span class=\"operator\">=</span> createTime;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">long</span> <span class=\"variable\">lastReturnTime</span> <span class=\"operator\">=</span> createTime;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">boolean</span> <span class=\"variable\">logAbandoned</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">CallStack</span> <span class=\"variable\">borrowedBy</span> <span class=\"operator\">=</span> NoOpCallStack.INSTANCE;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">CallStack</span> <span class=\"variable\">usedBy</span> <span class=\"operator\">=</span> NoOpCallStack.INSTANCE;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">long</span> <span class=\"variable\">borrowedCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DefaultPooledObject 被设计为线程安全的类。可以看到 属性上都有 volatile 修饰，涉及到修改属性的方法，在方法上都添加了对象级的 synchronize 锁。注意到有 3 个属性没有 volatile 修饰，其中 createTime 和 object 对于实例来说是不变的，一旦赋值，不会修改，所以不需要同步处理，state 则是在每处读写的地方都加了对象锁。PooledSoftReference 是对 DefaultPooledObject 的扩展，用于包装软引用。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>CallStack 用于记录和打印调用堆栈。</p></blockquote>\n<h3 id=\"PooledObject-的状态流转\"><a href=\"#PooledObject-的状态流转\" class=\"headerlink\" title=\"PooledObject 的状态流转\"></a><a href=\"#pooledobject-%E7%9A%84%E7%8A%B6%E6%80%81%E6%B5%81%E8%BD%AC\"></a>PooledObject 的状态流转</h3><p>PooledObject 有下面几个状态，(在 PooledObjectState 中定义):</p>\n<ul>\n<li>IDLE: 空闲状态，在空闲队列中。</li>\n<li>ALLOCATED: 使用中</li>\n<li>EVICTION: 正在进行驱逐检查，在空闲队列中。</li>\n<li>EVICTION_RETURN_TO_HEAD: 正在进行驱逐检查时，试图分配该对象，从空闲队列中去除，由于正在检查，分配失败，当通过空闲检查后，重新放回到空闲队列头部。</li>\n<li>VALIDATION: 验证状态，在空闲队列中。</li>\n<li>VALIDATION_PREALLOCATED: 验证时试图分配，验证完后分配。</li>\n<li>VALIDATION_RETURN_TO_HEAD: 驱逐检查后正在验证，验证完后，放入空闲队列头部。</li>\n<li>INVALID: 无效，将会 &#x2F; 已被销毁。</li>\n<li>ABANDONED: 抛弃状态，即将无效。</li>\n<li>RETURNING: 返回到池中。</li>\n</ul>\n<p><a href=\"https://www.victorchu.info/posts/185faec8/PooledObjectState.svg\" title=\"PooledObjectState\"><img src=\"https://www.victorchu.info/posts/185faec8/PooledObjectState.svg\">\n</a></p>\n<p><a href=\"https://www.victorchu.info/posts/185faec8/PooledObjectState.svg\" title=\"PooledObjectState\">PooledObjectState</a></p>\n<h2 id=\"对象池\"><a href=\"#对象池\" class=\"headerlink\" title=\"对象池\"></a><a href=\"#%E5%AF%B9%E8%B1%A1%E6%B1%A0\"></a>对象池</h2><h3 id=\"ObjectPool\"><a href=\"#ObjectPool\" class=\"headerlink\" title=\"ObjectPool\"></a><a href=\"#objectpool\"></a>ObjectPool</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ObjectPool</span>&lt;T&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">Closeable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    T <span class=\"title function_\">borrowObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception, NoSuchElementException, IllegalStateException;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">returnObject</span><span class=\"params\">(T obj)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">invalidateObject</span><span class=\"params\">(T obj)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">addObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception, IllegalStateException ,UnsupportedOperationException;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">getNumIdle</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">getNumActive</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">clear</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception, UnsupportedOperationException;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ObjectPool 是一个简单的对象池接口。下面是一个简单的使用示例:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    pool.addObject();</span><br><span class=\"line\">    </span><br><span class=\"line\">    obj = pool.borrowObject();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        pool.invalidateObject(obj);</span><br><span class=\"line\">        </span><br><span class=\"line\">        obj = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"literal\">null</span> != obj) &#123;</span><br><span class=\"line\">            pool.returnObject(obj);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ObjectPool 有几个实现类。下面来看看它们:</p>\n<h3 id=\"ProxiedObjectPool\"><a href=\"#ProxiedObjectPool\" class=\"headerlink\" title=\"ProxiedObjectPool\"></a><a href=\"#proxiedobjectpool\"></a>ProxiedObjectPool</h3><p>ProxiedObjectPool 实现了代理模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxiedObjectPool</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">ObjectPool</span>&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ObjectPool&lt;T&gt; pool;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ProxySource&lt;T&gt; proxySource;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ProxiedObjectPool</span><span class=\"params\">(<span class=\"keyword\">final</span> ObjectPool&lt;T&gt; pool, <span class=\"keyword\">final</span> ProxySource&lt;T&gt; proxySource)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pool = pool;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.proxySource = proxySource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">borrowObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception, NoSuchElementException, IllegalStateException &#123;</span><br><span class=\"line\">        UsageTracking&lt;T&gt; usageTracking = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pool <span class=\"keyword\">instanceof</span> UsageTracking) &#123;</span><br><span class=\"line\">            usageTracking = (UsageTracking&lt;T&gt;) pool;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">T</span> <span class=\"variable\">pooledObject</span> <span class=\"operator\">=</span> pool.borrowObject();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">T</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> proxySource.createProxy(pooledObject, usageTracking);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">returnObject</span><span class=\"params\">(<span class=\"keyword\">final</span> T proxy)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">T</span> <span class=\"variable\">pooledObject</span> <span class=\"operator\">=</span> proxySource.resolveProxy(proxy);</span><br><span class=\"line\">        pool.returnObject(pooledObject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">invalidateObject</span><span class=\"params\">(<span class=\"keyword\">final</span> T proxy)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">T</span> <span class=\"variable\">pooledObject</span> <span class=\"operator\">=</span> proxySource.resolveProxy(proxy);</span><br><span class=\"line\">        pool.invalidateObject(pooledObject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从源码可以看到，ProxiedObjectPool 通过 ProxySource 实现对内部的 ObjectPool 的动态代理，可以给对象添加一些额外的信息，实现更好的控制。</p>\n<p>包内还提供了 ProxySource 的 JDK 和 cglib 的实现，详细代码可以看 JdkProxySource 和 CglibProxySource。</p>\n<h3 id=\"ErodingObjectPool\"><a href=\"#ErodingObjectPool\" class=\"headerlink\" title=\"ErodingObjectPool\"></a><a href=\"#erodingobjectpool\"></a>ErodingObjectPool</h3><p>ErodingObjectPool 提供了一个基于时间和空闲对象数判断的动态收缩的对象池 (漏池)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ObjectPool&lt;T&gt; pool;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ErodingFactor factor;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ErodingObjectPool</span><span class=\"params\">(<span class=\"keyword\">final</span> ObjectPool&lt;T&gt; pool, <span class=\"keyword\">final</span> <span class=\"type\">float</span> factor)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.pool = pool;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.factor = <span class=\"keyword\">new</span> <span class=\"title class_\">ErodingFactor</span>(factor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">returnObject</span><span class=\"params\">(<span class=\"keyword\">final</span> T obj)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">discard</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (pool) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (factor.getNextShrink() &lt; now) &#123; </span><br><span class=\"line\">                                            </span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">numIdle</span> <span class=\"operator\">=</span> pool.getNumIdle();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numIdle &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                discard = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            factor.update(now, numIdle);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (discard) &#123;</span><br><span class=\"line\">            pool.invalidateObject(obj);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            pool.returnObject(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Exception e) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ErodingFactor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> factor;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> <span class=\"type\">long</span> nextShrink;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> idleHighWaterMark;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ErodingFactor</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">float</span> factor)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.factor = factor;</span><br><span class=\"line\">    nextShrink = System.currentTimeMillis() + (<span class=\"type\">long</span>) (<span class=\"number\">900000</span> * factor);</span><br><span class=\"line\">    </span><br><span class=\"line\">     idleHighWaterMark = <span class=\"number\">1</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">long</span> now, <span class=\"keyword\">final</span> <span class=\"type\">int</span> numIdle)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">idle</span> <span class=\"operator\">=</span> Math.max(<span class=\"number\">0</span>, numIdle);</span><br><span class=\"line\">     idleHighWaterMark = Math.max(idle, idleHighWaterMark);</span><br><span class=\"line\">     <span class=\"keyword\">final</span> <span class=\"type\">float</span> <span class=\"variable\">maxInterval</span> <span class=\"operator\">=</span> <span class=\"number\">15f</span>;</span><br><span class=\"line\">     <span class=\"keyword\">final</span> <span class=\"type\">float</span> <span class=\"variable\">minutes</span> <span class=\"operator\">=</span> maxInterval +</span><br><span class=\"line\">             ((<span class=\"number\">1f</span> - maxInterval) / idleHighWaterMark) * idle;</span><br><span class=\"line\">     nextShrink = now + (<span class=\"type\">long</span>) (minutes * <span class=\"number\">60000f</span> * factor);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">getNextShrink</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> nextShrink;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据上面的源码，可以看到在向池中返回对象时，会进行判断，此时可能返回对象或把对象设为无效。而判断条件是传入的 factor 和 空闲对象数 numIdle。nextShrink 的动态变化 (可以在 ErodingFactor 的 update 方法中看到)，从而实现对象池的动态收缩。</p>\n<h3 id=\"SynchronizedObjectPool\"><a href=\"#SynchronizedObjectPool\" class=\"headerlink\" title=\"SynchronizedObjectPool\"></a><a href=\"#synchronizedobjectpool\"></a>SynchronizedObjectPool</h3><p>SynchronizedObjectPool 是基于装饰器模式设计的。通过内置的 ReentrantReadWriteLock 装饰了 pool 的各个方法，实现了具有读写锁的线程安全的对象池。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SynchronizedObjectPool</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">ObjectPool</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">ReentrantReadWriteLock</span> <span class=\"variable\">readWriteLock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantReadWriteLock</span>();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ObjectPool&lt;T&gt; pool;</span><br><span class=\"line\">    </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SoftReferenceObjectPool\"><a href=\"#SoftReferenceObjectPool\" class=\"headerlink\" title=\"SoftReferenceObjectPool\"></a><a href=\"#softreferenceobjectpool\"></a>SoftReferenceObjectPool</h3><p>SoftReferenceObjectPool 管理的对象的软引用，，SoftReferenceObjectPool 是线程安全的。SoftReferenceObjectPool 继承自 BaseObjectPool，BaseObjectPool 是一个抽象类，方法大多是空实现或是空实现。下面我们来看看 SoftReferenceObjectPool 的内容。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SoftReferenceObjectPool</span>&lt;T&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseObjectPool</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PooledObjectFactory&lt;T&gt; factory;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReferenceQueue&lt;T&gt; refQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">ReferenceQueue</span>&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">numActive</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"variable\">destroyCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"variable\">createCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> LinkedBlockingDeque&lt;PooledSoftReference&lt;T&gt;&gt; idleReferences =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingDeque</span>&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;PooledSoftReference&lt;T&gt;&gt; allReferences =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    assertOpen();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (factory == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;Cannot add objects without a factory.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">T</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> factory.makeObject().getObject();</span><br><span class=\"line\">    createCount++;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">final</span> PooledSoftReference&lt;T&gt; ref = <span class=\"keyword\">new</span> <span class=\"title class_\">PooledSoftReference</span>&lt;&gt;(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">SoftReference</span>&lt;&gt;(obj, refQueue));</span><br><span class=\"line\">    allReferences.add(ref);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">success</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!factory.validateObject(ref)) &#123;</span><br><span class=\"line\">        success = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        factory.passivateObject(ref);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"variable\">shouldDestroy</span> <span class=\"operator\">=</span> !success;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">        idleReferences.add(ref);</span><br><span class=\"line\">        notifyAll(); </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (shouldDestroy) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            destroy(ref);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Exception e) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">(<span class=\"keyword\">final</span> PooledSoftReference&lt;T&gt; toDestroy)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    toDestroy.invalidate();</span><br><span class=\"line\">    idleReferences.remove(toDestroy);</span><br><span class=\"line\">    allReferences.remove(toDestroy);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        factory.destroyObject(toDestroy);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        destroyCount++;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        toDestroy.getReference().clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其他方法都较简单，这里就不赘述了。</p>\n<h2 id=\"GenericObjectPool-详解\"><a href=\"#GenericObjectPool-详解\" class=\"headerlink\" title=\"GenericObjectPool 详解\"></a><a href=\"#genericobjectpool%E8%AF%A6%E8%A7%A3\"></a>GenericObjectPool 详解</h2><p>GenericObjectPool 是最常用的对象池，继承自抽象类 BaseGenericObjectPool，提供了一些可配置的对象池功能，GenericObjectPool 被设计为线程安全。</p>\n<h3 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a><a href=\"#config\"></a>config</h3><table>\n<thead>\n<tr>\n<th>配置</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>maxTotal</td>\n<td>8</td>\n<td>池中最多可用的实例个数</td>\n</tr>\n<tr>\n<td>maxIdle</td>\n<td>8</td>\n<td>池中最大空闲的个数</td>\n</tr>\n<tr>\n<td>minIdle</td>\n<td>0</td>\n<td>池中最少空闲的个数</td>\n</tr>\n<tr>\n<td>lifo</td>\n<td>true</td>\n<td>是否 LIFO，后进先出</td>\n</tr>\n<tr>\n<td>fairness</td>\n<td>false</td>\n<td>等待线程拿空闲连接的方式，为 true 是先进先出的方式获取空闲对象</td>\n</tr>\n<tr>\n<td>maxWaitMillis</td>\n<td>-1</td>\n<td>当连接池资源耗尽时，调用者最大阻塞的时间，超时将跑出异常，单位：毫秒数。默认为 - 1 时表示永不超时.</td>\n</tr>\n<tr>\n<td>evictorShutdownTimeoutMillis</td>\n<td><code>10L * 1000L</code></td>\n<td>驱逐者线程 shutdown 的等待时间</td>\n</tr>\n<tr>\n<td>minEvictableIdleTimeMillis</td>\n<td><code>1000L * 60L * 30L</code></td>\n<td>对象空闲的最小时间，达到此值后空闲对象将可能会被移除，单位毫秒。负值表示不移除</td>\n</tr>\n<tr>\n<td>softMinEvictableIdleTimeMillis</td>\n<td><code>1000L * 60L * 30L</code></td>\n<td>对象空闲的最小时间，达到此值后空闲对象将可能会被移除，但是会保留 minIdle 个空闲对象，单位毫秒。若 minEvictableIdleTimeMillis 为正数，那么该配置会被覆盖</td>\n</tr>\n<tr>\n<td>numTestsPerEvictionRun</td>\n<td>3</td>\n<td>对于驱逐者线程而言，每次检测的链接资源的个数。如果 numTestsPerEvictionRun&gt;&#x3D;0, 每次检查 numTestsPerEvictionRun 和空闲对象数的较小值，否则，返回 <code>Math.ceil(idleObjects.size() /Math.abs((double) numTestsPerEvictionRun))</code></td>\n</tr>\n<tr>\n<td>evictionPolicy</td>\n<td>null</td>\n<td>驱逐者线程驱逐策略，2.6 版本提供</td>\n</tr>\n<tr>\n<td>evictionPolicyClassName</td>\n<td><code>DefaultEvictionPolicy.class.getName()</code></td>\n<td>驱逐者线程驱逐策略，2.6 之前版本提供</td>\n</tr>\n<tr>\n<td>testOnCreate</td>\n<td>false</td>\n<td>创建对象时，是否使用 validateObject 验证</td>\n</tr>\n<tr>\n<td>testOnBorrow</td>\n<td>false</td>\n<td>借出对象时，是否使用 validateObject 验证</td>\n</tr>\n<tr>\n<td>testOnReturn</td>\n<td>false</td>\n<td>归还对象时，是否使用 validateObject 验证</td>\n</tr>\n<tr>\n<td>testWhileIdle</td>\n<td>false</td>\n<td>空闲对象在驱逐者线程检查后，是否使用 validateObject 验证</td>\n</tr>\n<tr>\n<td>timeBetweenEvictionRunsMillis</td>\n<td>-1L</td>\n<td>驱逐者检测线程检测的周期，毫秒数。如果为负值，表示不运行.</td>\n</tr>\n<tr>\n<td>blockWhenExhausted</td>\n<td>true</td>\n<td>当池中 active 数量达到阀值时，是否阻塞 borrowObject。</td>\n</tr>\n</tbody></table>\n<h3 id=\"创建对象池\"><a href=\"#创建对象池\" class=\"headerlink\" title=\"创建对象池\"></a><a href=\"#%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%B1%A0\"></a>创建对象池</h3><p>对象池的构造方法接受参数，对象工厂和对象池配置。在构造器中会初始化空闲对象容器 idleObjects 和所有对象容器 allObjects。此外，还可以设置 AbandonedConfig，用于_丢弃借出，但是长时间未使用的对象_。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;IdentityWrapper&lt;T&gt;, PooledObject&lt;T&gt;&gt; allObjects =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class=\"line\">idleObjects = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingDeque</span>&lt;&gt;(config.getFairness());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象租借\"><a href=\"#对象租借\" class=\"headerlink\" title=\"对象租借\"></a><a href=\"#%E5%AF%B9%E8%B1%A1%E7%A7%9F%E5%80%9F\"></a>对象租借</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> T <span class=\"title function_\">borrowObject</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">long</span> borrowMaxWaitMillis)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    assertOpen();</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">AbandonedConfig</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.abandonedConfig;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ac != <span class=\"literal\">null</span> &amp;&amp; ac.getRemoveAbandonedOnBorrow() &amp;&amp;</span><br><span class=\"line\">        (getNumIdle() &lt; <span class=\"number\">2</span>) &amp;&amp;(getNumActive() &gt; getMaxTotal() - <span class=\"number\">3</span>) ) &#123;</span><br><span class=\"line\">        removeAbandoned(ac);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    PooledObject&lt;T&gt; p = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"variable\">blockWhenExhausted</span> <span class=\"operator\">=</span> getBlockWhenExhausted();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> create;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">waitTime</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        create = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        p = idleObjects.pollFirst();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            p = create();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                create = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (blockWhenExhausted) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (borrowMaxWaitMillis &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    p = idleObjects.takeFirst();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    p = idleObjects.pollFirst(borrowMaxWaitMillis,TimeUnit.MILLISECONDS);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoSuchElementException</span>(<span class=\"string\">&quot;Timeout waiting for idle object&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoSuchElementException</span>(<span class=\"string\">&quot;Pool exhausted&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!p.allocate()) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            p = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                factory.activateObject(p);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Exception e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    destroy(p);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Exception e1) &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                p = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (create) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"type\">NoSuchElementException</span> <span class=\"variable\">nsee</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoSuchElementException</span>(<span class=\"string\">&quot;Unable to activate object&quot;</span>);</span><br><span class=\"line\">                    nsee.initCause(e);</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> nsee;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p != <span class=\"literal\">null</span> &amp;&amp; (getTestOnBorrow() || create &amp;&amp; getTestOnCreate())) &#123;</span><br><span class=\"line\">                <span class=\"type\">boolean</span> <span class=\"variable\">validate</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"type\">Throwable</span> <span class=\"variable\">validationThrowable</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    validate = factory.validateObject(p);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Throwable t) &#123;</span><br><span class=\"line\">                    PoolUtils.checkRethrow(t);</span><br><span class=\"line\">                    validationThrowable = t;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!validate) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        destroy(p);</span><br><span class=\"line\">                        destroyedByBorrowValidationCount.incrementAndGet();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Exception e) &#123;</span><br><span class=\"line\">                        </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    p = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (create) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">final</span> <span class=\"type\">NoSuchElementException</span> <span class=\"variable\">nsee</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoSuchElementException</span>(<span class=\"string\">&quot;Unable to validate object&quot;</span>);</span><br><span class=\"line\">                        nsee.initCause(validationThrowable);</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> nsee;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    updateStatsBorrow(p, System.currentTimeMillis() - waitTime);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p.getObject();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象归还\"><a href=\"#对象归还\" class=\"headerlink\" title=\"对象归还\"></a><a href=\"#%E5%AF%B9%E8%B1%A1%E5%BD%92%E8%BF%98\"></a>对象归还</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">returnObject</span><span class=\"params\">(<span class=\"keyword\">final</span> T obj)</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">final</span> PooledObject&lt;T&gt; p = allObjects.get(<span class=\"keyword\">new</span> <span class=\"title class_\">IdentityWrapper</span>&lt;&gt;(obj));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isAbandonedConfig()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;Returned object not currently part of this pool&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    markReturningState(p);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">activeTime</span> <span class=\"operator\">=</span> p.getActiveTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getTestOnReturn() &amp;&amp; !factory.validateObject(p)) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            destroy(p);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Exception e) &#123;</span><br><span class=\"line\">            swallowException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            ensureIdle(<span class=\"number\">1</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Exception e) &#123;</span><br><span class=\"line\">            swallowException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        updateStatsReturn(activeTime);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        factory.passivateObject(p);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Exception e1) &#123;</span><br><span class=\"line\">        swallowException(e1);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            destroy(p);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Exception e) &#123;</span><br><span class=\"line\">            swallowException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            ensureIdle(<span class=\"number\">1</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Exception e) &#123;</span><br><span class=\"line\">            swallowException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        updateStatsReturn(activeTime);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!p.deallocate()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(</span><br><span class=\"line\">                <span class=\"string\">&quot;Object has already been returned to this pool or is invalid&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">maxIdleSave</span> <span class=\"operator\">=</span> getMaxIdle();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isClosed() || maxIdleSave &gt; -<span class=\"number\">1</span> &amp;&amp; maxIdleSave &lt;= idleObjects.size()) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            destroy(p);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Exception e) &#123;</span><br><span class=\"line\">            swallowException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getLifo()) &#123;</span><br><span class=\"line\">            idleObjects.addFirst(p);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            idleObjects.addLast(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isClosed()) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    updateStatsReturn(activeTime);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"evictor-检查\"><a href=\"#evictor-检查\" class=\"headerlink\" title=\"evictor 检查\"></a><a href=\"#evictor-%E6%A3%80%E6%9F%A5\"></a>evictor 检查</h3><h4 id=\"启动-evictor-入口\"><a href=\"#启动-evictor-入口\" class=\"headerlink\" title=\"启动 evictor 入口\"></a><a href=\"#%E5%90%AF%E5%8A%A8evictor%E5%85%A5%E5%8F%A3\"></a>启动 evictor 入口</h4><p>启动 “空闲对象的驱逐者线程” 的入口是：<code>BaseGenericObjectPool.setTimeBetweenEvictionRunsMillis</code> 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTimeBetweenEvictionRunsMillis</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">long</span> timeBetweenEvictionRunsMillis)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;</span><br><span class=\"line\">    startEvictor(timeBetweenEvictionRunsMillis);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a><a href=\"#%E5%90%AF%E5%8A%A8\"></a>启动</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startEvictor</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">long</span> delay)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (evictionLock) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != evictor) &#123; </span><br><span class=\"line\">            EvictionTimer.cancel(evictor, evictorShutdownTimeoutMillis, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">            evictor = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            evictionIterator = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (delay &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            evictor = <span class=\"keyword\">new</span> <span class=\"title class_\">Evictor</span>();</span><br><span class=\"line\">            EvictionTimer.schedule(evictor, delay, delay);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">schedule</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"keyword\">final</span> BaseGenericObjectPool&lt;?&gt;.Evictor task, <span class=\"keyword\">final</span> <span class=\"type\">long</span> delay, <span class=\"keyword\">final</span> <span class=\"type\">long</span> period)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == executor) &#123;</span><br><span class=\"line\">        executor = <span class=\"keyword\">new</span> <span class=\"title class_\">ScheduledThreadPoolExecutor</span>(<span class=\"number\">1</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">EvictorThreadFactory</span>());</span><br><span class=\"line\">        executor.setRemoveOnCancelPolicy(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ScheduledFuture&lt;?&gt; scheduledFuture =</span><br><span class=\"line\">            executor.scheduleWithFixedDelay(task, delay, period, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">    task.setScheduledFuture(scheduledFuture);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"驱逐者实现\"><a href=\"#驱逐者实现\" class=\"headerlink\" title=\"驱逐者实现\"></a><a href=\"#%E9%A9%B1%E9%80%90%E8%80%85%E5%AE%9E%E7%8E%B0\"></a>驱逐者实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Evictor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">ClassLoader</span> <span class=\"variable\">savedClassLoader</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (factoryClassLoader != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">ClassLoader</span> <span class=\"variable\">cl</span> <span class=\"operator\">=</span> factoryClassLoader.get();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cl == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    </span><br><span class=\"line\">                    </span><br><span class=\"line\">                    cancel();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Thread.currentThread().setContextClassLoader(cl);</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                evict();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(<span class=\"keyword\">final</span> Exception e) &#123;</span><br><span class=\"line\">                swallowException(e);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(<span class=\"keyword\">final</span> OutOfMemoryError oome) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                oome.printStackTrace(System.err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ensureMinIdle();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Exception e) &#123;</span><br><span class=\"line\">                swallowException(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            Thread.currentThread().setContextClassLoader(savedClassLoader);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"evictor-方法\"><a href=\"#evictor-方法\" class=\"headerlink\" title=\"evictor 方法\"></a><a href=\"#evictor%E6%96%B9%E6%B3%95\"></a>evictor 方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">evict</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    assertOpen();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idleObjects.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        PooledObject&lt;T&gt; underTest = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">final</span> EvictionPolicy&lt;T&gt; evictionPolicy = getEvictionPolicy();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (evictionLock) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">EvictionConfig</span> <span class=\"variable\">evictionConfig</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EvictionConfig</span>(</span><br><span class=\"line\">                    getMinEvictableIdleTimeMillis(),</span><br><span class=\"line\">                    getSoftMinEvictableIdleTimeMillis(),</span><br><span class=\"line\">                    getMinIdle());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"variable\">testWhileIdle</span> <span class=\"operator\">=</span> getTestWhileIdle();</span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, m = getNumTests(); i &lt; m; i++) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (evictionIterator == <span class=\"literal\">null</span> || !evictionIterator.hasNext()) &#123;</span><br><span class=\"line\">                    evictionIterator = <span class=\"keyword\">new</span> <span class=\"title class_\">EvictionIterator</span>(idleObjects);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!evictionIterator.hasNext()) &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    underTest = evictionIterator.next();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> NoSuchElementException nsee) &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    </span><br><span class=\"line\">                    i--;</span><br><span class=\"line\">                    evictionIterator = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!underTest.startEvictionTest()) &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    </span><br><span class=\"line\">                    i--;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"type\">boolean</span> evict;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    evict = evictionPolicy.evict(evictionConfig, underTest,</span><br><span class=\"line\">                            idleObjects.size());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Throwable t) &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    </span><br><span class=\"line\">                    PoolUtils.checkRethrow(t);</span><br><span class=\"line\">                    swallowException(<span class=\"keyword\">new</span> <span class=\"title class_\">Exception</span>(t));</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    evict = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (evict) &#123;</span><br><span class=\"line\">                     </span><br><span class=\"line\">                    destroy(underTest);</span><br><span class=\"line\">                    destroyedByEvictorCount.incrementAndGet();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (testWhileIdle) &#123;</span><br><span class=\"line\">                        <span class=\"type\">boolean</span> <span class=\"variable\">active</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            </span><br><span class=\"line\">                            factory.activateObject(underTest);</span><br><span class=\"line\">                            active = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Exception e) &#123;</span><br><span class=\"line\">                            destroy(underTest);</span><br><span class=\"line\">                            destroyedByEvictorCount.incrementAndGet();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (active) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (!factory.validateObject(underTest)) &#123;</span><br><span class=\"line\">                                </span><br><span class=\"line\">                                destroy(underTest);</span><br><span class=\"line\">                                destroyedByEvictorCount.incrementAndGet();</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                    </span><br><span class=\"line\">                                    factory.passivateObject(underTest);</span><br><span class=\"line\">                                &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Exception e) &#123;</span><br><span class=\"line\">                                    destroy(underTest);</span><br><span class=\"line\">                                    destroyedByEvictorCount.incrementAndGet();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                     </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!underTest.endEvictionTest(idleObjects)) &#123;</span><br><span class=\"line\">                        </span><br><span class=\"line\">                        </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">AbandonedConfig</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.abandonedConfig;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ac != <span class=\"literal\">null</span> &amp;&amp; ac.getRemoveAbandonedOnMaintenance()) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        removeAbandoned(ac);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"驱逐策略\"><a href=\"#驱逐策略\" class=\"headerlink\" title=\"驱逐策略\"></a><a href=\"#%E9%A9%B1%E9%80%90%E7%AD%96%E7%95%A5\"></a>驱逐策略</h4><p>在 evict () 方法中最后对象是否要被驱逐是调用了 evictionPolicy.evict () 的方法来判断的，commons-pool 提供的驱逐策略如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DefaultEvictionPolicy</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">EvictionPolicy</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">evict</span><span class=\"params\">(EvictionConfig config, PooledObject&lt;T&gt; underTest,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"type\">int</span> idleCount)</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((config.getIdleSoftEvictTime() &lt; underTest.getIdleTimeMillis() &amp;&amp;</span><br><span class=\"line\">                config.getMinIdle() &lt; idleCount) ||</span><br><span class=\"line\">                config.getIdleEvictTime() &lt; underTest.getIdleTimeMillis()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>驱逐策略是支持自定义的，这里使用的是设计模式中的策略模式，我们只要实现 EvictionPolicy 接口，然后调用 setEvictionPolicy () 方法既可以更换驱逐策略.</p>\n","text":"从 apache-common-pool 看如何写一个通用池对象的创建和销毁在一定程度上会消耗系统的资源，虽然 jvm 的性能在近几年已经得到了很大的提高，对于...","permalink":"/post/JAVA/从 apache-common-pool 看如何写一个通用池","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"25 mins."},"categories":[{"name":"PooledObjectFactory","slug":"PooledObjectFactory","count":1,"path":"api/categories/PooledObjectFactory.json"},{"name":"JAVA","slug":"PooledObjectFactory/JAVA","count":1,"path":"api/categories/PooledObjectFactory/JAVA.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"www","slug":"www","count":8,"path":"api/tags/www.json"},{"name":"victorchu","slug":"victorchu","count":1,"path":"api/tags/victorchu.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%8E-apache-common-pool-%E7%9C%8B%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%B8%AA%E9%80%9A%E7%94%A8%E6%B1%A0\"><span class=\"toc-text\">从 apache-common-pool 看如何写一个通用池</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E5%88%86%E6%9E%90\"><span class=\"toc-text\">组件分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B1%A0%E5%8C%96%E5%AF%B9%E8%B1%A1%E5%B7%A5%E5%8E%82\"><span class=\"toc-text\">池化对象工厂</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PooledObjectFactory\"><span class=\"toc-text\">PooledObjectFactory</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#KeyedPooledObjectFactory\"><span class=\"toc-text\">KeyedPooledObjectFactory</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">生命周期</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B1%A0%E5%8C%96%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">池化对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PooledObject\"><span class=\"toc-text\">PooledObject</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DefaultPooledObject\"><span class=\"toc-text\">DefaultPooledObject</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PooledObject-%E7%9A%84%E7%8A%B6%E6%80%81%E6%B5%81%E8%BD%AC\"><span class=\"toc-text\">PooledObject 的状态流转</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E6%B1%A0\"><span class=\"toc-text\">对象池</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ObjectPool\"><span class=\"toc-text\">ObjectPool</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ProxiedObjectPool\"><span class=\"toc-text\">ProxiedObjectPool</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ErodingObjectPool\"><span class=\"toc-text\">ErodingObjectPool</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SynchronizedObjectPool\"><span class=\"toc-text\">SynchronizedObjectPool</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SoftReferenceObjectPool\"><span class=\"toc-text\">SoftReferenceObjectPool</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GenericObjectPool-%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">GenericObjectPool 详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#config\"><span class=\"toc-text\">config</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%B1%A0\"><span class=\"toc-text\">创建对象池</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E7%A7%9F%E5%80%9F\"><span class=\"toc-text\">对象租借</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E5%BD%92%E8%BF%98\"><span class=\"toc-text\">对象归还</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#evictor-%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">evictor 检查</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8-evictor-%E5%85%A5%E5%8F%A3\"><span class=\"toc-text\">启动 evictor 入口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">启动</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A9%B1%E9%80%90%E8%80%85%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">驱逐者实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#evictor-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">evictor 方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A9%B1%E9%80%90%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">驱逐策略</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Elasticsearch 数值类型也能存String 类型问题分析","uid":"e31577451631f8a2adc07bcea9f94111","slug":"MIDDLEWARE/Elasticsearch 数值类型也能存String 类型问题分析","date":"2023-11-22T10:47:50.000Z","updated":"2025-09-30T03:26:45.603Z","comments":true,"path":"api/articles/MIDDLEWARE/Elasticsearch 数值类型也能存String 类型问题分析.json","keywords":"XuGuangSheng","cover":"/covers/elasticsearch-string.jpg","text":"Elasticsearch 数值类型也能存String 类型问题分析最近经常遇到遇到某个客户问数值类型的字段也能存字符串，或者说已经将字段类型设置成了float...","permalink":"/post/MIDDLEWARE/Elasticsearch 数值类型也能存String 类型问题分析","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"https","slug":"https","count":12,"path":"api/categories/https.json"},{"name":"MIDDLEWARE","slug":"https/MIDDLEWARE","count":2,"path":"api/categories/https/MIDDLEWARE.json"}],"tags":[{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"float","slug":"float","count":1,"path":"api/tags/float.json"},{"name":"developer","slug":"developer","count":1,"path":"api/tags/developer.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SpringBoot 扩展接口","uid":"b17fc263eaa274b6bfcba03d60c157eb","slug":"JAVA/SpringBoot 扩展接口","date":"2023-11-15T16:23:04.000Z","updated":"2025-09-30T03:26:20.574Z","comments":true,"path":"api/articles/JAVA/SpringBoot 扩展接口.json","keywords":"XuGuangSheng","cover":"/covers/springboot.jpg","text":"SpringBoot 扩展接口1、背景Spring的核心思想就是容器，当容器refresh的时候，外部看上去风平浪静，其实内部则是一片惊涛骇浪，汪洋一片。Spr...","permalink":"/post/JAVA/SpringBoot 扩展接口","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"bean","slug":"bean","count":2,"path":"api/categories/bean.json"},{"name":"JAVA","slug":"bean/JAVA","count":2,"path":"api/categories/bean/JAVA.json"}],"tags":[{"name":"spring","slug":"spring","count":4,"path":"api/tags/spring.json"},{"name":"org","slug":"org","count":2,"path":"api/tags/org.json"},{"name":"springframework","slug":"springframework","count":1,"path":"api/tags/springframework.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}