{"title":"在Spring Boot启动时执行代码的几种方法","uid":"61ee30c1a55828f654b62f168fb5fa1d","slug":"JAVA/在Spring Boot启动时执行代码的几种方法","date":"2022-07-11T15:58:46.000Z","updated":"2025-09-30T03:26:25.922Z","comments":true,"path":"api/articles/JAVA/在Spring Boot启动时执行代码的几种方法.json","keywords":"XuGuangSheng","cover":"/covers/spring-boot.jpg","content":"<h1 id=\"在Spring-Boot启动时执行代码的几种方法\"><a href=\"#在Spring-Boot启动时执行代码的几种方法\" class=\"headerlink\" title=\"在Spring Boot启动时执行代码的几种方法\"></a>在Spring Boot启动时执行代码的几种方法</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><a href=\"#%E5%89%8D%E8%A8%80\" title=\"前言\"></a>前言</h2><p>有时候我们需要在应用启动时执行一些代码片段，这些片段可能是仅仅是为了记录 log，也可能是在<a href=\"https://dayarch.top/p/pkix-certificate-import.html\">启动时检查与安装证书</a> ，诸如上述业务要求我们可能会经常碰到</p>\n<p>Spring Boot 提供了至少 5 种方式用于在应用启动时执行代码。我们应该如何选择？本文将会逐步解释与分析这几种不同方式</p>\n<h2 id=\"CommandLineRunner\"><a href=\"#CommandLineRunner\" class=\"headerlink\" title=\"CommandLineRunner\"></a><a href=\"#CommandLineRunner\" title=\"CommandLineRunner\"></a>CommandLineRunner</h2><p><code>CommandLineRunner</code> 是一个接口，通过实现它，我们可以在 <code>Spring 应用成功启动之后</code> 执行一些代码片段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Order(2)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyCommandLineRunner</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;MyCommandLineRunner order is 2&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (args.length &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; args.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tlog.info(<span class=\"string\">&quot;MyCommandLineRunner current parameter is: &#123;&#125;&quot;</span>, args[i]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当 Spring Boot 在应用上下文中找到 <code>CommandLineRunner</code> bean，它将会在应用成功启动之后调用 <code>run()</code> 方法，并传递用于启动应用程序的命令行参数</p>\n<p>通过如下 maven 命令生成 jar 包:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package</span><br></pre></td></tr></table></figure>\n\n<p>通过终端命令启动应用，并传递参数:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar springboot-application-startup-0.0.1-SNAPSHOT.jar --foo=bar --name=rgyb</span><br></pre></td></tr></table></figure>\n\n<p>查看运行结果:<br><a href=\"https://cdn.jsdelivr.net/gh/FraserYu/img-host/blog-imgXnip2019-12-23_20-32-41.jpg\"><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/6b296da3d3d583e04b7eee6f6907f14d.jpeg\">\n</a></p>\n<p>到这里我们可以看出几个问题:</p>\n<ol>\n<li>命令行传入的参数并没有被解析，而只是显示出我们传入的字符串内容 <code>--foo=bar</code>，<code>--name=rgyb</code>，我们可以通过 <code>ApplicationRunner</code> 解析，我们稍后看</li>\n<li>在重写的 <code>run()</code> 方法上有 <code>throws Exception</code> 标记，Spring Boot 会将 <code>CommandLineRunner</code> 作为应用启动的一部分，如果运行 <code>run()</code> 方法时抛出 Exception，应用将会终止启动</li>\n<li>我们在类上添加了 <code>@Order(2)</code> 注解，当有多个 <code>CommandLineRunner</code> 时，将会按照 <code>@Order</code> 注解中的数字从小到大排序 (数字当然也可以用复数)</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h3 id=\"⚠️不要使用-Order-太多\"><a href=\"#⚠️不要使用-Order-太多\" class=\"headerlink\" title=\"⚠️不要使用 @Order 太多\"></a><a href=\"#%E2%9A%A0%EF%B8%8F%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8-Order-%E5%A4%AA%E5%A4%9A\" title=\"⚠️不要使用 @Order 太多\"></a>⚠️不要使用 <code>@Order</code> 太多</h3><p>看到 order 这个 “黑科技” 我们会觉得它可以非常方便将启动逻辑按照指定顺序执行，但如果你这么写，说明多个代码片段是有相互依赖关系的，为了让我们的代码更好维护，我们应该减少这种依赖使用</p></blockquote>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a><a href=\"#%E5%B0%8F%E7%BB%93\" title=\"小结\"></a>小结</h3><p>如果我们只是想简单的获取以空格分隔的命令行参数，那 <code>MyCommandLineRunner</code> 就足够使用了</p>\n<h2 id=\"ApplicationRunner\"><a href=\"#ApplicationRunner\" class=\"headerlink\" title=\"ApplicationRunner\"></a><a href=\"#ApplicationRunner\" title=\"ApplicationRunner\"></a>ApplicationRunner</h2><p>上面提到，通过命令行启动并传递参数，<code>MyCommandLineRunner</code> 不能解析参数，如果要解析参数，那我们就要用到 <code>ApplicationRunner</code> 参数了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Order(1)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyApplicationRunner</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationRunner</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(ApplicationArguments args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;MyApplicationRunner order is 1&quot;</span>);</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;MyApplicationRunner Current parameter is &#123;&#125;:&quot;</span>, args.getOptionValues(<span class=\"string\">&quot;foo&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新打 jar 包，运行如下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar springboot-application-startup-0.0.1-SNAPSHOT.jar --foo=bar,rgyb</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下:<br><a href=\"https://cdn.jsdelivr.net/gh/FraserYu/img-host/blog-imgXnip2019-12-23_21-10-14.jpg\"><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/ad89117054af06188926a9a62c9d4848.jpeg\">\n</a></p>\n<p>到这里我们可以看出:</p>\n<ol>\n<li>同 <code>MyCommandLineRunner</code> 相似，但 <code>ApplicationRunner</code> 可以通过 run 方法的 <code>ApplicationArguments</code> 对象解析出命令行参数，并且每个参数可以有多个值在里面，因为 <code>getOptionValues</code> 方法返回 List 数组</li>\n<li>在重写的 <code>run()</code> 方法上有 <code>throws Exception</code> 标记，Spring Boot 会将 <code>CommandLineRunner</code> 作为应用启动的一部分，如果运行 <code>run()</code> 方法时抛出 Exception，应用将会终止启动</li>\n<li><code>ApplicationRunner</code> 也可以使用 <code>@Order</code> 注解进行排序，从启动结果来看，它与 <code>CommandLineRunner</code> 共享 order 的顺序，稍后我们通过源码来验证这个结论</li>\n</ol>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a><a href=\"#%E5%B0%8F%E7%BB%93-1\" title=\"小结\"></a>小结</h3><p>如果我们想获取复杂的命令行参数时，我们可以使用 <code>ApplicationRunner</code></p>\n<h2 id=\"ApplicationListener\"><a href=\"#ApplicationListener\" class=\"headerlink\" title=\"ApplicationListener\"></a><a href=\"#ApplicationListener\" title=\"ApplicationListener\"></a>ApplicationListener</h2><p>如果我们不需要获取命令行参数时，我们可以将启动逻辑绑定到 Spring 的 <code>ApplicationReadyEvent</code> 上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Order(0)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyApplicationListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationListener</span>&lt;ApplicationReadyEvent&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onApplicationEvent</span><span class=\"params\">(ApplicationReadyEvent applicationReadyEvent)</span> &#123;</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;MyApplicationListener is started up&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行程序查看结果:<br><a href=\"https://cdn.jsdelivr.net/gh/FraserYu/img-host/blog-imgXnip2019-12-23_21-27-09.jpg\"><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/fc2ed3f20a817857a535315eeba535db.jpeg\">\n</a></p>\n<p>到这我们可以看出:</p>\n<ol>\n<li><code>ApplicationReadyEvent</code> <strong>当且仅当</strong> 在应用程序就绪之后才被触发，甚至是说上面的 Listener 要在本文说的所有解决方案都执行了之后才会被触发，最终结论请稍后看</li>\n<li>代码中我用 <code>Order(0)</code> 来标记，显然 ApplicationListener 也是可以用该注解进行排序的，按数字大小排序，应该是最先执行。但是，这个顺序仅用于同类型的 ApplicationListener 之间的排序，与前面提到的 <code>ApplicationRunners</code> 和 <code>CommandLineRunners</code> 的排序并不共享</li>\n</ol>\n<h3 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a><a href=\"#%E5%B0%8F%E7%BB%93-2\" title=\"小结\"></a>小结</h3><p>如果我们不需要获取命令行参数，我们可以通过 <code>ApplicationListener&lt;ApplicationReadyEvent&gt;</code> 创建一些全局的启动逻辑，我们还可以通过它获取 <a href=\"https://dayarch.top/p/spring-boot-configurationProperties-usage.html\">Spring Boot 支持的 configuration properties 环境变量参数</a></p>\n<hr>\n<p>如果你看过我之前写的 <strong>Spring Bean 生命周期三部曲:</strong></p>\n<ul>\n<li><a href=\"https://dayarch.top/p/spring-bean-lifecycle-creation.html\">Spring Bean 生命周期之缘起</a></li>\n<li><a href=\"https://dayarch.top/p/spring-bean-lifecycle-destroy.html\">Spring Bean 生命周期之缘尽</a></li>\n<li><a href=\"https://dayarch.top/p/spring-aware.html\">Spring Aware 到底是什么？</a></li>\n</ul>\n<p>那么你会对下面两种方式非常熟悉了</p>\n<h2 id=\"PostConstruct\"><a href=\"#PostConstruct\" class=\"headerlink\" title=\"@PostConstruct\"></a><a href=\"#PostConstruct\" title=\"@PostConstruct\"></a>@PostConstruct</h2><p>创建启动逻辑的另一种简单解决方案是提供一种在 bean 创建期间由 Spring 调用的初始化方法。我们要做的就只是将 <code>@PostConstruct</code> 注解添加到方法中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@DependsOn(&quot;myApplicationListener&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyPostConstructBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testPostConstruct</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;MyPostConstructBean&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查看运行结果:<br><a href=\"https://cdn.jsdelivr.net/gh/FraserYu/img-host/blog-imgXnip2019-12-25_15-34-52.jpg\"><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/9821cc8263c456a5e1005912c356d546.jpeg\">\n</a></p>\n<p>从上面运行结果可以看出:</p>\n<ol>\n<li>Spring 创建完 bean 之后 (<strong>在启动之前</strong>)，便会立即调用 <code>@PostConstruct</code> 注解标记的方法，因此我们无法使用 <code>@Order</code> 注解对其进行自由排序，因为它可能依赖于 <code>@Autowired</code> 插入到我们 bean 中的其他 Spring bean。</li>\n<li>相反，它将在依赖于它的所有 bean 被初始化之后被调用，如果要添加人为的依赖关系并由此创建一个排序，则可以使用 <code>@DependsOn</code> 注解（虽然可以排序，但是不建议使用，理由和 <code>@Order</code> 一样）</li>\n</ol>\n<h3 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a><a href=\"#%E5%B0%8F%E7%BB%93-3\" title=\"小结\"></a>小结</h3><p><code>@PostConstruct</code> 方法固有地绑定到现有的 Spring bean，因此应仅将其用于此单个 bean 的初始化逻辑；</p>\n<h2 id=\"InitializingBean\"><a href=\"#InitializingBean\" class=\"headerlink\" title=\"InitializingBean\"></a><a href=\"#InitializingBean\" title=\"InitializingBean\"></a>InitializingBean</h2><p>与 <code>@PostConstruct</code> 解决方案非常相似，我们可以实现 <code>InitializingBean</code> 接口，并让 Spring 调用某个初始化方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyInitializingBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\tlog.info(<span class=\"string\">&quot;MyInitializingBean.afterPropertiesSet()&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查看运行结果:<br><a href=\"https://cdn.jsdelivr.net/gh/FraserYu/img-host/blog-imgXnip2019-12-25_15-30-31.jpg\"><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/00c3f8311493f24721fd2709dc20c3b5.jpeg\">\n</a></p>\n<p>从上面的运行结果中，我们得到了和 <code>@PostConstruct</code> 一样的效果，但二者还是有差别的</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h3 id=\"⚠️-PostConstruct-和-afterPropertiesSet-区别\"><a href=\"#⚠️-PostConstruct-和-afterPropertiesSet-区别\" class=\"headerlink\" title=\"⚠️ @PostConstruct 和 afterPropertiesSet 区别\"></a><a href=\"#%E2%9A%A0%EF%B8%8F-PostConstruct-%E5%92%8C-afterPropertiesSet-%E5%8C%BA%E5%88%AB\" title=\"⚠️ @PostConstruct 和 afterPropertiesSet 区别\"></a>⚠️ <code>@PostConstruct</code> 和 <code>afterPropertiesSet</code> 区别</h3><ol>\n<li>afterPropertiesSet，顾名思义「在属性设置之后」，调用该方法时，该 bean 的所有属性已经被 Spring 填充。如果我们在某些属性上使用 <code>@Autowired</code>（常规操作应该使用构造函数注入），那么 Spring 将在调用<code>afterPropertiesSet</code> 之前将 bean 注入这些属性。但 <code>@PostConstruct</code> 并没有这些属性填充限制</li>\n<li>所以 <code>InitializingBean.afterPropertiesSet</code> 解决方案比使用 <code>@PostConstruct</code> 更安全，因为如果我们依赖尚未自动注入的 <code>@Autowired</code> 字段，则 <code>@PostConstruct</code> 方法可能会遇到 NullPointerExceptions</li>\n</ol></blockquote>\n<h3 id=\"小结-4\"><a href=\"#小结-4\" class=\"headerlink\" title=\"小结\"></a><a href=\"#%E5%B0%8F%E7%BB%93-4\" title=\"小结\"></a>小结</h3><p>如果我们使用构造函数注入，则这两种解决方案都是等效的</p>\n<h2 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a><a href=\"#%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\" title=\"源码分析\"></a>源码分析</h2><p>请打开你的 IDE (重点代码已标记注释):</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>MyCommandLineRunner</code> 和 <code>ApplicationRunner</code> 是在何时被调用的呢？</p></blockquote>\n<p>打开 <code>SpringApplication.java</code> 类，里面有 <code>callRunners</code> 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">callRunners</span><span class=\"params\">(ApplicationContext context, ApplicationArguments args)</span> &#123;</span><br><span class=\"line\">    List&lt;Object&gt; runners = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    AnnotationAwareOrderComparator.sort(runners);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object runner : <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashSet</span>&lt;&gt;(runners)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runner <span class=\"keyword\">instanceof</span> ApplicationRunner) &#123;</span><br><span class=\"line\">            callRunner((ApplicationRunner) runner, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runner <span class=\"keyword\">instanceof</span> CommandLineRunner) &#123;</span><br><span class=\"line\">            callRunner((CommandLineRunner) runner, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>强烈建议完整看一下 <code>SpringApplication.java</code> 的全部代码，Spring Boot 启动过程及原理都可以从这个类中找到一些答案</strong></p>\n<h2 id=\"灵魂追问\"><a href=\"#灵魂追问\" class=\"headerlink\" title=\"灵魂追问\"></a><a href=\"#%E7%81%B5%E9%AD%82%E8%BF%BD%E9%97%AE\" title=\"灵魂追问\"></a>灵魂追问</h2><ol>\n<li>上面程序运行结果， <code>afterPropertiesSet</code> 方法调用先于 <code>@PostConstruct</code> 方法，但这和我们在 <a href=\"https://dayarch.top/p/spring-bean-lifecycle-creation.html\">Spring Bean 生命周期之缘起</a> 中的调用顺序恰恰相反，你知道为什么吗？</li>\n<li><code>MyPostConstructBean</code> 通过 <code>@DependsOn(&quot;myApplicationListener&quot;)</code> 依赖了 MyApplicationListener，为什么调用结果前者先与后者呢？</li>\n<li>为什么不建议 <code>@Autowired</code> 形式依赖注入</li>\n</ol>\n<p>在写 Spring Bean 生命周期时就有朋友问我与之相关的问题，显然他们在概念上有一些含混，所以，仔细理解上面的问题将会帮助你加深对 Spring Bean 生命周期的理解</p>\n<h2 id=\"Spring-Boot-应用启动执行代码概览图\"><a href=\"#Spring-Boot-应用启动执行代码概览图\" class=\"headerlink\" title=\"Spring Boot 应用启动执行代码概览图\"></a><a href=\"#Spring-Boot%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%A6%82%E8%A7%88%E5%9B%BE\" title=\"Spring Boot 应用启动执行代码概览图\"></a>Spring Boot 应用启动执行代码概览图</h2><p>最后画一张图用来总结这几种方式<br><a href=\"https://cdn.jsdelivr.net/gh/FraserYu/img-host/blog-imgSpringBoot_exec_in_start1.png\"><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/e99075c8ad55d2deef4bca15ac07f50c.png\">\n</a></p>\n","text":"在Spring Boot启动时执行代码的几种方法前言有时候我们需要在应用启动时执行一些代码片段，这些片段可能是仅仅是为了记录 log，也可能是在启动时检查与安装...","permalink":"/post/JAVA/在Spring Boot启动时执行代码的几种方法","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"Spring","slug":"Spring","count":4,"path":"api/categories/Spring.json"},{"name":"JAVA","slug":"Spring/JAVA","count":4,"path":"api/categories/Spring/JAVA.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"小结","slug":"小结","count":1,"path":"api/tags/小结.json"},{"name":"PostConstruct","slug":"PostConstruct","count":1,"path":"api/tags/PostConstruct.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9C%A8Spring-Boot%E5%90%AF%E5%8A%A8%E6%97%B6%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">在Spring Boot启动时执行代码的几种方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CommandLineRunner\"><span class=\"toc-text\">CommandLineRunner</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E2%9A%A0%EF%B8%8F%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8-Order-%E5%A4%AA%E5%A4%9A\"><span class=\"toc-text\">⚠️不要使用 @Order 太多</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ApplicationRunner\"><span class=\"toc-text\">ApplicationRunner</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-1\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ApplicationListener\"><span class=\"toc-text\">ApplicationListener</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-2\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PostConstruct\"><span class=\"toc-text\">@PostConstruct</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-3\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#InitializingBean\"><span class=\"toc-text\">InitializingBean</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E2%9A%A0%EF%B8%8F-PostConstruct-%E5%92%8C-afterPropertiesSet-%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">⚠️ @PostConstruct 和 afterPropertiesSet 区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-4\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">源码分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%81%B5%E9%AD%82%E8%BF%BD%E9%97%AE\"><span class=\"toc-text\">灵魂追问</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Spring-Boot-%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%A6%82%E8%A7%88%E5%9B%BE\"><span class=\"toc-text\">Spring Boot 应用启动执行代码概览图</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"nginx 反向代理和路径重写","uid":"77b291e312b6296807210b6244b44cc2","slug":"MIDDLEWARE/nginx 反向代理和路径重写","date":"2022-07-14T09:31:31.000Z","updated":"2025-09-30T03:26:53.504Z","comments":true,"path":"api/articles/MIDDLEWARE/nginx 反向代理和路径重写.json","keywords":"XuGuangSheng","cover":"/covers/nginx.jpg","text":"nginx 反向代理和路径重写nginx 反向代理路径问题http://abc.com:8080 写法和 http://abc.com:8080/ 写法的区别如...","permalink":"/post/MIDDLEWARE/nginx 反向代理和路径重写","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"NginxTest","slug":"NginxTest","count":1,"path":"api/categories/NginxTest.json"},{"name":"MIDDLEWARE","slug":"NginxTest/MIDDLEWARE","count":1,"path":"api/categories/NginxTest/MIDDLEWARE.json"}],"tags":[{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"http","slug":"http","count":6,"path":"api/tags/http.json"},{"name":"abc","slug":"abc","count":1,"path":"api/tags/abc.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"ElasticSearch-Aggregations-GroupBy-实现源码分析","uid":"7fb39e737e8e188c4592d757c3adaa67","slug":"MIDDLEWARE/ElasticSearch-Aggregations-GroupBy-实现源码分析","date":"2022-07-06T09:43:40.000Z","updated":"2025-09-30T03:26:45.144Z","comments":true,"path":"api/articles/MIDDLEWARE/ElasticSearch-Aggregations-GroupBy-实现源码分析.json","keywords":"XuGuangSheng","cover":"/covers/elasticsearch-aggregations-groupby.jpg","text":"ElasticSearch-Aggregations-GroupBy-实现源码分析 在前文 ElasticSearch Aggregations 分析 中，我们...","permalink":"/post/MIDDLEWARE/ElasticSearch-Aggregations-GroupBy-实现源码分析","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"newtype","slug":"newtype","count":1,"path":"api/categories/newtype.json"},{"name":"MIDDLEWARE","slug":"newtype/MIDDLEWARE","count":1,"path":"api/categories/newtype/MIDDLEWARE.json"}],"tags":[{"name":"DocValues","slug":"DocValues","count":1,"path":"api/tags/DocValues.json"},{"name":"Aggregator","slug":"Aggregator","count":1,"path":"api/tags/Aggregator.json"},{"name":"Collector","slug":"Collector","count":1,"path":"api/tags/Collector.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}