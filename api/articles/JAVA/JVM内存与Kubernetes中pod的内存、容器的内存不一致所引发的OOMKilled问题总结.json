{"title":"JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结","uid":"127dff9b19567a7dce7fda63128b9f65","slug":"JAVA/JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结","date":"2024-04-03T09:43:02.000Z","updated":"2025-09-30T03:26:12.107Z","comments":true,"path":"api/articles/JAVA/JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结.json","keywords":"XuGuangSheng","cover":"/covers/jvmkubernetespodoomkilled.jpg","content":"<h1 id=\"JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结\"><a href=\"#JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结\" class=\"headerlink\" title=\"JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结\"></a>JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结</h1><h2 id=\"承接上文\"><a href=\"#承接上文\" class=\"headerlink\" title=\"承接上文\"></a>承接上文</h2><p>在整个JVM进程体系而言，不仅仅只包含了Heap堆内存，其实还有其他相关的内存存储空间是需要我们考虑的，一边防止这些内存空间会造成我们的容器内存溢出的场景，正如下图所示。<br><a href=\"https://img-blog.csdnimg.cn/img_convert/5d178bc695641c3b222b7f49af8ab258.jpeg\"><img src=\"https://img-blog.csdnimg.cn/img_convert/5d178bc695641c3b222b7f49af8ab258.jpeg\">\n</a><br>接下来了我们需要进行分析出heap之外的一部分就是对外内存就是Off Heap Space，也就是Direct buffer memory堆外内存。主要通过的方式就是采用Unsafe方式进行申请内存，大多数场景也会通过Direct ByteBuffer方式进行获取。好废话不多说进入正题。</p>\n<h2 id=\"JVM参数MaxDirectMemorySize\"><a href=\"#JVM参数MaxDirectMemorySize\" class=\"headerlink\" title=\"JVM参数MaxDirectMemorySize\"></a>JVM参数MaxDirectMemorySize</h2><p>我们先研究一下jvm的-XX:MaxDirectMemorySize，该参数指定了DirectByteBuffer能分配的空间的限额，如果没有显示指定这个参数启动jvm，默认值是xmx对应的值（低版本是减去幸存区的大小）。</p>\n<p>DirectByteBuffer对象是一种典型的”冰山对象”，在堆中存在少量的泄露的对象，但其下面连接用堆外内存，这种情况容易造成内存的大量使用而得不到释放</p>\n<p>highlighter- code-theme-dark</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">-XX:MaxDirectMemorySize</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>-XX:MaxDirectMemorySize&#x3D;size 用于设置 New I&#x2F;O (java.nio) direct-buffer allocations 的最大大小，size 的单位可以使用 k&#x2F;K、m&#x2F;M、g&#x2F;G；如果没有设置该参数则默认值为 0，意味着JVM自己自动给NIO direct-buffer allocations选择最大大小。</p>\n<h3 id=\"XX-MaxDirectMemorySize的默认值是什么？\"><a href=\"#XX-MaxDirectMemorySize的默认值是什么？\" class=\"headerlink\" title=\"-XX:MaxDirectMemorySize的默认值是什么？\"></a>-XX:MaxDirectMemorySize的默认值是什么？</h3><p>在sun.misc.VM中，它是Runtime.getRuntime.maxMemory()，这就是使用-Xmx配置的内容。而对应的JVM参数如何传递给JVM底层的呢？主要通过的是hotspot&#x2F;share&#x2F;prims&#x2F;jvm.cpp。我们来看一下jvm.cpp的JVM源码来分一下。</p>\n<p>c</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">FLAG</span>\\<span class=\"variable\">_IS</span>\\<span class=\"variable\">_DEFAULT</span>(MaxDirectMemorySize)) &#123;</span><br><span class=\"line\">  char as_chars\\[<span class=\"number\">256</span>\\];</span><br><span class=\"line\">  jio\\<span class=\"variable\">_snprintf</span>(as\\<span class=\"variable\">_chars</span>, <span class=\"built_in\">sizeof</span>(as\\<span class=\"variable\">_chars</span>), JULONG\\<span class=\"variable\">_FORMAT</span>, MaxDirectMemorySize);</span><br><span class=\"line\">  Handle key\\<span class=\"variable\">_str</span> = java\\<span class=\"variable\">_lang</span>\\<span class=\"variable\">_String</span>::create\\<span class=\"variable\">_from</span>\\<span class=\"variable\">_platform</span>\\<span class=\"variable\">_dependent_str</span>(<span class=\"string\">&quot;sun.nio.MaxDirectMemorySize&quot;</span>, CHECK_NULL);</span><br><span class=\"line\">  Handle value\\<span class=\"variable\">_str</span>  = java\\<span class=\"variable\">_lang</span>\\<span class=\"variable\">_String</span>::create\\<span class=\"variable\">_from</span>\\<span class=\"variable\">_platform</span>\\<span class=\"variable\">_dependent</span>\\<span class=\"variable\">_str</span>(as\\<span class=\"variable\">_chars</span>, CHECK_NULL);</span><br><span class=\"line\">  result\\<span class=\"variable\">_h</span>-&gt;obj\\<span class=\"variable\">_at_put</span>(ndx * <span class=\"number\">2</span>,  key_str());</span><br><span class=\"line\">  result\\<span class=\"variable\">_h</span>-&gt;obj\\<span class=\"variable\">_at_put</span>(ndx * <span class=\"number\">2</span> \\+ <span class=\"number\">1</span>, value_str());</span><br><span class=\"line\">  ndx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>jvm.cpp 里头有一段代码用于把 - XX:MaxDirectMemorySize 命令参数转换为 key 为 sun.nio.MaxDirectMemorySize的属性。我们可以看出来他转换为了该属性之后，进行设置和初始化直接内存的配置。针对于直接内存的核心类就在<a href=\"http://www.docjar.com/html/api/sun/misc/VM.java.html%E3%80%82%E5%A4%A7%E5%AE%B6%E6%9C%89%E5%85%B4%E8%B6%A3%E5%8F%AF%E4%BB%A5%E7%9C%8B%E4%B8%80%E4%B8%8B%E5%AF%B9%E5%BA%94%E7%9A%84%E8%A7%86%E7%BA%BF%E3%80%82%E5%9C%A8JVM%E6%BA%90%E7%A0%81%E9%87%8C%E9%9D%A2%E7%9A%84%E7%9B%AE%E5%BD%95%E6%98%AF%EF%BC%9Ajava.base/jdk/internal/misc/VM.java%EF%BC%8C%E6%88%91%E4%BB%AC%E7%9C%8B%E4%B8%80%E4%B8%8B%E8%AF%A5%E7%B1%BB%E5%85%B3%E4%BA%8E%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98%E7%9A%84%E9%87%8D%E7%82%B9%E9%83%A8%E5%88%86%E3%80%82\">http://www.docjar.com/html/api/sun/misc/VM.java.html。大家有兴趣可以看一下对应的视线。在JVM源码里面的目录是：java.base/jdk/internal/misc/VM.java，我们看一下该类关于直接内存的重点部分。</a></p>\n<p>java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VM</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> JAVA\\_LANG\\_SYSTEM_INITED     = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> MODULE\\_SYSTEM\\_INITED        = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> SYSTEM\\_LOADER\\_INITIALIZING  = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">SYSTEM_BOOTED</span>               <span class=\"operator\">=</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">SYSTEM_SHUTDOWN</span>             <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> initLevel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">long</span> <span class=\"variable\">directMemory</span> <span class=\"operator\">=</span> <span class=\"number\">64</span> \\* <span class=\"number\">1024</span> \\* <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面可以看出来64MB最初是任意设置的。在-XX:MaxDirectMemorySize 是用来配置NIO direct memory上限用的VM参数。可以看一下JVM的这行代码。</p>\n<p>highlighter- code-theme-dark Bash</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">product</span><span class=\"params\">(intx, MaxDirectMemorySize, -<span class=\"number\">1</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"string\">&quot;Maximum total size of NIO direct-buffer allocations&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n<p>但如果不配置它的话，direct memory默认最多能申请多少内存呢？这个参数默认值是-1，显然不是一个“有效值”。所以真正的默认值肯定是从别的地方来的。</p>\n<p>java</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">long</span> <span class=\"title\">maxDirectMemory</span>()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> directMemory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">saveProperties</span>(<span class=\"params\">Map&lt;String, String&gt; props</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initLevel() != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Wrong init level&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (savedProps == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            savedProps = props;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        String s = props.<span class=\"keyword\">get</span>(<span class=\"string\">&quot;sun.nio.MaxDirectMemorySize&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span> || s.isEmpty() || s.<span class=\"keyword\">equals</span>(<span class=\"string\">&quot;-1&quot;</span>)) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            directMemory = Runtime.getRuntime().maxMemory();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">long</span> l = Long.parseLong(s);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l &gt; <span class=\"number\">-1</span>)</span><br><span class=\"line\">                directMemory = l;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        s = props.<span class=\"keyword\">get</span>(<span class=\"string\">&quot;sun.nio.PageAlignDirectMemory&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;true&quot;</span>.<span class=\"keyword\">equals</span>(s))</span><br><span class=\"line\">            pageAlignDirectMemory = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>从上面的源码可以读取 sun.nio.MaxDirectMemorySize 属性，如果为 null 或者是空或者是 - 1，那么则设置为 Runtime.getRuntime ().maxMemory ()；如果有设置 MaxDirectMemorySize 且值大于 - 1，那么使用该值作为 directMemory 的值；而 VM 的 maxDirectMemory 方法则返回的是 directMemory 的值。</p>\n<p>因为当MaxDirectMemorySize参数没被显式设置时它的值就是-1，在Java类库初始化时maxDirectMemory()被java.lang.System的静态构造器调用，走的路径就是这条：</p>\n<p>java</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (s.equals(<span class=\"string\">&quot;-1&quot;</span>)) &#123;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    directMemory <span class=\"operator\">=</span> Runtime.getRuntime().maxMemory()<span class=\"comment\">;  </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>而Runtime.maxMemory()在HotSpot VM里的实现是：</p>\n<p>highlighter- code-theme-dark Bash</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JVM\\<span class=\"variable\">_ENTRY</span>\\<span class=\"variable\">_NO</span>\\<span class=\"variable\">_ENV</span>(jlong, JVM\\<span class=\"variable\">_MaxMemory</span>(void))  </span><br><span class=\"line\">  JVMWrapper(<span class=\"string\">&quot;JVM_MaxMemory&quot;</span>);  </span><br><span class=\"line\">  <span class=\"built_in\">size</span>\\<span class=\"variable\">_t</span> n = Universe::heap()-&gt;<span class=\"built_in\">max</span>\\<span class=\"variable\">_capacity</span>();  </span><br><span class=\"line\">  return convert\\<span class=\"variable\">_size</span>\\<span class=\"variable\">_t</span>\\<span class=\"variable\">_to</span>\\<span class=\"variable\">_jlong</span>(n);  </span><br><span class=\"line\">JVM_END  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这个max_capacity()实际返回的是 -Xmx减去一个survivor space的预留大小。</p>\n<h4 id=\"结论分析说明\"><a href=\"#结论分析说明\" class=\"headerlink\" title=\"结论分析说明\"></a>结论分析说明</h4><p>MaxDirectMemorySize没显式配置的时候，NIO direct memory可申请的空间的上限就是-Xmx减去一个survivor space的预留大小。例如如果您不配置-XX:MaxDirectMemorySize并配置-Xmx5g，则”默认” MaxDirectMemorySize也将是5GB-survivor space区，并且应用程序的总堆+直接内存使用量可能会增长到5 + 5 &#x3D; 10 Gb 。</p>\n<h5 id=\"其他获取-maxDirectMemory-的值的API方法\"><a href=\"#其他获取-maxDirectMemory-的值的API方法\" class=\"headerlink\" title=\"其他获取 maxDirectMemory 的值的API方法\"></a>其他获取 maxDirectMemory 的值的API方法</h5><p>BufferPoolMXBean 及 JavaNioAccess.BufferPool (通过SharedSecrets获取) 的 getMemoryUsed 可以获取 direct memory 的大小；其中 java9 模块化之后，SharedSecrets 从原来的 sun.misc.SharedSecrets 变更到 java.base 模块下的 jdk.internal.access.SharedSecrets；要使用 –add-exports java.base&#x2F;jdk.internal.access&#x3D;ALL-UNNAMED 将其导出到 UNNAMED，这样才可以运行</p>\n<p>java</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public BufferPoolMXBean <span class=\"built_in\">getDirectBufferPoolMBean</span>()&#123;</span><br><span class=\"line\">        return ManagementFactory<span class=\"selector-class\">.getPlatformMXBeans</span>(BufferPoolMXBean.class)</span><br><span class=\"line\">                <span class=\"selector-class\">.stream</span>()</span><br><span class=\"line\">                <span class=\"selector-class\">.filter</span>(e -&gt; e.getName()<span class=\"selector-class\">.equals</span>(&quot;direct&quot;))</span><br><span class=\"line\">                <span class=\"selector-class\">.findFirst</span>()</span><br><span class=\"line\">                <span class=\"selector-class\">.orElseThrow</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public JavaNioAccess<span class=\"selector-class\">.BufferPool</span> <span class=\"built_in\">getNioBufferPool</span>()&#123;</span><br><span class=\"line\">     return SharedSecrets<span class=\"selector-class\">.getJavaNioAccess</span>()<span class=\"selector-class\">.getDirectBufferPool</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内存分析问题\"><a href=\"#内存分析问题\" class=\"headerlink\" title=\"内存分析问题\"></a>内存分析问题</h3><h4 id=\"XX-DisableExplicitGC-与-NIO的direct-memory\"><a href=\"#XX-DisableExplicitGC-与-NIO的direct-memory\" class=\"headerlink\" title=\"-XX:+DisableExplicitGC 与 NIO的direct memory\"></a>-XX:+DisableExplicitGC 与 NIO的direct memory</h4><ul>\n<li><p>用了-XX:+DisableExplicitGC参数后，System.gc()的调用就会变成一个空调用，完全不会触发任何GC（但是“函数调用”本身的开销还是存在的哦～）。</p>\n</li>\n<li><p>做ygc的时候会将新生代里的不可达的DirectByteBuffer对象及其堆外内存回收了，但是无法对old里的DirectByteBuffer对象及其堆外内存进行回收，这也是我们通常碰到的最大的问题，如果有大量的DirectByteBuffer对象移到了old，但是又一直没有做cms gc或者full gc，而只进行ygc，那么我们的物理内存可能被慢慢耗光，但是我们还不知道发生了什么，因为heap明明剩余的内存还很多(前提是我们禁用了System.gc)。</p>\n</li>\n</ul>\n","text":"JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结承接上文在整个JVM进程体系而言，不仅仅只包含了Heap堆内存...","permalink":"/post/JAVA/JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"MaxDirectMemorySize","slug":"MaxDirectMemorySize","count":1,"path":"api/categories/MaxDirectMemorySize.json"},{"name":"JAVA","slug":"MaxDirectMemorySize/JAVA","count":1,"path":"api/categories/MaxDirectMemorySize/JAVA.json"}],"tags":[{"name":"JVM","slug":"JVM","count":6,"path":"api/tags/JVM.json"},{"name":"java","slug":"java","count":2,"path":"api/tags/java.json"},{"name":"direct","slug":"direct","count":1,"path":"api/tags/direct.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JVM%E5%86%85%E5%AD%98%E4%B8%8EKubernetes%E4%B8%ADpod%E7%9A%84%E5%86%85%E5%AD%98%E3%80%81%E5%AE%B9%E5%99%A8%E7%9A%84%E5%86%85%E5%AD%98%E4%B8%8D%E4%B8%80%E8%87%B4%E6%89%80%E5%BC%95%E5%8F%91%E7%9A%84OOMKilled%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%BF%E6%8E%A5%E4%B8%8A%E6%96%87\"><span class=\"toc-text\">承接上文</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JVM%E5%8F%82%E6%95%B0MaxDirectMemorySize\"><span class=\"toc-text\">JVM参数MaxDirectMemorySize</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#XX-MaxDirectMemorySize%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">-XX:MaxDirectMemorySize的默认值是什么？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA%E5%88%86%E6%9E%90%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">结论分析说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E8%8E%B7%E5%8F%96-maxDirectMemory-%E7%9A%84%E5%80%BC%E7%9A%84API%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">其他获取 maxDirectMemory 的值的API方法</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">内存分析问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#XX-DisableExplicitGC-%E4%B8%8E-NIO%E7%9A%84direct-memory\"><span class=\"toc-text\">-XX:+DisableExplicitGC 与 NIO的direct memory</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"深入理解堆外内存 Metaspace","uid":"5d97a4bdf6449b8cb573c2f758d846ee","slug":"JAVA/深入理解堆外内存 Metaspace","date":"2024-04-03T10:36:07.000Z","updated":"2025-09-30T03:26:27.900Z","comments":true,"path":"api/articles/JAVA/深入理解堆外内存 Metaspace.json","keywords":"XuGuangSheng","cover":"/covers/metaspace.jpg","text":"深入理解堆外内存 Metaspace在之前介绍的分代垃圾回收算法中，我们一直有一个永久代存在，叫 PermGen，内存上它是挨着堆的。为了垃圾回收方便，HotS...","permalink":"/post/JAVA/深入理解堆外内存 Metaspace","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Metaspace","slug":"Metaspace","count":1,"path":"api/categories/Metaspace.json"},{"name":"JAVA","slug":"Metaspace/JAVA","count":1,"path":"api/categories/Metaspace/JAVA.json"}],"tags":[{"name":"Class","slug":"Class","count":1,"path":"api/tags/Class.json"},{"name":"Space","slug":"Space","count":1,"path":"api/tags/Space.json"},{"name":"metaspace","slug":"metaspace","count":1,"path":"api/tags/metaspace.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"ConditionalOnMissingBean失效问题追踪","uid":"81d9f9cbb43ffb5d74b9291c7102db6e","slug":"JAVA/ConditionalOnMissingBean失效问题追踪","date":"2024-04-01T18:25:44.000Z","updated":"2025-09-30T03:26:09.106Z","comments":true,"path":"api/articles/JAVA/ConditionalOnMissingBean失效问题追踪.json","keywords":"XuGuangSheng","cover":"/covers/conditionalonmissingbean.jpg","text":"ConditionalOnMissingBean失效问题追踪遇到一个@ConditionalOnMissingBean失效的问题，今天花点时间来分析一下。 现场...","permalink":"/post/JAVA/ConditionalOnMissingBean失效问题追踪","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"bean","slug":"bean","count":2,"path":"api/categories/bean.json"},{"name":"JAVA","slug":"bean/JAVA","count":2,"path":"api/categories/bean/JAVA.json"}],"tags":[{"name":"ConditionalOnMissingBean","slug":"ConditionalOnMissingBean","count":1,"path":"api/tags/ConditionalOnMissingBean.json"},{"name":"Configuration","slug":"Configuration","count":1,"path":"api/tags/Configuration.json"},{"name":"RunService","slug":"RunService","count":1,"path":"api/tags/RunService.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}