{"title":"使用spring validation完成数据后端校验","uid":"0432547e86941bc1570c73863bb3d6ac","slug":"JAVA/使用spring validation完成数据后端校验","date":"2022-10-07T14:04:24.000Z","updated":"2025-09-30T03:26:24.848Z","comments":true,"path":"api/articles/JAVA/使用spring validation完成数据后端校验.json","keywords":"XuGuangSheng","cover":"/covers/spring-validation.jpg","content":"<h1 id=\"使用spring-validation完成数据后端校验-徐靖峰的专栏-CSDN博客\"><a href=\"#使用spring-validation完成数据后端校验-徐靖峰的专栏-CSDN博客\" class=\"headerlink\" title=\"使用spring validation完成数据后端校验_徐靖峰的专栏-CSDN博客\"></a>使用spring validation完成数据后端校验_徐靖峰的专栏-CSDN博客</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>数据的校验是交互式网站一个不可或缺的功能，前端的 js 校验可以涵盖大部分的校验职责，如用户名唯一性，生日格式，邮箱格式校验等等常用的校验。但是为了避免用户绕过浏览器，使用 http 工具直接向后端请求一些违法数据，服务端的数据校验也是必要的，可以防止脏数据落到数据库中，如果数据库中出现一个非法的邮箱格式，也会让运维人员头疼不已。我在之前保险产品研发过程中，系统对数据校验要求比较严格且追求可变性及效率，曾使用 drools 作为规则引擎，兼任了校验的功能。而在一般的应用，可以使用本文将要介绍的 validation 来对数据进行校验。</p>\n<p>简述 JSR303&#x2F;JSR-349，hibernate validation，spring validation 之间的关系。JSR303 是一项标准, JSR-349 是其的升级版本，添加了一些新特性，他们规定一些校验规范即校验注解，如 @Null，@NotNull，@Pattern，他们位于 javax.validation.constraints 包下，只提供规范不提供实现。而 hibernate validation 是对这个规范的实践（不要将 hibernate 和数据库 orm 框架联系在一起），他提供了相应的实现，并增加了一些其他校验注解，如 @Email，@Length，@Range 等等，他们位于 org.hibernate.validator.constraints 包下。而万能的 spring 为了给开发者提供便捷，对 hibernate validation 进行了二次封装，显示校验 validated bean 时，你可以使用 spring validation 或者 hibernate validation，而 spring validation 另一个特性，便是其在 springmvc 模块中添加了自动校验，并将校验信息封装进了特定的类中。这无疑便捷了我们的 web 开发。本文主要介绍在 springmvc 中自动校验的机制。</p>\n<h2 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h2><p>我们使用 maven 构建 springboot 应用来进行 demo 演示。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们只需要引入 spring-boot-starter-web 依赖即可，如果查看其子依赖，可以发现如下的依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-validator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>验证了我之前的描述，web 模块使用了 hibernate-validation，并且 databind 模块也提供了相应的数据绑定功能。</p>\n<h2 id=\"构建启动类\"><a href=\"#构建启动类\" class=\"headerlink\" title=\"构建启动类\"></a>构建启动类</h2><p>无需添加其他注解，一个典型的启动类</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ValidateApp</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> <span class=\"title function_\">main</span>(<span class=\"params\"><span class=\"built_in\">String</span>[] args</span>) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">SpringApplication</span>.<span class=\"title function_\">run</span>(<span class=\"title class_\">ValidateApp</span>.<span class=\"property\">class</span>, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建需要被校验的实体类\"><a href=\"#创建需要被校验的实体类\" class=\"headerlink\" title=\"创建需要被校验的实体类\"></a>创建需要被校验的实体类</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">public</span> <span class=\"selector-tag\">class</span> <span class=\"selector-tag\">Foo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">@NotBlank</span></span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">@Min</span>(<span class=\"number\">18</span>)</span><br><span class=\"line\">    private Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">@Pattern</span>(regexp = <span class=\"string\">&quot;^1(3|4|5|7|8)\\\\d&#123;9&#125;$&quot;</span>,message = <span class=\"string\">&quot;手机号码格式错误&quot;</span>)</span><br><span class=\"line\">    <span class=\"variable\">@NotBlank</span>(message = <span class=\"string\">&quot;手机号码不能为空&quot;</span>)</span><br><span class=\"line\">    private String phone;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">@Email</span>(message = <span class=\"string\">&quot;邮箱格式错误&quot;</span>)</span><br><span class=\"line\">    private String email;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//... getter setter</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用一些比较常用的校验注解，还是比较浅显易懂的，字段上的注解名称即可推断出校验内容，每一个注解都包含了 message 字段，用于校验失败时作为提示信息，特殊的校验注解，如 Pattern（正则校验），还可以自己添加正则表达式。</p>\n<h2 id=\"在-Controller-中校验数据\"><a href=\"#在-Controller-中校验数据\" class=\"headerlink\" title=\"在 @Controller 中校验数据\"></a>在 @Controller 中校验数据</h2><p>springmvc 为我们提供了自动封装表单参数的功能，一个添加了参数校验的典型 controller 如下所示。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Controller</span></span><br><span class=\"line\">public class FooController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">@RequestMapping</span>(<span class=\"string\">&quot;/foo&quot;</span>)</span><br><span class=\"line\">    public String <span class=\"built_in\">foo</span>(<span class=\"variable\">@Validated</span> Foo foo &lt;<span class=\"number\">1</span>&gt;, BindingResult bindingResult &lt;<span class=\"number\">2</span>&gt;) &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">if</span>(bindingResult.<span class=\"built_in\">hasErrors</span>())&#123;</span><br><span class=\"line\">            <span class=\"selector-tag\">for</span> (FieldError <span class=\"attribute\">fieldError </span>: bindingResult.<span class=\"built_in\">getFieldErrors</span>()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//...</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return <span class=\"string\">&quot;fail&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>值得注意的地方：</p>\n<p>&lt;1&gt; 参数 Foo 前需要加上 @Validated 注解，表明需要 spring 对其进行校验，而校验的信息会存放到其后的 BindingResult 中。注意，必须相邻，如果有多个参数需要校验，形式可以如下。foo(@Validated Foo foo, BindingResult fooBindingResult ，@Validated Bar bar, BindingResult barBindingResult); 即一个校验类对应一个校验结果。</p>\n<p>&lt;2&gt; 校验结果会被自动填充，在 controller 中可以根据业务逻辑来决定具体的操作，如跳转到错误页面。</p>\n<p>一个最基本的校验就完成了，总结下框架已经提供了哪些校验：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSR提供的校验注解：         </span><br><span class=\"line\"><span class=\"meta\">@Null   被注释的元素必须为 null    </span></span><br><span class=\"line\"><span class=\"meta\">@NotNull    被注释的元素必须不为 null    </span></span><br><span class=\"line\"><span class=\"meta\">@AssertTrue     被注释的元素必须为 true    </span></span><br><span class=\"line\"><span class=\"meta\">@AssertFalse    被注释的元素必须为 false    </span></span><br><span class=\"line\"><span class=\"meta\">@Min(<span class=\"params\">value</span>)     被注释的元素必须是一个数字，其值必须大于等于指定的最小值    </span></span><br><span class=\"line\"><span class=\"meta\">@Max(<span class=\"params\">value</span>)     被注释的元素必须是一个数字，其值必须小于等于指定的最大值    </span></span><br><span class=\"line\"><span class=\"meta\">@DecimalMin(<span class=\"params\">value</span>)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值    </span></span><br><span class=\"line\"><span class=\"meta\">@DecimalMax(<span class=\"params\">value</span>)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值    </span></span><br><span class=\"line\"><span class=\"meta\">@Size(<span class=\"params\"><span class=\"built_in\">max</span>=, <span class=\"built_in\">min</span>=</span>)   被注释的元素的大小必须在指定的范围内    </span></span><br><span class=\"line\"><span class=\"meta\">@Digits (<span class=\"params\">integer, fraction</span>)     被注释的元素必须是一个数字，其值必须在可接受的范围内    </span></span><br><span class=\"line\"><span class=\"meta\">@Past   被注释的元素必须是一个过去的日期    </span></span><br><span class=\"line\"><span class=\"meta\">@Future     被注释的元素必须是一个将来的日期    </span></span><br><span class=\"line\"><span class=\"meta\">@Pattern(<span class=\"params\">regex=,flag=</span>)  被注释的元素必须符合指定的正则表达式    </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Hibernate Validator提供的校验注解：  </span><br><span class=\"line\"><span class=\"meta\">@NotBlank(<span class=\"params\">message =</span>)   验证字符串非null，且长度必须大于<span class=\"number\">0</span>    </span></span><br><span class=\"line\"><span class=\"meta\">@Email  被注释的元素必须是电子邮箱地址    </span></span><br><span class=\"line\"><span class=\"meta\">@Length(<span class=\"params\"><span class=\"built_in\">min</span>=,<span class=\"built_in\">max</span>=</span>)  被注释的字符串的大小必须在指定的范围内    </span></span><br><span class=\"line\"><span class=\"meta\">@NotEmpty   被注释的字符串的必须非空    </span></span><br><span class=\"line\"><span class=\"meta\">@Range(<span class=\"params\"><span class=\"built_in\">min</span>=,<span class=\"built_in\">max</span>=,message=</span>)  被注释的元素必须在合适的范围内</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"校验实验\"><a href=\"#校验实验\" class=\"headerlink\" title=\"校验实验\"></a>校验实验</h2><p>我们对上面实现的校验入口进行一次测试请求：<br>访问 <a href=\"http://localhost:8080/foo?name=xujingfeng&email=000&age=19\">http://localhost:8080/foo?name=xujingfeng&email=000&age=19</a> 可以得到如下的 debug 信息：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/f0a8a23be57b205e68c479bee9f82c95.png\"></p>\n<p>实验告诉我们，校验结果起了作用。并且，可以发现当发生多个错误，spring validation 不会在第一个错误发生后立即停止，而是继续试错，告诉我们所有的错误。debug 可以查看到更多丰富的错误信息，这些都是 spring validation 为我们提供的便捷特性，基本适用于大多数场景。</p>\n<p>你可能不满足于简单的校验特性，下面进行一些补充。</p>\n<h2 id=\"分组校验\"><a href=\"#分组校验\" class=\"headerlink\" title=\"分组校验\"></a>分组校验</h2><p>如果同一个类，在不同的使用场景下有不同的校验规则，那么可以使用分组校验。未成年人是不能喝酒的，而在其他场景下我们不做特殊的限制，这个需求如何体现同一个实体，不同的校验规则呢？</p>\n<p>改写注解，添加分组：</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Class</span> Foo&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @<span class=\"built_in\">Min</span>(<span class=\"keyword\">value</span> = <span class=\"number\">18</span>,groups = &#123;Adult.<span class=\"keyword\">class</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">Integer</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> Adult&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> Minor&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这样表明，只有在 Adult 分组下，18 岁的限制才会起作用。</p>\n<p>Controller 层改写：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">&quot;/drink&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title class_\">String</span> <span class=\"title function_\">drink</span>(<span class=\"params\"><span class=\"meta\">@Validated</span>(&#123;Foo.Adult.<span class=\"keyword\">class</span>&#125;) Foo foo, BindingResult bindingResult</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bindingResult.<span class=\"title function_\">hasErrors</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"title class_\">FieldError</span> fieldError : bindingResult.<span class=\"title function_\">getFieldErrors</span>()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;fail&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">&quot;/live&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title class_\">String</span> <span class=\"title function_\">live</span>(<span class=\"params\"><span class=\"meta\">@Validated</span> Foo foo, BindingResult bindingResult</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bindingResult.<span class=\"title function_\">hasErrors</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"title class_\">FieldError</span> fieldError : bindingResult.<span class=\"title function_\">getFieldErrors</span>()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;fail&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>drink 方法限定需要进行 Adult 校验，而 live 方法则不做限制。</p>\n<h2 id=\"自定义校验\"><a href=\"#自定义校验\" class=\"headerlink\" title=\"自定义校验\"></a>自定义校验</h2><p>业务需求总是比框架提供的这些简单校验要复杂的多，我们可以自定义校验来满足我们的需求。自定义 spring validation 非常简单，主要分为两步。</p>\n<p>1 自定义校验注解<br>我们尝试添加一个 “字符串不能包含空格” 的限制。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@Target</span>(&#123;METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER&#125;)</span><br><span class=\"line\"><span class=\"keyword\">@Retention</span>(RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">@Constraint</span>(validatedBy = &#123;CannotHaveBlankValidator<span class=\"selector-class\">.class</span>&#125;)&lt;<span class=\"number\">1</span>&gt;</span><br><span class=\"line\">public <span class=\"keyword\">@interface</span> CannotHaveBlank &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//默认错误消息</span></span><br><span class=\"line\">    String <span class=\"built_in\">message</span>() default &quot;不能包含空格&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//分组</span></span><br><span class=\"line\">    Class&lt;?&gt;<span class=\"selector-attr\">[]</span> <span class=\"built_in\">groups</span>() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//负载</span></span><br><span class=\"line\">    Class&lt;? extends Payload&gt;<span class=\"selector-attr\">[]</span> <span class=\"built_in\">payload</span>() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//指定多个时使用</span></span><br><span class=\"line\">    <span class=\"keyword\">@Target</span>(&#123;FIELD, METHOD, PARAMETER, ANNOTATION_TYPE&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">@Retention</span>(RUNTIME)</span><br><span class=\"line\">    <span class=\"keyword\">@Documented</span></span><br><span class=\"line\">    <span class=\"keyword\">@interface</span> List &#123;</span><br><span class=\"line\">        CannotHaveBlank<span class=\"selector-attr\">[]</span> <span class=\"built_in\">value</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们不需要关注太多东西，使用 spring validation 的原则便是便捷我们的开发，例如 payload，List ，groups，都可以忽略。</p>\n<p>&lt;1&gt; 自定义注解中指定了这个注解真正的验证者类。</p>\n<p>2 编写真正的校验者类</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CannotHaveBlankValidator</span> <span class=\"keyword\">implements</span> &lt;<span class=\"number\">1</span>&gt; <span class=\"title class_\">ConstraintValidator</span>&lt;<span class=\"title class_\">CannotHaveBlank</span>, <span class=\"title class_\">String</span>&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">CannotHaveBlank constraintAnnotation</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> <span class=\"title function_\">isValid</span>(<span class=\"params\"><span class=\"built_in\">String</span> value, ConstraintValidatorContext context &lt;<span class=\"number\">2</span>&gt;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//null时不进行校验</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value != <span class=\"literal\">null</span> &amp;&amp; value.<span class=\"title function_\">contains</span>(<span class=\"string\">&quot; &quot;</span>)) &#123;</span><br><span class=\"line\">            &lt;<span class=\"number\">3</span>&gt;</span><br><span class=\"line\">            <span class=\"comment\">//获取默认提示信息</span></span><br><span class=\"line\">            <span class=\"title class_\">String</span> defaultConstraintMessageTemplate = context.<span class=\"title function_\">getDefaultConstraintMessageTemplate</span>();</span><br><span class=\"line\">            <span class=\"title class_\">System</span>.<span class=\"property\">out</span>.<span class=\"title function_\">println</span>(<span class=\"string\">&quot;default message :&quot;</span> + defaultConstraintMessageTemplate);</span><br><span class=\"line\">            <span class=\"comment\">//禁用默认提示信息</span></span><br><span class=\"line\">            context.<span class=\"title function_\">disableDefaultConstraintViolation</span>();</span><br><span class=\"line\">            <span class=\"comment\">//设置提示语</span></span><br><span class=\"line\">            context.<span class=\"title function_\">buildConstraintViolationWithTemplate</span>(<span class=\"string\">&quot;can not contains blank&quot;</span>).<span class=\"title function_\">addConstraintViolation</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>&lt;1&gt; 所有的验证者都需要实现 ConstraintValidator 接口，它的接口也很形象，包含一个初始化事件方法，和一个判断是否合法的方法。</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"symbol\">ConstraintValidator</span>&lt;<span class=\"symbol\">A</span> <span class=\"symbol\">extends</span> <span class=\"symbol\">Annotation</span>, <span class=\"symbol\">T</span>&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">void</span> initialize(A constraintAnnotation);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">bool</span>ean isValid(T value, ConstraintValidatorContext context);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>&lt;2&gt; ConstraintValidatorContext 这个上下文包含了认证中所有的信息，我们可以利用这个上下文实现获取默认错误提示信息，禁用错误提示信息，改写错误提示信息等操作。</p>\n<p>&lt;3&gt; 一些典型校验操作，或许可以对你产生启示作用。</p>\n<p>值得注意的一点是，自定义注解可以用在<code>METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER</code>之上，ConstraintValidator 的第二个泛型参数 T，是需要被校验的类型。</p>\n<h2 id=\"手动校验\"><a href=\"#手动校验\" class=\"headerlink\" title=\"手动校验\"></a>手动校验</h2><p>可能在某些场景下需要我们手动校验，即使用校验器对需要被校验的实体发起 validate，同步获得校验结果。理论上我们既可以使用 Hibernate Validation 提供 Validator，也可以使用 Spring 对其的封装。在 spring 构建的项目中，提倡使用经过 spring 封装过后的方法，这里两种方法都介绍下：</p>\n<p>Hibernate Validation：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foo foo = <span class=\"built_in\">new</span> Foo();</span><br><span class=\"line\">foo.setAge(<span class=\"number\">22</span>);</span><br><span class=\"line\">foo.setEmail(&quot;000&quot;);</span><br><span class=\"line\">ValidatorFactory vf = Validation.buildDefaultValidatorFactory();</span><br><span class=\"line\"><span class=\"keyword\">Validator</span> <span class=\"keyword\">validator</span> = vf.getValidator();</span><br><span class=\"line\"><span class=\"keyword\">Set</span>&lt;ConstraintViolation&lt;Foo&gt;&gt; <span class=\"keyword\">set</span> = <span class=\"keyword\">validator</span>.<span class=\"keyword\">validate</span>(foo);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (ConstraintViolation&lt;Foo&gt; constraintViolation : <span class=\"keyword\">set</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">System</span>.<span class=\"keyword\">out</span>.println(constraintViolation.getMessage());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>由于依赖了 Hibernate Validation 框架，我们需要调用 Hibernate 相关的工厂方法来获取 validator 实例，从而校验。</p>\n<p>在 spring framework 文档的 Validation 相关章节，可以看到如下的描述：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spring provides full support for the Bean Validation API. This includes convenient support for bootstrapping a JSR-303&#x2F;JSR-349 Bean Validation provider as a Spring bean. This allows for a javax.validation.ValidatorFactory or javax.validation.Validator to be injected wherever validation is needed in your application. Use the LocalValidatorFactoryBean to configure a default Validator as a Spring bean:</p>\n<p>bean id&#x3D;”validator” class&#x3D;”org.springframework.validation.beanvalidation.LocalValidatorFactoryBean”</p>\n<p>The basic configuration above will trigger Bean Validation to initialize using its default bootstrap mechanism. A JSR-303&#x2F;JSR-349 provider, such as Hibernate Validator, is expected to be present in the classpath and will be detected automatically.</p></blockquote>\n<p>上面这段话主要描述了 spring 对 validation 全面支持 JSR-303、JSR-349 的标准，并且封装了 LocalValidatorFactoryBean 作为 validator 的实现。值得一提的是，这个类的责任其实是非常重大的，他兼容了 spring 的 validation 体系和 hibernate 的 validation 体系，也可以被开发者直接调用，代替上述的从工厂方法中获取的 hibernate validator。由于我们使用了 springboot，会触发 web 模块的自动配置，LocalValidatorFactoryBean 已经成为了 Validator 的默认实现，使用时只需要自动注入即可。</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">Validator <span class=\"keyword\">global</span>Validator; <span class=\"variable\">&lt;1&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">@RequestMapping(<span class=\"string\">&quot;/validate&quot;</span>)</span><br><span class=\"line\">public String validate() &#123;</span><br><span class=\"line\">    Foo foo = new Foo();</span><br><span class=\"line\">    foo.<span class=\"built_in\">set</span>Age(<span class=\"number\">22</span>);</span><br><span class=\"line\">    foo.<span class=\"built_in\">set</span>Email(<span class=\"string\">&quot;000&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Set<span class=\"variable\">&lt;ConstraintViolation&lt;Foo&gt;</span>&gt; <span class=\"built_in\">set</span> = <span class=\"keyword\">global</span>Validator.validate(foo);<span class=\"variable\">&lt;2&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ConstraintViolation<span class=\"variable\">&lt;Foo&gt;</span> constraintViolation : <span class=\"built_in\">set</span>) &#123;</span><br><span class=\"line\">        System.<span class=\"keyword\">out</span>.println(constraintViolation.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>&lt;1&gt; 真正使用过 Validator 接口的读者会发现有两个接口，一个是位于 javax.validation 包下，另一个位于 org.springframework.validation 包下，注意我们这里使用的是前者 javax.validation，后者是 spring 自己内置的校验接口，LocalValidatorFactoryBean 同时实现了这两个接口。</p>\n<p>&lt;2&gt; 此处校验接口最终的实现类便是 LocalValidatorFactoryBean。</p>\n<h2 id=\"基于方法校验\"><a href=\"#基于方法校验\" class=\"headerlink\" title=\"基于方法校验\"></a>基于方法校验</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@Validated</span> &lt;<span class=\"number\">1</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BarController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">&quot;/bar&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"meta\">@NotBlank</span> &lt;<span class=\"number\">2</span>&gt; <span class=\"title class_\">String</span> <span class=\"title function_\">bar</span>(<span class=\"params\"><span class=\"meta\">@Min</span>(<span class=\"number\">18</span>) Integer age &lt;<span class=\"number\">3</span>&gt;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">System</span>.<span class=\"property\">out</span>.<span class=\"title function_\">println</span>(<span class=\"string\">&quot;age : &quot;</span> + age);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(<span class=\"title class_\">ConstraintViolationException</span>.<span class=\"property\">class</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title class_\">Map</span> <span class=\"title function_\">handleConstraintViolationException</span>(<span class=\"params\">ConstraintViolationException cve</span>)&#123;</span><br><span class=\"line\">        <span class=\"title class_\">Set</span>&lt;<span class=\"title class_\">ConstraintViolation</span>&lt;?&gt;&gt; cves = cve.<span class=\"title function_\">getConstraintViolations</span>();&lt;<span class=\"number\">4</span>&gt;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"title class_\">ConstraintViolation</span>&lt;?&gt; constraintViolation : cves) &#123;</span><br><span class=\"line\">            <span class=\"title class_\">System</span>.<span class=\"property\">out</span>.<span class=\"title function_\">println</span>(constraintViolation.<span class=\"title function_\">getMessage</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title class_\">Map</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">        map.<span class=\"title function_\">put</span>(<span class=\"string\">&quot;errorCode&quot;</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>&lt;1&gt; 为类添加 @Validated 注解</p>\n<p>&lt;2&gt; &lt;3&gt; 校验方法的返回值和入参</p>\n<p>&lt;4&gt; 添加一个异常处理器，可以获得没有通过校验的属性相关信息</p>\n<p>基于方法的校验，个人不推荐使用，感觉和项目结合的不是很好。</p>\n<h2 id=\"使用校验框架的一些想法\"><a href=\"#使用校验框架的一些想法\" class=\"headerlink\" title=\"使用校验框架的一些想法\"></a>使用校验框架的一些想法</h2><p>理论上 spring validation 可以实现很多复杂的校验，你甚至可以使你的 Validator 获取 ApplicationContext，获取 spring 容器中所有的资源，进行诸如数据库校验，注入其他校验工具，完成组合校验（如前后密码一致）等等操作，但是寻求一个易用性和封装复杂性之间的平衡点是我们作为工具使用者应该考虑的，我推崇的方式，是仅仅使用自带的注解和自定义注解，完成一些简单的，可复用的校验。而对于复杂的校验，则包含在业务代码之中，毕竟如用户名是否存在这样的校验，仅仅依靠数据库查询还不够，为了避免并发问题，还是得加上唯一索引之类的额外工作，不是吗？<br> <a href=\"https://blog.csdn.net/u013815546/article/details/77248003\">https://blog.csdn.net/u013815546/article/details/77248003</a></p>\n","text":"使用spring validation完成数据后端校验_徐靖峰的专栏-CSDN博客前言数据的校验是交互式网站一个不可或缺的功能，前端的 js 校验可以涵盖大部分...","permalink":"/post/JAVA/使用spring validation完成数据后端校验","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"validation","slug":"validation","count":1,"path":"api/categories/validation.json"},{"name":"JAVA","slug":"validation/JAVA","count":1,"path":"api/categories/validation/JAVA.json"}],"tags":[{"name":"spring","slug":"spring","count":4,"path":"api/tags/spring.json"},{"name":"JSR","slug":"JSR","count":1,"path":"api/tags/JSR.json"},{"name":"hibernate","slug":"hibernate","count":1,"path":"api/tags/hibernate.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8spring-validation%E5%AE%8C%E6%88%90%E6%95%B0%E6%8D%AE%E5%90%8E%E7%AB%AF%E6%A0%A1%E9%AA%8C-%E5%BE%90%E9%9D%96%E5%B3%B0%E7%9A%84%E4%B8%93%E6%A0%8F-CSDN%E5%8D%9A%E5%AE%A2\"><span class=\"toc-text\">使用spring validation完成数据后端校验_徐靖峰的专栏-CSDN博客</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">引入依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA%E5%90%AF%E5%8A%A8%E7%B1%BB\"><span class=\"toc-text\">构建启动类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E9%9C%80%E8%A6%81%E8%A2%AB%E6%A0%A1%E9%AA%8C%E7%9A%84%E5%AE%9E%E4%BD%93%E7%B1%BB\"><span class=\"toc-text\">创建需要被校验的实体类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8-Controller-%E4%B8%AD%E6%A0%A1%E9%AA%8C%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">在 @Controller 中校验数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%A1%E9%AA%8C%E5%AE%9E%E9%AA%8C\"><span class=\"toc-text\">校验实验</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%BB%84%E6%A0%A1%E9%AA%8C\"><span class=\"toc-text\">分组校验</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%A1%E9%AA%8C\"><span class=\"toc-text\">自定义校验</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E6%A0%A1%E9%AA%8C\"><span class=\"toc-text\">手动校验</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E6%96%B9%E6%B3%95%E6%A0%A1%E9%AA%8C\"><span class=\"toc-text\">基于方法校验</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%A0%A1%E9%AA%8C%E6%A1%86%E6%9E%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95\"><span class=\"toc-text\">使用校验框架的一些想法</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Zookeeper客户端Curator使用详解","uid":"b3c9ac518ccca39bee20ee352e4467cb","slug":"JAVA/Zookeeper客户端Curator使用详解","date":"2022-10-07T14:04:24.000Z","updated":"2025-09-30T03:26:22.151Z","comments":true,"path":"api/articles/JAVA/Zookeeper客户端Curator使用详解.json","keywords":"XuGuangSheng","cover":"/covers/zookeepercurator.jpg","text":"Zookeeper客户端Curator使用详解 - 简书Curator 是 Netflix 公司开源的一套 zookeeper 客户端框架，解决了很多 Zook...","permalink":"/post/JAVA/Zookeeper客户端Curator使用详解","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"Zookeeper","slug":"Zookeeper","count":2,"path":"api/categories/Zookeeper.json"},{"name":"JAVA","slug":"Zookeeper/JAVA","count":2,"path":"api/categories/Zookeeper/JAVA.json"}],"tags":[{"name":"Curator","slug":"Curator","count":2,"path":"api/tags/Curator.json"},{"name":"注意","slug":"注意","count":1,"path":"api/tags/注意.json"},{"name":"Cache","slug":"Cache","count":2,"path":"api/tags/Cache.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"掌握MyBatis插件原理轻松写出自己的PageHelper分页插件","uid":"39567589e8d82514e8e405343a06adf8","slug":"JAVA/掌握MyBatis插件原理轻松写出自己的PageHelper分页插件","date":"2022-10-07T14:04:24.000Z","updated":"2025-09-30T03:26:26.405Z","comments":true,"path":"api/articles/JAVA/掌握MyBatis插件原理轻松写出自己的PageHelper分页插件.json","keywords":"XuGuangSheng","cover":"/covers/mybatispagehelper.jpg","text":"掌握MyBatis插件原理轻松写出自己的PageHelper分页插件-阿里云开发者社区在 MyBatis 中插件式通过拦截器来实现的，那么既然是通过拦截器来实现...","permalink":"/post/JAVA/掌握MyBatis插件原理轻松写出自己的PageHelper分页插件","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"https","slug":"https","count":12,"path":"api/categories/https.json"},{"name":"JAVA","slug":"https/JAVA","count":5,"path":"api/categories/https/JAVA.json"}],"tags":[{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"raw","slug":"raw","count":5,"path":"api/tags/raw.json"},{"name":"githubusercontent","slug":"githubusercontent","count":3,"path":"api/tags/githubusercontent.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}