{"title":"ThreadLocal系列（一）-ThreadLocal的使用及原理解析","uid":"55a6aea8b4cb4859de314d4babde9ef4","slug":"JAVA/ThreadLocal系列（一）-ThreadLocal的使用及原理解析","date":"2021-08-16T16:17:55.000Z","updated":"2025-09-30T03:26:21.878Z","comments":true,"path":"api/articles/JAVA/ThreadLocal系列（一）-ThreadLocal的使用及原理解析.json","keywords":"XuGuangSheng","cover":"/covers/threadlocal-threadlocal.jpg","content":"<h1 id=\"ThreadLocal系列（一）-ThreadLocal的使用及原理解析\"><a href=\"#ThreadLocal系列（一）-ThreadLocal的使用及原理解析\" class=\"headerlink\" title=\"ThreadLocal系列（一）-ThreadLocal的使用及原理解析\"></a>ThreadLocal系列（一）-ThreadLocal的使用及原理解析</h1><h2 id=\"一、基本使用\"><a href=\"#一、基本使用\" class=\"headerlink\" title=\"一、基本使用\"></a>一、基本使用</h2><p>先来看下基本用法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">ThreadLocal</span> <span class=\"variable\">tl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        tl.set(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">&quot;当前线程名称: , main方法内获取线程内数据为: &quot;</span>,</span><br><span class=\"line\">                Thread.currentThread().getName(), tl.get()));</span><br><span class=\"line\">        fc();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(ThreadLocalTest::fc).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">IT</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">&quot;当前线程名称: , fc方法内获取线程内数据为: &quot;</span>,</span><br><span class=\"line\">                Thread.currentThread().getName(), tl.get()));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">当前线程名称: main, main方法内获取线程内数据为: <span class=\"number\">1</span></span><br><span class=\"line\">当前线程名称: main, fc方法内获取线程内数据为: <span class=\"number\">1</span></span><br><span class=\"line\">当前线程名称: Thread-<span class=\"number\">0</span>, fc方法内获取线程内数据为: <span class=\"literal\">null</span>```</span><br><span class=\"line\"></span><br><span class=\"line\">可以看到，main线程内任意地方都可以通过ThreadLocal获取到当前线程内被设置进去的值，而被异步出去的fc调用，却由于替换了执行线程，而拿不到任何数据值，那么我们现在再来改造下上述代码，在异步发生之前，给Thread-<span class=\"number\">0</span>线程也设置一个上下文数据：</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">ThreadLocal</span> <span class=\"variable\">tl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        tl.set(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">&quot;当前线程名称: , main方法内获取线程内数据为: &quot;</span>,</span><br><span class=\"line\">                Thread.currentThread().getName(), tl.get()));</span><br><span class=\"line\">        fc();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            tl.set(<span class=\"number\">2</span>); </span><br><span class=\"line\">            fc();</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000L</span>); </span><br><span class=\"line\">        fc(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">&quot;当前线程名称: , fc方法内获取线程内数据为: &quot;</span>,</span><br><span class=\"line\">                Thread.currentThread().getName(), tl.get()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">````</span><br><span class=\"line\"></span><br><span class=\"line\">运行结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"></span><br><span class=\"line\">当前线程名称: main, main方法内获取线程内数据为: <span class=\"number\">1</span></span><br><span class=\"line\">当前线程名称: main, fc方法内获取线程内数据为: <span class=\"number\">1</span></span><br><span class=\"line\">当前线程名称: Thread-<span class=\"number\">0</span>, fc方法内获取线程内数据为: <span class=\"number\">2</span></span><br><span class=\"line\">当前线程名称: main, fc方法内获取线程内数据为: <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，主线程和子线程都可以获取到自己的那份上下文里的内容，而且互不影响。</p>\n<h2 id=\"二、原理分析\"><a href=\"#二、原理分析\" class=\"headerlink\" title=\"二、原理分析\"></a>二、原理分析</h2><p>ok，上面通过一个简单的例子，我们可以了解到 ThreadLocal（以下简称 TL）具体的用法，这里先不讨论它实质上能给我们带来什么好处，先看看其实现原理，等这些差不多了解完了，我再通过我曾经做过的一个项目，去说明 TL 的作用以及在企业级项目里的用处。</p>\n<p>我以前在不了解 TL 的时候，想着如果让自己实现一个这种功能的轮子，自己会怎么做，那时候的想法很单纯，觉得通过一个 Map 就可以解决，Map 的 key 设置为 Thread.currentThread()，value 设置为当前线程的本地变量即可，但后来想想就觉得不太现实了，实际项目中可能存在大量的异步线程，对于内存的开销是不可估量的，而且还有个严重的问题，线程是运行结束后就销毁的，如果按照上述的实现方案，map 内是一直持有这个线程的引用的，导致明明执行结束的线程对象不能被 jvm 回收，造成内存泄漏，时间久了，会直接 OOM。</p>\n<p>所以，java 里的实现肯定不是这么简单的，下面，就来看看 java 里的具体实现吧。</p>\n<p>先来了解下，TL 的基本实现，为了避免上述中出现的问题，TL 实际上是把我们设置进去的值以 k-v 的方式放到了每个 Thread 对象内（TL 对象做 k，设置的值做 v），也就是说，TL 对象仅仅起到一个标记、对 Thread 对象维护的 map 赋值的作用。</p>\n<p>先从 set 方法看起：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread(); </span><br><span class=\"line\">        ThreadLocal.<span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> getMap(t); </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            map.set(<span class=\"built_in\">this</span>, value); </span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            createMap(t, value); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ThreadLocal.ThreadLocalMap <span class=\"title function_\">getMap</span><span class=\"params\">(Thread t)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t.threadLocals; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(ThreadLocal&lt;?&gt; key, Object value)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ThreadLocal.ThreadLocalMap.Entry[] tab = table; </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> tab.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> key.threadLocalHashCode &amp; (len-<span class=\"number\">1</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ThreadLocal.ThreadLocalMap.<span class=\"type\">Entry</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> tab[i];</span><br><span class=\"line\">             e != <span class=\"literal\">null</span>;</span><br><span class=\"line\">             e = tab[i = nextIndex(i, len)]) &#123; </span><br><span class=\"line\">            ThreadLocal&lt;?&gt; k = e.get(); </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == key) &#123; </span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == <span class=\"literal\">null</span>) &#123; </span><br><span class=\"line\">                replaceStaleEntry(key, value, i);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        tab[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>.ThreadLocalMap.Entry(key, value);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sz</span> <span class=\"operator\">=</span> ++size;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold) </span><br><span class=\"line\">            rehash(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">createMap</span><span class=\"params\">(Thread t, T firstValue)</span> &#123;</span><br><span class=\"line\">        t.threadLocals = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>.ThreadLocalMap(<span class=\"built_in\">this</span>, firstValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class=\"line\">        table = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>.ThreadLocalMap.Entry[INITIAL_CAPACITY]; </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class=\"number\">1</span>); </span><br><span class=\"line\">        table[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>.ThreadLocalMap.Entry(firstKey, firstValue); </span><br><span class=\"line\">        size = <span class=\"number\">1</span>;</span><br><span class=\"line\">        setThreshold(INITIAL_CAPACITY); </span><br><span class=\"line\">    &#125;```</span><br><span class=\"line\"></span><br><span class=\"line\">通过上述代码，我们大致了解了TL在set值的时候发生的一些操作，结合之前说的，我们可以确定的是，TL其实对于线程来说，只是一个标识，而真正线程的**本地变量**被保存在每个线程对象的**ThreadLocalMap**里，这个map里维护着一个**Entry\\[\\]的数组（散列表）**，Entry是个k-v结构的对象（如图<span class=\"number\">1</span>-<span class=\"number\">1</span>），k为TL对象，v为对应TL保存在该线程内的本地变量值，值得注意的是，这里的k针对TL对象的引用是个**弱引用**，来看下源码：</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Entry</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            Object value;</span><br><span class=\"line\"></span><br><span class=\"line\">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">super</span>(k);</span><br><span class=\"line\">                value = v;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">````</span><br><span class=\"line\"></span><br><span class=\"line\">为什么这里需要弱引用呢？我们先来看一张图，结合上面的介绍和这张图，来了解 TL 和 Thread 间的关系：</span><br><span class=\"line\"></span><br><span class=\"line\">![](https:<span class=\"comment\">//raw.githubusercontent.com/dandeliono/img/main/resource/1ab684fa5a180984ec313bbe716435b2.png)</span></span><br><span class=\"line\"></span><br><span class=\"line\">**图 <span class=\"number\">1</span>-<span class=\"number\">1</span>**</span><br><span class=\"line\"></span><br><span class=\"line\">图中虚线表示弱引用，那么为什么要这么做呢？</span><br><span class=\"line\"></span><br><span class=\"line\">简单来说，一个 TL 对象被创建出来，并且被一个线程放到自己的 ThreadLocalMap 里，假如 TL 对象失去原有的强引用，但是该线程还没有死亡，如果 k 不是弱引用，那么就意味着 TL 并不能被回收，现在 k 为弱引用，那么在 TL 失去强引用的时候，gc 可以直接回收掉它，弱引用失效，这就是上面代码里会进行检查，k=<span class=\"literal\">null</span> 的清除释放内存的原因（这个可以参考下面**expungeStaleEntry**方法，而且 set、get、remove 都会调用该方法，这也是 TL 防止内存泄漏所做的处理）。</span><br><span class=\"line\"></span><br><span class=\"line\">综上，简单来说这个**弱引用**就是用来解决由于使用 TL 不当导致的**内存泄漏**问题的，假如没有弱引用，那么你又用到了线程池（**池化后线程不会被销毁**），然后 TL 对象又是**局部**的，那么就会导致线程池内线程里的**ThreadLocalMap**存在大量的无意义的 TL 对象引用，造成过多无意义的 Entry 对象，因为即便调用了 set、get 等方法检查 k=<span class=\"literal\">null</span>，也没有作用，这就导致了**内存泄漏**，长时间这样最终可能导致 OOM，所以 TL 的开发者为了解决这种问题，就将 ThreadLocalMap 里对 TL 对象的引用改为**弱引用**，一旦 TL 对象失去**强引用**，TL 对象就会被回收，那么这里的**弱引用**指向的值就为 <span class=\"literal\">null</span>，结合上面说的，调用操作方法时会检查 k=<span class=\"literal\">null</span> 的 Entry 进行回收，从而避免了内存泄漏的可能性。</span><br><span class=\"line\"></span><br><span class=\"line\">因为 TL 解决了内存泄漏的问题，因此即便是局部变量的 TL 对象且启用线程池技术，也比较难造成内存泄漏的问题，而且我们经常使用的场景就像一开始的示例代码一样，会初始化一个**全局的 <span class=\"keyword\">static</span> 的 TL 对象**，这就意味着该对象在程序运行期间都不会存在强引用消失的情况，我们可以利用不同的 TL 对象给不同的 Thread 里的 ThreadLocalMap 赋值，通常会 set 值（覆盖原有值），因此在使用线程池的时候也不会造成问题，异步开始之前 set 值，用完以后 remove，TL 对象可以多次得到使用，启用线程池的情况下如果不这样做，很可能业务逻辑也会出问题（一个线程存在之前执行程序时遗留下来的本地变量，一旦这个线程被再次利用，get 时就会拿到之前的脏值）；</span><br><span class=\"line\"></span><br><span class=\"line\">说完了 set，我们再来看下 get：</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> T <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        ThreadLocal.<span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> getMap(t); </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ThreadLocal.ThreadLocalMap.<span class=\"type\">Entry</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> map.getEntry(<span class=\"built_in\">this</span>); </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                <span class=\"type\">T</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (T)e.value;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> setInitialValue(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ThreadLocal.ThreadLocalMap.Entry <span class=\"title function_\">getEntry</span><span class=\"params\">(ThreadLocal&lt;?&gt; key)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> key.threadLocalHashCode &amp; (table.length - <span class=\"number\">1</span>); </span><br><span class=\"line\">        ThreadLocal.ThreadLocalMap.<span class=\"type\">Entry</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> table[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span> &amp;&amp; e.get() == key) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> getEntryAfterMiss(key, i, e); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ThreadLocal.ThreadLocalMap.Entry <span class=\"title function_\">getEntryAfterMiss</span><span class=\"params\">(ThreadLocal&lt;?&gt; key, <span class=\"type\">int</span> i, ThreadLocal.ThreadLocalMap.Entry e)</span> &#123;</span><br><span class=\"line\">        ThreadLocal.ThreadLocalMap.Entry[] tab = table;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> tab.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (e != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ThreadLocal&lt;?&gt; k = e.get(); </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == key) </span><br><span class=\"line\">                <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == <span class=\"literal\">null</span>) </span><br><span class=\"line\">                expungeStaleEntry(i);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> </span><br><span class=\"line\">                i = nextIndex(i, len);</span><br><span class=\"line\">            e = tab[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">nextIndex</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((i + <span class=\"number\">1</span> &lt; len) ? i + <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后再来看看 remove 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        ThreadLocal.<span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> getMap(Thread.currentThread());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            m.remove(<span class=\"built_in\">this</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">(ThreadLocal&lt;?&gt; key)</span> &#123;</span><br><span class=\"line\">        ThreadLocal.ThreadLocalMap.Entry[] tab = table;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> tab.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> key.threadLocalHashCode &amp; (len-<span class=\"number\">1</span>); </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ThreadLocal.ThreadLocalMap.<span class=\"type\">Entry</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> tab[i];</span><br><span class=\"line\">             e != <span class=\"literal\">null</span>;</span><br><span class=\"line\">             e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e.get() == key) &#123; </span><br><span class=\"line\">                e.clear(); </span><br><span class=\"line\">                expungeStaleEntry(i); </span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">expungeStaleEntry</span><span class=\"params\">(<span class=\"type\">int</span> staleSlot)</span> &#123; </span><br><span class=\"line\">        ThreadLocal.ThreadLocalMap.Entry[] tab = table;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> tab.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        tab[staleSlot].value = <span class=\"literal\">null</span>; </span><br><span class=\"line\">        tab[staleSlot] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        ThreadLocal.ThreadLocalMap.Entry e;</span><br><span class=\"line\">        <span class=\"type\">int</span> i;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = nextIndex(staleSlot, len);</span><br><span class=\"line\">             (e = tab[i]) != <span class=\"literal\">null</span>;</span><br><span class=\"line\">             i = nextIndex(i, len)) &#123;</span><br><span class=\"line\">            ThreadLocal&lt;?&gt; k = e.get();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == <span class=\"literal\">null</span>) &#123; </span><br><span class=\"line\">                e.value = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                tab[i] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                size--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> k.threadLocalHashCode &amp; (len - <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (h != i) &#123;</span><br><span class=\"line\">                    tab[i] = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    </span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (tab[h] != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                        h = nextIndex(h, len);</span><br><span class=\"line\">                    tab[h] = e;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","text":"ThreadLocal系列（一）-ThreadLocal的使用及原理解析一、基本使用先来看下基本用法： 123456789101112131415 privat...","permalink":"/post/JAVA/ThreadLocal系列（一）-ThreadLocal的使用及原理解析","photos":[],"count_time":{"symbolsCount":"9.2k","symbolsTime":"8 mins."},"categories":[{"name":"set","slug":"set","count":1,"path":"api/categories/set.json"},{"name":"JAVA","slug":"set/JAVA","count":1,"path":"api/categories/set/JAVA.json"}],"tags":[{"name":"Thread","slug":"Thread","count":1,"path":"api/tags/Thread.json"},{"name":"ThreadLocalMap","slug":"ThreadLocalMap","count":1,"path":"api/tags/ThreadLocalMap.json"},{"name":"ThreadLocal","slug":"ThreadLocal","count":1,"path":"api/tags/ThreadLocal.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ThreadLocal%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89-ThreadLocal%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">ThreadLocal系列（一）-ThreadLocal的使用及原理解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">一、基本使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90\"><span class=\"toc-text\">二、原理分析</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"从Java多线程可见性谈Happens-Before原则","uid":"dbb584f30bfc75da44387b6e286da8d6","slug":"JAVA/从Java多线程可见性谈Happens-Before原则","date":"2021-08-16T16:25:22.000Z","updated":"2025-09-30T03:26:24.608Z","comments":true,"path":"api/articles/JAVA/从Java多线程可见性谈Happens-Before原则.json","keywords":"XuGuangSheng","cover":"/covers/javahappens-before.jpg","text":"从Java多线程可见性谈Happens-Before原则Happens-Before 是一个非常抽象的概念，然而它又是学习 Java 并发编程不可跨域的部分。本...","permalink":"/post/JAVA/从Java多线程可见性谈Happens-Before原则","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[{"name":"CPU","slug":"CPU","count":5,"path":"api/categories/CPU.json"},{"name":"JAVA","slug":"CPU/JAVA","count":1,"path":"api/categories/CPU/JAVA.json"}],"tags":[{"name":"volatile","slug":"volatile","count":2,"path":"api/tags/volatile.json"},{"name":"Happens","slug":"Happens","count":1,"path":"api/tags/Happens.json"},{"name":"Before","slug":"Before","count":1,"path":"api/tags/Before.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Nginx gzip参数详解及常见问题","uid":"a03cc162cee41bf570dc5f1147b3943c","slug":"MIDDLEWARE/Nginx gzip参数详解及常见问题","date":"2021-08-16T16:16:06.000Z","updated":"2025-09-30T03:26:49.416Z","comments":true,"path":"api/articles/MIDDLEWARE/Nginx gzip参数详解及常见问题.json","keywords":"XuGuangSheng","cover":"/covers/nginx-gzip.jpg","text":"Nginx gzip参数详解及常见问题1、Nginx gzip 功能Nginx 实现资源压缩的原理是通过 ngx_http_gzip_module 模块拦截请求...","permalink":"/post/MIDDLEWARE/Nginx gzip参数详解及常见问题","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"gzip","slug":"gzip","count":1,"path":"api/categories/gzip.json"},{"name":"MIDDLEWARE","slug":"gzip/MIDDLEWARE","count":1,"path":"api/categories/gzip/MIDDLEWARE.json"}],"tags":[{"name":"如果","slug":"如果","count":2,"path":"api/tags/如果.json"},{"name":"http","slug":"http","count":6,"path":"api/tags/http.json"},{"name":"启用压缩","slug":"启用压缩","count":1,"path":"api/tags/启用压缩.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}