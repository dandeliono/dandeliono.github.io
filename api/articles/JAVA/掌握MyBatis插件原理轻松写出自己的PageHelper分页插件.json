{"title":"掌握MyBatis插件原理轻松写出自己的PageHelper分页插件","uid":"39567589e8d82514e8e405343a06adf8","slug":"JAVA/掌握MyBatis插件原理轻松写出自己的PageHelper分页插件","date":"2022-10-07T14:04:24.000Z","updated":"2025-09-30T03:26:26.405Z","comments":true,"path":"api/articles/JAVA/掌握MyBatis插件原理轻松写出自己的PageHelper分页插件.json","keywords":"XuGuangSheng","cover":"/covers/mybatispagehelper.jpg","content":"<h1 id=\"掌握MyBatis插件原理轻松写出自己的PageHelper分页插件-阿里云开发者社区\"><a href=\"#掌握MyBatis插件原理轻松写出自己的PageHelper分页插件-阿里云开发者社区\" class=\"headerlink\" title=\"掌握MyBatis插件原理轻松写出自己的PageHelper分页插件-阿里云开发者社区\"></a>掌握MyBatis插件原理轻松写出自己的PageHelper分页插件-阿里云开发者社区</h1><p>在 MyBatis 中插件式通过拦截器来实现的，那么既然是通过拦截器来实现的，就会有一个问题，哪些对象才允许被拦截呢？</p>\n<p>真正执行 Sql 的是四大对象：Executor，StatementHandler，ParameterHandler，ResultSetHandler。</p>\n<p>而 MyBatis 的插件正是基于拦截这四大对象来实现的。需要注意的是，虽然我们可以拦截这四大对象，但是并不是这四大对象中的所有方法都能被拦截，下面就是官网提供的可拦截的对象和方法汇总：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/7e2df7988394015cff0c5a8d15547b03.png\"></p>\n<p>首先我们先来通过一个例子来看看如何使用插件。</p>\n<h2 id=\"1、-首先建立一个-MyPlugin-实现接口-Interceptor，然后重写其中的三个方法-注意，这里必须要实现-Interceptor-接口，否则无法被拦截-。\"><a href=\"#1、-首先建立一个-MyPlugin-实现接口-Interceptor，然后重写其中的三个方法-注意，这里必须要实现-Interceptor-接口，否则无法被拦截-。\" class=\"headerlink\" title=\"1、 首先建立一个 MyPlugin 实现接口 Interceptor，然后重写其中的三个方法 (注意，这里必须要实现 Interceptor 接口，否则无法被拦截)。\"></a>1、 首先建立一个 MyPlugin 实现接口 Interceptor，然后重写其中的三个方法 (注意，这里必须要实现 Interceptor 接口，否则无法被拦截)。</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lonelyWolf.mybatis.plugin;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.ibatis.executor.Executor;</span><br><span class=\"line\">import org.apache.ibatis.mapping.MappedStatement;</span><br><span class=\"line\">import org.apache.ibatis.plugin.*;</span><br><span class=\"line\">import org.apache.ibatis.session.ResultHandler;</span><br><span class=\"line\">import org.apache.ibatis.session.RowBounds;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\">@Intercepts(&#123;@Signature(type = Executor.class,method = &quot;query&quot;,args = &#123;MappedStatement.class,Object.class, RowBounds.class, ResultHandler.class&#125;)&#125;)</span><br><span class=\"line\">public class MyPlugin implements Interceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object intercept(Invocation invocation) throws Throwable &#123;</span><br><span class=\"line\">        System.out.println(&quot;成功拦截了Executor的query方法，在这里我可以做点什么&quot;);</span><br><span class=\"line\">        return invocation.proceed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object plugin(Object target) &#123;</span><br><span class=\"line\">        return Plugin.wrap(target,this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void setProperties(Properties properties) &#123;</span><br><span class=\"line\">        System.out.println(&quot;自定义属性:userName-&gt;&quot; + properties.getProperty(&quot;userName&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@Intercepts 是声明当前类是一个拦截器，后面的 @Signature 是标识需要拦截的方法签名，通过以下三个参数来确定</p>\n<p>(1)type：被拦截的类名</p>\n<p>(2)method：被拦截的方法名</p>\n<p>(3)args：标注方法的参数类型</p>\n<h2 id=\"2、-我们还需要在-mybatis-config-中配置好插件。\"><a href=\"#2、-我们还需要在-mybatis-config-中配置好插件。\" class=\"headerlink\" title=\"2、 我们还需要在 mybatis-config 中配置好插件。\"></a>2、 我们还需要在 mybatis-config 中配置好插件。</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugins&gt;</span><br><span class=\"line\">    &lt;plugin interceptor=&quot;com.lonelyWolf.mybatis.plugin.MyPlugin&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;userName&quot; value=&quot;张三&quot;/&gt;</span><br><span class=\"line\">    &lt;/plugin&gt;</span><br><span class=\"line\">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里如果配置了 property 属性，那么我们可以在 setProperties 获取到。</p>\n<p>完成以上两步，我们就完成了一个插件的配置了，接下来我们运行一下：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/4385028c1413a4e18e2d2e549e365260.png\"></p>\n<p>可以看到，setProperties 方法在加载配置文件阶段就会被执行了。</p>\n<p>接下来让我们分析一下从插件的加载到初始化到运行整个过程的实现原理。</p>\n<h2 id=\"插件的加载\"><a href=\"#插件的加载\" class=\"headerlink\" title=\"插件的加载\"></a>插件的加载</h2><p>既然插件需要在配置文件中进行配置，那么肯定就需要进行解析，我们看看插件式如何被解析的。我们进入 XMLConfigBuilder 类看看<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/8e5cabfc234fcbc41207f8162bc31cf0.png\"></p>\n<p>解析出来之后会将插件存入 InterceptorChain 对象的 list 属性<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/ff8c7a901e6b4a7d5bfcd183cf823573.png\"></p>\n<p>看到 InterceptorChain 我们是不是可以联想到，MyBatis 的插件就是通过责任链模式实现的。</p>\n<p>既然插件类已经被加载到配置文件了，那么接下来就有一个问题了，插件类何时会被拦截我们需要拦截的对象呢？</p>\n<p>其实插件的拦截是和对象有关的，不同的对象进行拦截的时间也会不一致，接下来我们就逐一分析一下。</p>\n<h2 id=\"拦截-Executor-对象\"><a href=\"#拦截-Executor-对象\" class=\"headerlink\" title=\"拦截 Executor 对象\"></a>拦截 Executor 对象</h2><p>我们知道，SqlSession 对象是通过 openSession() 方法返回的，而 Executor 又是属于 SqlSession 内部对象，所以让我们跟随 openSession 方法去看一下 Executor 对象的初始化过程。<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/253c6a0e2529aa8655d7e4359b2858d6.png\"></p>\n<p>可以看到，当初始化完成 Executor 之后，会调用 interceptorChain 的 pluginAll 方法，pluginAll 方法本身非常简单，就是把我们存到 list 中的插件进行循环，并调用 Interceptor 对象的 plugin 方法：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/dd57de886d41dc1f6c9b8a54783e02ce.png\"></p>\n<p>再次点击进去：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/a65391c5d46ee475a0e484d2ead4bf32.png\"></p>\n<p>到这里我们是不是发现很熟悉，没错，这就是我们上面示例中重写的方法，而 plugin 方法是接口中的一个默认方法。</p>\n<p>这个方法是关键，我们进去看看：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/508faf68a3c2ae9152dcd52a1f9e9f67.png\"></p>\n<p>可以看到这个方法的逻辑也很简单，但是需要注意的是 MyBatis 插件是通过 JDK 动态代理来实现的。</p>\n<p>而 JDK 动态代理的条件就是被代理对象必须要有接口，这一点和 Spring 中不太一样，Spring 中是如果有接口就采用 JDK 动态代理，没有接口就是用 CGLIB 动态代理。</p>\n<p>正因为 MyBatis 的插件只使用了 JDK 动态代理，所以我们上面才强调了一定要实现 Interceptor 接口。</p>\n<p>而代理之后汇之星 Plugin 的 invoke 方法，我们最后再来看看 invoke 方法：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/33cb00b55afdadfe30fdf74dceca581c.png\"></p>\n<p>而最终执行的 intercept 方法，就是我们上面示例中重写的方法。</p>\n<h2 id=\"其他对象插件解析\"><a href=\"#其他对象插件解析\" class=\"headerlink\" title=\"其他对象插件解析\"></a>其他对象插件解析</h2><p>接下来我们再看看 StatementHandler，StatementHandler 是在 Executor 中的 doQuery 方法创建的，其实这个原理就是一样的了，找到初始化 StatementHandler 对象的方法：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/0496e0e85adaf02d08b9a86adc9b7711.png\"></p>\n<p>进去之后里面执行的也是 pluginAll 方法：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/371aac4d89338c208087b86bc0b9441b.png\"></p>\n<p>其他两个对象就不在举例了，其实搜一下全局就很明显了：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/0dc61b005568da222d1c24c6e8c1ace2.png\"></p>\n<p>四个对象初始化的时候都会调用 pluginAll 来进行判定是否有被代理。</p>\n<p>下面就是实现了插件之后的执行时序图：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/6cb36938b865aa60689fc61574e695b6.png\"></p>\n<p>一个对象是否可以被多个代理对象进行代理？也就是说同一个对象的同一个方法是否可以被多个拦截器进行拦截？</p>\n<p>答案是肯定的，因为被代理对象是被加入到 list，所以我们配置在最前面的拦截器最先被代理，但是执行的时候却是最外层的先执行。</p>\n<p>具体点：</p>\n<p>假如依次定义了三个插件：插件 A，插件 B 和 插件 C。</p>\n<p>那么 List 中就会按顺序存储：插件 A，插件 B 和 插件 C。</p>\n<p>而解析的时候是遍历 list，所以解析的时候也是按照：插件 A，插件 B 和 插件 C 的顺序。</p>\n<p>但是执行的时候就要反过来了，执行的时候是按照：插件 C，插件 B 和插件 A 的顺序进行执行。</p>\n<p>上面我们了解了在 MyBatis 中的插件是如何定义以及 MyBatis 中是如何处理插件的，接下来我们就以经典分页插件 PageHelper 为例来进一步加深理解。</p>\n<p>首先我们看看 PageHelper 的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lonelyWolf.mybatis;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\">import com.github.pagehelper.Page;</span><br><span class=\"line\">import com.github.pagehelper.PageHelper;</span><br><span class=\"line\">import com.github.pagehelper.PageInfo;</span><br><span class=\"line\">import com.lonelyWolf.mybatis.mapper.UserMapper;</span><br><span class=\"line\">import com.lonelyWolf.mybatis.model.LwUser;</span><br><span class=\"line\">import org.apache.ibatis.executor.result.DefaultResultHandler;</span><br><span class=\"line\">import org.apache.ibatis.io.Resources;</span><br><span class=\"line\">import org.apache.ibatis.session.ResultHandler;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyBatisByPageHelp &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        String resource = &quot;mybatis-config.xml&quot;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">        </span><br><span class=\"line\">        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class=\"line\">        </span><br><span class=\"line\">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class=\"line\"></span><br><span class=\"line\">        PageHelper.startPage(0,10);</span><br><span class=\"line\">        UserMapper userMapper = session.getMapper(UserMapper.class);</span><br><span class=\"line\">        List&lt;LwUser&gt; userList = userMapper.listAllUser();</span><br><span class=\"line\">        PageInfo&lt;LwUser&gt; pageList = new PageInfo&lt;&gt;(userList);</span><br><span class=\"line\">        System.out.println(null == pageList ? &quot;&quot;: JSONObject.toJSONString(pageList));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出如下结果：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/6741f7be67213bf81ceff89d50caae95.png\"></p>\n<p>可以看到对象已经被分页，那么这是如何做到的呢？</p>\n<p>我们上面提到，要实现插件必须要实现 MyBatis 提供的 Interceptor 接口，所以我们去找一下，发现 PageHeler 实现了 Interceptor：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/a21b5aa6aaa5679799d5acaee8ea43cf.png\"></p>\n<p>经过上面的介绍这个类应该一眼就能看懂，我们关键要看看 SqlUtil 的 intercept 方法做了什么：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/16b44f4ef5f7f6a87d742b485ab571c7.png\"></p>\n<p>这个方法的逻辑比较多，因为要考虑到不同的数据库方言的问题，所以会有很多判断，我们主要是关注 PageHelper 在哪里改写了 sql 语句，上图中的红框就是改写了 sql 语句的地方：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/2524bbb353418cab5ecb480d10754dcf.png\"></p>\n<p>这里面会获取到一个 Page 对象，然后在爱写 sql 的时候也会将一些分页参数设置到 Page 对象，我们看看 Page 对象是从哪里获取的：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/6e875d6f14e9eaf3d2b06fd67b878d65.png\"></p>\n<p>我们看到对象是从 LOCAL_PAGE 对象中获取的，这个又是什么呢？<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/2188b9563ca21cec6c69e3e0ba585080.png\"></p>\n<p>这是一个本地线程池变量，那么这里面的 Page 又是什么时候存进去的呢？这就要回到我们的示例上了，分页的开始必须要调用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PageHelper.startPage(0,10);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/dbae7de5b442f10db57e7a2d393adb6a.png\"></p>\n<p>这里就会构建一个 Page 对象，并设置到 ThreadLocal 内。</p>\n<h2 id=\"为什么-PageHelper-只对-startPage-后的第一条-select-语句有效\"><a href=\"#为什么-PageHelper-只对-startPage-后的第一条-select-语句有效\" class=\"headerlink\" title=\"为什么 PageHelper 只对 startPage 后的第一条 select 语句有效\"></a>为什么 PageHelper 只对 startPage 后的第一条 select 语句有效</h2><p>这个其实也很简单哈，但是可能会有人有这个以为，我们还是要回到上面的 intercept 方法：<br><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/e0a2e944f16a5bc214015ff204c7624f.png\"></p>\n<p>在 finally 内把 ThreadLocal 中的分页数据给清除掉了，所以只要执行一次查询语句就会清除分页信息，故而后面的 select 语句自然就无效了。<br> <a href=\"https://developer.aliyun.com/article/780497\">https://developer.aliyun.com/article/780497</a></p>\n","text":"掌握MyBatis插件原理轻松写出自己的PageHelper分页插件-阿里云开发者社区在 MyBatis 中插件式通过拦截器来实现的，那么既然是通过拦截器来实现...","permalink":"/post/JAVA/掌握MyBatis插件原理轻松写出自己的PageHelper分页插件","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"https","slug":"https","count":12,"path":"api/categories/https.json"},{"name":"JAVA","slug":"https/JAVA","count":5,"path":"api/categories/https/JAVA.json"}],"tags":[{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"raw","slug":"raw","count":5,"path":"api/tags/raw.json"},{"name":"githubusercontent","slug":"githubusercontent","count":3,"path":"api/tags/githubusercontent.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8E%8C%E6%8F%A1MyBatis%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86%E8%BD%BB%E6%9D%BE%E5%86%99%E5%87%BA%E8%87%AA%E5%B7%B1%E7%9A%84PageHelper%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6-%E9%98%BF%E9%87%8C%E4%BA%91%E5%BC%80%E5%8F%91%E8%80%85%E7%A4%BE%E5%8C%BA\"><span class=\"toc-text\">掌握MyBatis插件原理轻松写出自己的PageHelper分页插件-阿里云开发者社区</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81-%E9%A6%96%E5%85%88%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA-MyPlugin-%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3-Interceptor%EF%BC%8C%E7%84%B6%E5%90%8E%E9%87%8D%E5%86%99%E5%85%B6%E4%B8%AD%E7%9A%84%E4%B8%89%E4%B8%AA%E6%96%B9%E6%B3%95-%E6%B3%A8%E6%84%8F%EF%BC%8C%E8%BF%99%E9%87%8C%E5%BF%85%E9%A1%BB%E8%A6%81%E5%AE%9E%E7%8E%B0-Interceptor-%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%90%A6%E5%88%99%E6%97%A0%E6%B3%95%E8%A2%AB%E6%8B%A6%E6%88%AA-%E3%80%82\"><span class=\"toc-text\">1、 首先建立一个 MyPlugin 实现接口 Interceptor，然后重写其中的三个方法 (注意，这里必须要实现 Interceptor 接口，否则无法被拦截)。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81-%E6%88%91%E4%BB%AC%E8%BF%98%E9%9C%80%E8%A6%81%E5%9C%A8-mybatis-config-%E4%B8%AD%E9%85%8D%E7%BD%AE%E5%A5%BD%E6%8F%92%E4%BB%B6%E3%80%82\"><span class=\"toc-text\">2、 我们还需要在 mybatis-config 中配置好插件。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%92%E4%BB%B6%E7%9A%84%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">插件的加载</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8B%A6%E6%88%AA-Executor-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">拦截 Executor 对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E5%AF%B9%E8%B1%A1%E6%8F%92%E4%BB%B6%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">其他对象插件解析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88-PageHelper-%E5%8F%AA%E5%AF%B9-startPage-%E5%90%8E%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9D%A1-select-%E8%AF%AD%E5%8F%A5%E6%9C%89%E6%95%88\"><span class=\"toc-text\">为什么 PageHelper 只对 startPage 后的第一条 select 语句有效</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"使用spring validation完成数据后端校验","uid":"0432547e86941bc1570c73863bb3d6ac","slug":"JAVA/使用spring validation完成数据后端校验","date":"2022-10-07T14:04:24.000Z","updated":"2025-09-30T03:26:24.848Z","comments":true,"path":"api/articles/JAVA/使用spring validation完成数据后端校验.json","keywords":"XuGuangSheng","cover":"/covers/spring-validation.jpg","text":"使用spring validation完成数据后端校验_徐靖峰的专栏-CSDN博客前言数据的校验是交互式网站一个不可或缺的功能，前端的 js 校验可以涵盖大部分...","permalink":"/post/JAVA/使用spring validation完成数据后端校验","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"validation","slug":"validation","count":1,"path":"api/categories/validation.json"},{"name":"JAVA","slug":"validation/JAVA","count":1,"path":"api/categories/validation/JAVA.json"}],"tags":[{"name":"spring","slug":"spring","count":4,"path":"api/tags/spring.json"},{"name":"JSR","slug":"JSR","count":1,"path":"api/tags/JSR.json"},{"name":"hibernate","slug":"hibernate","count":1,"path":"api/tags/hibernate.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"记一次spring boot 功能模块化 freemarker只能识别一个resources目录下前端展示模板问题","uid":"b118a4f61bac8ee2550c64d69640d355","slug":"JAVA/记一次spring boot 功能模块化 freemarker只能识别一个resources目录下前端展示模板问题","date":"2022-10-07T14:04:24.000Z","updated":"2025-09-30T03:26:29.807Z","comments":true,"path":"api/articles/JAVA/记一次spring boot 功能模块化 freemarker只能识别一个resources目录下前端展示模板问题.json","keywords":"XuGuangSheng","cover":"/covers/spring-boot-freemarkerresources.jpg","text":"记一次spring boot 功能模块化 freemarker只能识别一个resources目录下前端展示模板问题 - 一枚码农的个人空间 - OSCHINA ...","permalink":"/post/JAVA/记一次spring boot 功能模块化 freemarker只能识别一个resources目录下前端展示模板问题","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"resource","slug":"resource","count":1,"path":"api/categories/resource.json"},{"name":"JAVA","slug":"resource/JAVA","count":1,"path":"api/categories/resource/JAVA.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"raw","slug":"raw","count":5,"path":"api/tags/raw.json"},{"name":"freemarker","slug":"freemarker","count":1,"path":"api/tags/freemarker.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}