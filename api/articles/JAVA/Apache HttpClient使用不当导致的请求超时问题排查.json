{"title":"Apache HttpClient使用不当导致的请求超时问题排查","uid":"f2f3d8a736517daef67fee74c45d8b64","slug":"JAVA/Apache HttpClient使用不当导致的请求超时问题排查","date":"2023-05-09T10:27:18.000Z","updated":"2025-09-30T03:26:06.642Z","comments":true,"path":"api/articles/JAVA/Apache HttpClient使用不当导致的请求超时问题排查.json","keywords":"XuGuangSheng","cover":"/covers/apache-httpclient.jpg","content":"<h1 id=\"Apache-HttpClient使用不当导致的请求超时问题排查\"><a href=\"#Apache-HttpClient使用不当导致的请求超时问题排查\" class=\"headerlink\" title=\"Apache HttpClient使用不当导致的请求超时问题排查\"></a>Apache HttpClient使用不当导致的请求超时问题排查</h1><p>Apache HttpClient使用不当导致的请求超时问题排查</p>\n<p>近期负责的线上应用出现调用失败的问题，排查后发现是HttpClient相关的问题，特此记录一下。</p>\n<p>因为涉及线上数据安全隐私，模拟生产的应用写了demo，模拟一定的并发请求复现该问题。</p>\n<h2 id=\"1-问题介绍\"><a href=\"#1-问题介绍\" class=\"headerlink\" title=\"1 问题介绍\"></a>1 问题介绍</h2><p>收到线上告警通知：外部服务调用某应用A大量报错，平均响应时常很长，经常有请求超时的情况。</p>\n<h2 id=\"1-初步排查\"><a href=\"#1-初步排查\" class=\"headerlink\" title=\"1 初步排查\"></a>1 初步排查</h2><h3 id=\"1-1-查连接情况\"><a href=\"#1-1-查连接情况\" class=\"headerlink\" title=\"1.1 查连接情况\"></a>1.1 查连接情况</h3><p>外部请求是http请求，所以可以查一下连接的情况。对应 java 进程的连接数：</p>\n<p>具体的连接情况：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ae9598a187c47f1a9682e84bbaa7e6f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@sky ~]</span><br><span class=\"line\">400</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>应用的 8080 端口有400个连接。</p>\n<h3 id=\"1-2-查线程情况\"><a href=\"#1-2-查线程情况\" class=\"headerlink\" title=\"1.2 查线程情况\"></a>1.2 查线程情况</h3><p>平均响应时常比较长，一般是线程长时间在等待某个步骤完成。查一下应用的线程执行情况：</p>\n<p>执行命令 <code>jstack 8433 | less</code></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/757e493ae9c940f083f2a0e17f8d7667~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\"></p>\n<p>jstack的日志中有很多类似上面图中的线程，处于 <code>TIME_WAITING</code>状态，而下面的堆栈中，HttpClientUtils.httpGet()是使用 Apache HttpClient 工具封装的 http 请求函数，PoolHttpClientConnectionManager.leaseConnection() 看上去是在等待获取连接。大概分析得出：有很多线程在执行过程中，等待HttpClient获取连接。</p>\n<h3 id=\"1-3-查应用异常日志\"><a href=\"#1-3-查应用异常日志\" class=\"headerlink\" title=\"1.3 查应用异常日志\"></a>1.3 查应用异常日志</h3><p>查一下应用的日志，寻找线索，在日志中看到许多下面的异常日志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2022-07-24 21:47:44.765 ERROR 82381 --- [pool-2-thread-7] com.skyme.TestController                 : error:</span><br><span class=\"line\"></span><br><span class=\"line\">org.apache.http.conn.ConnectionPoolTimeoutException: Timeout waiting <span class=\"keyword\">for</span> connection from pool</span><br><span class=\"line\">\tat org.apache.http.impl.conn.PoolingHttpClientConnectionManager.leaseConnection(PoolingHttpClientConnectionManager.java:286) ~[httpclient-4.5.2.jar:4.5.2]</span><br><span class=\"line\">\tat org.apache.http.impl.conn.PoolingHttpClientConnectionManager<span class=\"variable\">$1</span>.get(PoolingHttpClientConnectionManager.java:263) ~[httpclient-4.5.2.jar:4.5.2]</span><br><span class=\"line\">\tat org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:190) ~[httpclient-4.5.2.jar:4.5.2]</span><br><span class=\"line\">\tat org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184) ~[httpclient-4.5.2.jar:4.5.2]</span><br><span class=\"line\">\tat org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88) ~[httpclient-4.5.2.jar:4.5.2]</span><br><span class=\"line\">\tat org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110) ~[httpclient-4.5.2.jar:4.5.2]</span><br><span class=\"line\">\tat org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184) ~[httpclient-4.5.2.jar:4.5.2]</span><br><span class=\"line\">\tat org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82) ~[httpclient-4.5.2.jar:4.5.2]</span><br><span class=\"line\">\tat org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:107) ~[httpclient-4.5.2.jar:4.5.2]</span><br><span class=\"line\">\tat com.skyme.HttpClientUtils.httpGet(HttpClientUtils.java:31) ~[classes/:na]</span><br><span class=\"line\">\tat com.skyme.TestController.lambda$batchHttpCall<span class=\"variable\">$0</span>(TestController.java:47) ~[classes/:na]</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_73]</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor<span class=\"variable\">$Worker</span>.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_73]</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_73]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-初步结论\"><a href=\"#1-4-初步结论\" class=\"headerlink\" title=\"1.4 初步结论\"></a>1.4 初步结论</h3><p>外部有大量请求，很多请求的处理线程在等待 HttpClient 获取连接，问题应该在 HttpClient 。</p>\n<h2 id=\"2-进一步排查\"><a href=\"#2-进一步排查\" class=\"headerlink\" title=\"2 进一步排查\"></a>2 进一步排查</h2><h3 id=\"2-1-分析-HttpClient\"><a href=\"#2-1-分析-HttpClient\" class=\"headerlink\" title=\"2.1 分析 HttpClient\"></a>2.1 分析 HttpClient</h3><p>日志里两个关键信息：</p>\n<p>1.是HttpClient内部报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.apache.http.conn.ConnectionPoolTimeoutException: Timeout waiting <span class=\"keyword\">for</span> connection from pool</span><br><span class=\"line\">\tat org.apache.http.impl.conn.PoolingHttpClientConnectionManager.leaseConnection(PoolingHttpClientConnectionManager.java:286) ~[httpclient-4.5.2.jar:4.5.2]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对应的源码<code>org.apache.http.impl.conn.PoolingHttpClientConnectionManager.leaseConnection(PoolingHttpClientConnectionManager.java:286)</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> HttpClientConnection <span class=\"title function_\">leaseConnection</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> Future&lt;CPoolEntry&gt; future,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> <span class=\"type\">long</span> timeout,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> TimeUnit tunit)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException, ConnectionPoolTimeoutException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> CPoolEntry entry;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        entry = future.get(timeout, tunit); </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entry == <span class=\"literal\">null</span> || future.isCancelled()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Asserts.check(entry.getConnection() != <span class=\"literal\">null</span>, <span class=\"string\">&quot;Pool entry with no connection&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.log.isDebugEnabled()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.log.debug(<span class=\"string\">&quot;Connection leased: &quot;</span> + format(entry) + formatStats(entry.getRoute()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CPoolProxy.newProxy(entry);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> TimeoutException ex) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionPoolTimeoutException</span>(<span class=\"string\">&quot;Timeout waiting for connection from pool&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>抛出<code>ConnectionPoolTimeoutException</code>是因为触发了<code>TimeoutException</code>异常，而<code>TimeoutException</code>异常对应于<code>entry = future.get(timeout, tunit);</code></p>\n<p><code>PoolingHttpClientConnectionManager.leaseConnection</code> 是为了获取连接，分析一下其执行流程，摘录一下网上博客（<a href=\"https://link.juejin.cn/?target=https://segmentfault.com/a/1190000012343705%25EF%25BC%2589\" title=\"https://segmentfault.com/a/1190000012343705%EF%BC%89\">segmentfault.com&#x2F;a&#x2F;119000001…</a> 获取connection时序图：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c39f5355f2b44cb39d1599e6b7f07e00~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\"></p>\n<p>重点的步骤：</p>\n<p>1.如果route下有空闲连接，则直接返回空闲连接</p>\n<p>2.如果没有空闲连接，且该connPerRoute及池中conn数均没有达到最大值，的conn数没有达到最大值，则创建连接，并放入池中，并返回该连接</p>\n<p>3.如果没有空闲连接，且达到了maxRoute或maxPoolsize，则阻塞等待，等待的时常，便是<code>entry = future.get(timeout, tunit);</code>中的 <code>timeout</code> 时长。如果指定的时间没有 lease 到 connection ，则 <code>entry = future.get(timeout, tunit);</code> 会抛出 <code>TimeoutException</code> 异常。</p>\n<p>一般 pool 设计都是和上面的类似，我们继续分析一下 httpclient pool 的结构 ：</p>\n<p>图片摘录自 (<a href=\"https://link.juejin.cn/?target=https://www.pudn.com/news/628f83a6bf399b7f351ea6f2.html\" title=\"https://www.pudn.com/news/628f83a6bf399b7f351ea6f2.html\">www.pudn.com/news/628f83…</a>) <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2079bf528745401686ccef4277093cd4~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\"></p>\n<p><code>PoolEntry&lt;HttpRoute, OperatedClientConnection&gt;</code>: 路由和连接的对应关系。</p>\n<p><code>routeToPool</code>: 可以多个（图中仅示例两个），图中各队列大小动态变化，并不相等。</p>\n<p><code>maxTotal</code>: 限制的是外层 <code>httpConnPool</code> 中 <code>leased</code> 集合和 <code>available</code> 队列的总和的大小，<code>httpConnPool</code> 的 <code>leased</code> 和 <code>available</code> 的大小没有单独限制。</p>\n<p><code>maxPerRoute</code>: 限制的是每个 <code>routeToPool</code> 中 <code>leased</code> 集合和 <code>available</code> 队列的总和的大小。</p>\n<p>一步步跟踪源码<code>entry = future.get(timeout, tunit);</code>，定位到核心调用处 <code>org.apache.http.pool.AbstractConnPool#getPoolEntryBlocking()</code> ，对应源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> E <span class=\"title function_\">getPoolEntryBlocking</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> T route, <span class=\"keyword\">final</span> Object state,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> <span class=\"type\">long</span> timeout, <span class=\"keyword\">final</span> TimeUnit tunit,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> PoolEntryFuture&lt;E&gt; future)</span></span><br><span class=\"line\">            <span class=\"keyword\">throws</span> IOException, InterruptedException, TimeoutException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Date</span> <span class=\"variable\">deadline</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeout &gt; <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">        deadline = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span></span><br><span class=\"line\">            (System.currentTimeMillis() + tunit.toMillis(timeout));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">final</span> RouteSpecificPool&lt;T, C, E&gt; pool = getPool(route);</span><br><span class=\"line\">        <span class=\"type\">E</span> <span class=\"variable\">entry</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (entry == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            Asserts.check(!<span class=\"built_in\">this</span>.isShutDown, <span class=\"string\">&quot;Connection pool shut down&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                entry = pool.getFree(state);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (entry == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (entry.isExpired(System.currentTimeMillis())) &#123;</span><br><span class=\"line\">                    entry.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.validateAfterInactivity &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (entry.getUpdated() + <span class=\"built_in\">this</span>.validateAfterInactivity &lt;= System.currentTimeMillis()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!validate(entry)) &#123;</span><br><span class=\"line\">                            entry.close();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (entry.isClosed()) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.available.remove(entry);</span><br><span class=\"line\">                    pool.free(entry, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (entry != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.available.remove(entry);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.leased.add(entry);</span><br><span class=\"line\">                onReuse(entry);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> entry;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">maxPerRoute</span> <span class=\"operator\">=</span> getMax(route);</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">excess</span> <span class=\"operator\">=</span> Math.max(<span class=\"number\">0</span>, pool.getAllocatedCount() + <span class=\"number\">1</span> - maxPerRoute);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (excess &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; excess; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"type\">E</span> <span class=\"variable\">lastUsed</span> <span class=\"operator\">=</span> pool.getLastUsed();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lastUsed == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    lastUsed.close();</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.available.remove(lastUsed);</span><br><span class=\"line\">                    pool.remove(lastUsed);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pool.getAllocatedCount() &lt; maxPerRoute) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">totalUsed</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.leased.size();</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">freeCapacity</span> <span class=\"operator\">=</span> Math.max(<span class=\"built_in\">this</span>.maxTotal - totalUsed, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (freeCapacity &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">totalAvailable</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.available.size();</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (totalAvailable &gt; freeCapacity - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.available.isEmpty()) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">final</span> <span class=\"type\">E</span> <span class=\"variable\">lastUsed</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.available.removeLast();</span><br><span class=\"line\">                            lastUsed.close();</span><br><span class=\"line\">                            <span class=\"keyword\">final</span> RouteSpecificPool&lt;T, C, E&gt; otherpool = getPool(lastUsed.getRoute());</span><br><span class=\"line\">                            otherpool.remove(lastUsed);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"type\">C</span> <span class=\"variable\">conn</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.connFactory.create(route);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    entry = pool.add(conn);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.leased.add(entry);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> entry;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">success</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                pool.queue(future);</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"built_in\">this</span>.pending.add(future);</span><br><span class=\"line\">                </span><br><span class=\"line\">                success = future.await(deadline);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                pool.unqueue(future);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.pending.remove(future);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!success &amp;&amp; (deadline != <span class=\"literal\">null</span>) &amp;&amp;</span><br><span class=\"line\">                (deadline.getTime() &lt;= System.currentTimeMillis())) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TimeoutException</span>(<span class=\"string\">&quot;Timeout waiting for connection&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>综合分析：</p>\n<ul>\n<li>通过线程池获取连接要通过 ReetrantLock 加锁，保证线程安全</li>\n<li>不论是大连接池还是小连接池，当超过数量的时候，都要通过LRU释放一些连接</li>\n<li>如果拿到了可用连接，则返回给上层使用</li>\n<li>如果没有拿到可用连接，HttpClient 会判断当前 route 连接池是否已经超过了最大数量，没有到上限就会新建一个连接，并放入池中</li>\n<li>如果到达了上限，就排队等待，等到了信号量，就重新获得一次，等待不到就抛 TimeoutException</li>\n</ul>\n<h4 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h4><p>池类的设计，不管是连接池，线程池，一般不够用的场景，都是最大数设置的不够大，不足以应对并发获取连接、线程等？</p>\n<h3 id=\"2-2-确认HttpClient-实际情况\"><a href=\"#2-2-确认HttpClient-实际情况\" class=\"headerlink\" title=\"2.2 确认HttpClient 实际情况\"></a>2.2 确认HttpClient 实际情况</h3><p>上面的都是猜想，最终问题定位还是要摸清实际情况。</p>\n<h4 id=\"应用里是如何创建-HttpClient-实例\"><a href=\"#应用里是如何创建-HttpClient-实例\" class=\"headerlink\" title=\"应用里是如何创建 HttpClient 实例\"></a>应用里是如何创建 HttpClient 实例</h4><p>下面是应用中创建 HttpClient 实例的地方，我们从变量 <code>HTTP_CLIENT</code>开始定位。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">CloseableHttpClient</span> <span class=\"variable\">HTTP_CLIENT</span> <span class=\"operator\">=</span> HttpClients</span><br><span class=\"line\">        .custom()</span><br><span class=\"line\">        .setDefaultRequestConfig(</span><br><span class=\"line\">                RequestConfig.custom()</span><br><span class=\"line\">                .setCookieSpec(CookieSpecs.IGNORE_COOKIES)</span><br><span class=\"line\">                .setConnectionRequestTimeout(<span class=\"number\">30000</span>)</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">        ).build();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面代码可知：</p>\n<p>1.没有设置 maxPerRoute、maxTotal这类的参数。</p>\n<p>2.从连接池获取连接的超时时间的参数 ConnectionRequestTimeout ，设置为30秒。</p>\n<h4 id=\"arthas-定位实际数据\"><a href=\"#arthas-定位实际数据\" class=\"headerlink\" title=\"arthas 定位实际数据\"></a>arthas 定位实际数据</h4><p>因为不是本地环境，不能方便地 Debug，这时可以用 arthas 来查进行内存中 HttpClient 的实际数据。</p>\n<p>在arthas中执行：<code>getstatic com.skyme.HttpClientUtils HTTP_CLIENT -x 4</code>，结果如下：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c196d60f2e64078aab407bc4ffe1a0f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\"></p>\n<p>routeToPool中，route [https&#x2F;&#x2F;github.com] 的使用情况是：leased为2，avaibable为0，pending为198。</p>\n<p>leased + avaibable 结果为2，怎么这么少？难道是 maxPerRoute 参数设置的过小？</p>\n<p>在arthas结果中我们找到了 maxPerRoute 相关的配置，maxPerRoute 默认值只有2，因为我们创建 HttpClient 实例时，没有设置maxPerRoute的数值，所以每个route 的 maxPerRoute 为2， 这和上面的 leased + avaibable 的结果对应上了。此外，还有一个重要参数 maxToal 为20。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69682ffbdcf946ac8ecb177fd453378a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\"></p>\n<h4 id=\"大致结论：默认参数太小\"><a href=\"#大致结论：默认参数太小\" class=\"headerlink\" title=\"大致结论：默认参数太小\"></a>大致结论：默认参数太小</h4><p>到这里，问题基本定位清楚了。因为应用没有显示地设置 maxPerRoute 和 maxToal ，所以取了默认值，默认值比较小，maxPerRoute 为2， maxToal 为20， 导致并发获取连接时，连接不够用，导致了获取连接的线程一直在等待，等待时间为我们创建 HttpClien 实例时自定义的 30 秒，等待时间过长，导致了外部请求超时。</p>\n<h2 id=\"1-临时办法\"><a href=\"#1-临时办法\" class=\"headerlink\" title=\"1 临时办法\"></a>1 临时办法</h2><p>可以使用 arthas 的 vmtool 命令将内存中的 defaultMaxPerRoute 、maxTotal 参数修改大一些，该操作过于风骚，一般不符合生产环境的运维操作规范。但是测试环境或者紧急情况可以尝试使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[arthas@<span class=\"number\">8433</span>]$ vmtool --action getInstances --className org.apache.http.impl.client.CloseableHttpClient --express <span class=\"string\">&#x27;instances[0].connManager.pool.defaultMaxPerRoute=100&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">@Integer</span>[<span class=\"number\">100</span>]</span><br><span class=\"line\">[arthas@<span class=\"number\">8433</span>]$ vmtool --action getInstances --className org.apache.http.impl.client.CloseableHttpClient --express <span class=\"string\">&#x27;instances[0].connManager.pool.maxTotal=500&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>修改后，连接池中 leased 明显增多，pending 减少。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c2d414b51d9425cbca67a6a7bcb0e82~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\"></p>\n<p>一段时间后，pending为0，说明没有阻塞，连接数已足够使用。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ad40ee9f0884b1483524dc5e9405220~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\"></p>\n<p>注意：</p>\n<p>1.该修改不需要应用重启，但应用重启后，内存的设置将销毁，依然还会存在问题。</p>\n<p>2.非常规操作，谨慎执行。</p>\n<p>3.vmtool 命令在 arthas 3.5.1 版本之后才有。</p>\n<h2 id=\"2-长期办法\"><a href=\"#2-长期办法\" class=\"headerlink\" title=\"2 长期办法\"></a>2 长期办法</h2><p>修改代码，配置合理的最大连接数maxPerRoute、maxTotal、ConnectionRequestTimeout。</p>\n<p>当前 HttpClient 版本为 4.5.2，其他版本可能代码有所差异。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">PoolingHttpClientConnectionManager</span> <span class=\"variable\">POOLING_HTTP_CLIENT_CONNECTION_MANAGER</span></span><br><span class=\"line\">        <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PoolingHttpClientConnectionManager</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    POOLING_HTTP_CLIENT_CONNECTION_MANAGER.setDefaultMaxPerRoute(<span class=\"number\">100</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    POOLING_HTTP_CLIENT_CONNECTION_MANAGER.setMaxTotal(<span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">CloseableHttpClient</span> <span class=\"variable\">HTTP_CLIENT</span> <span class=\"operator\">=</span> HttpClients</span><br><span class=\"line\">    .custom()</span><br><span class=\"line\">    .setConnectionManager(POOLING_HTTP_CLIENT_CONNECTION_MANAGER)</span><br><span class=\"line\">    .setDefaultRequestConfig(</span><br><span class=\"line\">            RequestConfig.custom()</span><br><span class=\"line\">            .setCookieSpec(CookieSpecs.IGNORE_COOKIES)</span><br><span class=\"line\">            </span><br><span class=\"line\">            .setConnectionRequestTimeout(<span class=\"number\">10000</span>)</span><br><span class=\"line\">            .build()</span><br><span class=\"line\">    ).build();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>defaultMaxPerRoute 设置为100，maxTotal 设置为500，并将 connectionRequestTimeout 从30秒减少到10秒，没有拿到连接快速失败，防止过多的线程阻塞导致挤压。</p>\n<p>1.问题原因是 HttpClient 使用时没有对参数足够了解，对于连接池的框架，最好设置最大数，获取连接的等待超时时间，以及回收的周期，连接是否可用的校验等等参数。其他池类的框架同理，例如线程池。</p>\n<p>2.通过源码、日志、线程、连接等多方面进行分析，结论会更准确。</p>\n<p>3.arthas 是神器，可以多尝试。</p>\n","text":"Apache HttpClient使用不当导致的请求超时问题排查Apache HttpClient使用不当导致的请求超时问题排查 近期负责的线上应用出现调用失败...","permalink":"/post/JAVA/Apache HttpClient使用不当导致的请求超时问题排查","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"HttpClient","slug":"HttpClient","count":1,"path":"api/categories/HttpClient.json"},{"name":"JAVA","slug":"HttpClient/JAVA","count":1,"path":"api/categories/HttpClient/JAVA.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"fbpfcp","slug":"fbpfcp","count":1,"path":"api/tags/fbpfcp.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Apache-HttpClient%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4%E7%9A%84%E8%AF%B7%E6%B1%82%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5\"><span class=\"toc-text\">Apache HttpClient使用不当导致的请求超时问题排查</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E9%97%AE%E9%A2%98%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">1 问题介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%88%9D%E6%AD%A5%E6%8E%92%E6%9F%A5\"><span class=\"toc-text\">1 初步排查</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E6%9F%A5%E8%BF%9E%E6%8E%A5%E6%83%85%E5%86%B5\"><span class=\"toc-text\">1.1 查连接情况</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E6%9F%A5%E7%BA%BF%E7%A8%8B%E6%83%85%E5%86%B5\"><span class=\"toc-text\">1.2 查线程情况</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E6%9F%A5%E5%BA%94%E7%94%A8%E5%BC%82%E5%B8%B8%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">1.3 查应用异常日志</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E5%88%9D%E6%AD%A5%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">1.4 初步结论</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E8%BF%9B%E4%B8%80%E6%AD%A5%E6%8E%92%E6%9F%A5\"><span class=\"toc-text\">2 进一步排查</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%88%86%E6%9E%90-HttpClient\"><span class=\"toc-text\">2.1 分析 HttpClient</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%80%83\"><span class=\"toc-text\">思考</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E7%A1%AE%E8%AE%A4HttpClient-%E5%AE%9E%E9%99%85%E6%83%85%E5%86%B5\"><span class=\"toc-text\">2.2 确认HttpClient 实际情况</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E9%87%8C%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA-HttpClient-%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">应用里是如何创建 HttpClient 实例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#arthas-%E5%AE%9A%E4%BD%8D%E5%AE%9E%E9%99%85%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">arthas 定位实际数据</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E8%87%B4%E7%BB%93%E8%AE%BA%EF%BC%9A%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E5%A4%AA%E5%B0%8F\"><span class=\"toc-text\">大致结论：默认参数太小</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%B8%B4%E6%97%B6%E5%8A%9E%E6%B3%95\"><span class=\"toc-text\">1 临时办法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E9%95%BF%E6%9C%9F%E5%8A%9E%E6%B3%95\"><span class=\"toc-text\">2 长期办法</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"flink cep，使用groovy脚本及表达式求值","uid":"38926a48bdd2f6821bf4e05b53cee11b","slug":"BIGDATA/flink cep，使用groovy脚本及表达式求值","date":"2023-05-10T17:02:17.000Z","updated":"2025-09-30T03:26:05.155Z","comments":true,"path":"api/articles/BIGDATA/flink cep，使用groovy脚本及表达式求值.json","keywords":"XuGuangSheng","cover":"/covers/flink-cepgroovy.jpg","text":"flink cep，使用groovy脚本及表达式求值使用表达式求值和groovy脚本来生成flink cep Pattern。减少代码量，一份代码可通过传scr...","permalink":"/post/BIGDATA/flink cep，使用groovy脚本及表达式求值","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"flink","slug":"flink","count":2,"path":"api/categories/flink.json"},{"name":"BIGDATA","slug":"flink/BIGDATA","count":1,"path":"api/categories/flink/BIGDATA.json"}],"tags":[{"name":"cep","slug":"cep","count":1,"path":"api/tags/cep.json"},{"name":"groovy","slug":"groovy","count":1,"path":"api/tags/groovy.json"},{"name":"pattern","slug":"pattern","count":1,"path":"api/tags/pattern.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Kafka Consumer 重置 Offset","uid":"de6c24354e140e6b852bef14e54f1711","slug":"MIDDLEWARE/Kafka Consumer 重置 Offset","date":"2023-05-06T18:33:12.000Z","updated":"2025-09-30T03:26:47.699Z","comments":true,"path":"api/articles/MIDDLEWARE/Kafka Consumer 重置 Offset.json","keywords":"XuGuangSheng","cover":"/covers/kafka-consumer-offset.jpg","text":"Kafka Consumer 重置 Offset在Kafka Version为0.11.0.0之后，Consumer的Offset信息不再默认保存在Zookee...","permalink":"/post/MIDDLEWARE/Kafka Consumer 重置 Offset","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"offset","slug":"offset","count":1,"path":"api/categories/offset.json"},{"name":"MIDDLEWARE","slug":"offset/MIDDLEWARE","count":1,"path":"api/categories/offset/MIDDLEWARE.json"}],"tags":[{"name":"consumer","slug":"consumer","count":2,"path":"api/tags/consumer.json"},{"name":"topic","slug":"topic","count":2,"path":"api/tags/topic.json"},{"name":"Offset","slug":"Offset","count":1,"path":"api/tags/Offset.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}