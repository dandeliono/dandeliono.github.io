{"title":"Java异步编程","uid":"24d9916b82108a815fcb896c7754eb78","slug":"JAVA/Java异步编程","date":"2021-08-08T23:36:51.000Z","updated":"2025-09-30T03:26:12.693Z","comments":true,"path":"api/articles/JAVA/Java异步编程.json","keywords":"XuGuangSheng","cover":"/covers/java.jpg","content":"<h1 id=\"Java异步编程\"><a href=\"#Java异步编程\" class=\"headerlink\" title=\"Java异步编程\"></a>Java异步编程</h1><p>随着<code>RxJava</code>、<code>Reactor</code>等异步框架的流行，异步编程受到了越来越多的关注，尤其是在 IO 密集型的业务场景中，相比传统的同步开发模式，异步编程的优势越来越明显。</p>\n<p>那到底什么是异步编程？异步化真正的好处又是什么？如何选择适合自己团队的异步技术？在实施异步框架落地的过程中有哪些需要注意的地方？</p>\n<p>本文从以下几个方面结合真实项目异步改造经验对异步编程进行分析，希望能给大家一些客观认识：</p>\n<ol>\n<li>使用 RxJava 异步改造后的效果</li>\n<li>什么是异步编程？异步实现原理</li>\n<li>异步技术选型参考</li>\n<li>异步化真正的好处是什么？</li>\n<li>异步化落地的难点及解决方案</li>\n<li>扩展: 异步其他解决方案 - 协程</li>\n</ol>\n<h2 id=\"使用-RxJava-异步改造后的效果\"><a href=\"#使用-RxJava-异步改造后的效果\" class=\"headerlink\" title=\"使用 RxJava 异步改造后的效果\"></a>使用 RxJava 异步改造后的效果</h2><p>下图是我们后端 java 项目使用 RxJava 改造成异步前后的 RT(响应时长) 效果对比：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/8f6eead9bf7bcddfe9c2a0115e42bf26.webp\"></p>\n<p>image</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/93d60de32f9e41854ed7bdad95483ca6.webp\"></p>\n<p>image</p>\n<p>统计数据基于 App 端的 gateway，以 75 线为准，还有 80、85、90、99 线，从图中可以看出改成异步后接口整体的平均响应时长降低了 **40%**左右。</p>\n<p>(响应时间是以发送请求到收到后端接口响应数据的时长，上图改造的这个后端 java 接口内部流程比较复杂，因为公司都是微服务架构，该接口内部又调用了 6 个其他服务的接口，最后把这些接口的数据汇总在一起返回给前端)</p>\n<p>这张图是同步接口和改造成异步接口前后的 CPU 负载情况对比</p>\n<p>改造前 cpu load : 35.46</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/7108e10bde8d4d628ee3e91bdc45c6ed.webp\"></p>\n<p>image</p>\n<p>改造后 cpu load : 14.25</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/fdec9d289f49870ba5faf7528a79b303.webp\"></p>\n<p>image</p>\n<p>改成异步后 CPU 的负载情况也有明显下降，但 CPU 使用率并无影响 (一般情况下异步化后 cpu 的利用率会有所提高，但要看具体的业务场景)</p>\n<p>CPU LoadAverage 是指：一段时间内处于可运行状态和不可中断状态的进程平均数量。(可运行分为正在运行进程和正在等待 CPU 的进程；<strong>不可中断则是它正在做某些工作不能被中断比如等待磁盘 IO、网络 IO 等</strong>)</p>\n<p>而我们的服务业务场景大部分都是 IO 密集型业务，功能实现很多需要依赖底层接口，会进行频繁的 IO 操作。</p>\n<p>下图是 2019 年在全球架构师峰会上<strong>阿里</strong>分享的异步化改造后的 RT 和 QPS 效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/021e27fbcc6fbc9cf312b9db43332f47.webp\"></p>\n<p>image</p>\n<p>（图片来源：淘宝应用架构升级——反应式架构的探索与实践）</p>\n<h2 id=\"什么是异步编程？\"><a href=\"#什么是异步编程？\" class=\"headerlink\" title=\"什么是异步编程？\"></a>什么是异步编程？</h2><h3 id=\"响应式编程-NIO\"><a href=\"#响应式编程-NIO\" class=\"headerlink\" title=\"响应式编程 + NIO\"></a>响应式编程 + NIO</h3><h3 id=\"1-异步和同步的区别：\"><a href=\"#1-异步和同步的区别：\" class=\"headerlink\" title=\"1. 异步和同步的区别：\"></a>1. 异步和同步的区别：</h3><p>我们先从 <strong>I&#x2F;O</strong> 的角度看下同步模式下接口 A 调用接口 B 的交互流程:</p>\n<p>下图是传统的同步模式下 io 线程的交互流程，可以看出 io 是阻塞的，即 bio 的运行模式</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/3731ac54c3b4b63f19eaa83d20e92502.webp\"></p>\n<p>image</p>\n<p>接口 A 发起调用接口 B 后，这段时间什么事情也不能做，主线程阻塞一直等到接口 B 数据返回，然后才能进行其他操作，可想而知如果接口 A 调用的接口不止 B 的话 (A-&gt;B-&gt;C-&gt;D-&gt;E。。。)，那么等待的时间也是递增的，而且<strong>这期间 CPU 也要一直占用着</strong>，白白浪费资源，也就是上图看到的 cpu load 高的原因。</p>\n<p>而且还有一个隐患就是如果调用的其他服务中的接口比如 C 超时，或接口 C 挂掉了，那么对调用方服务 A 来说，剩余的接口比如 D、E 都会无限等待下去。。。</p>\n<p>其实大部分情况下我们收到数据后内部的处理逻辑耗时都很短，这个可以通过埋点执行时间统计，<strong>大部分时间都浪费在了 IO 等待上</strong>。</p>\n<p>下面这个视频演示了同步模式下我们线上环境真实的接口调用情况，即接口调用的线程执行和变化情况，(使用的工具是 JDK 自带的 jvisual 来监控线程变化情况)</p>\n<p>这里先交代下大致背景：服务端 api 接口 A 内部一共调用了 6 个其他服务的接口，大致交互是这样的：</p>\n<p>A 接口（B -&gt; C -&gt; D -&gt; E -&gt; F -&gt; G）返回聚合数据</p>\n<p>背景：使用 Jemter 测试工具压测 100 个线程并发请求接口，以观察线程的运行情况（可以全屏观看）：</p>\n<p><code>http-nio-8080-exec*</code>开头的是 tomcat 线程池中的线程，即前端请求我们后端接口时要通过 tomcat 服务器接收和转发的线程，因为我们后端 api 接口内部又调用了其他服务的 6 个接口（B、C、D、E、F、G），同步模式下需要等待上一个接口返回数据才能继续调用下一个接口，所以可以从视频中看出，大部分的 http 线程耗时都在 8 秒以上 (绿色线条代表线程是 “运行中” 状态，8 秒包括等待接口返回的时间和我们内部逻辑处理的总时间，因为是本地环境测试，受机器和网络影响较大)</p>\n<p>然后我们再看下异步模式的交互流程，即 nio 方式：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/2955af789dfa0b6d59ffcc6696a42e1b.webp\"></p>\n<p>image</p>\n<p>大致流程就是接口 A 发起调用接口 B 的请求后就立即返回，而不用阻塞等待接口 B 响应，这样的好处是<code>http-nio-8080-exec*</code>线程可以<strong>马上得到复用，接着处理下一个前端请求的任务</strong>，如果接口 B 处理完返回数据后，会有一个回调线程池处理真正的响应，即这种模式下我们的业务流程是 <strong>http 线程只处理请求，回调线程处理接口响应</strong>。</p>\n<p>这个视频演示了异步模式下接口 A 的线程执行情况，同样也是使用 Jemter 测试工具压测 100 个线程并发请求接口，以观察线程的运行情况（可以全屏观看）：</p>\n<p>模拟的条件和同步模式一样，同样是 100 个线程并发请求接口，但这次<code>http-nio-8080-exec*</code>开头的线程只处理请求任务，而不再等待全部的接口返回，所以 http 的线程运行时间普遍都很短 (大部分在 1.8 秒左右完成)，<code>AsfThread-executor-*</code>是我们系统封装的回调线程池，处理底层接口的真正响应数据。</p>\n<p>演示视频中的<code>AsfThread-executor-*</code>的回调线程只创建了 30 多个，而请求的 http 线程有 100 个，也就是说这 30 多个回调线程处理了接口 B 的 100 次响应 (其实应该是 600 次，因为接口 B 内部又调用了 6 个其他接口，这 6 次也都是在异步线程里处理响应的)，因为每个接口返回的时间不一样，加上网络传输的时间，所以可以利用这个时间差充分复用线程即 cpu 资源，视频中回调线程<code>AsfThread-executor-*</code>的绿色运行状态是多段的，表示复用了多次，也就是少量回调线程处理了全部 (600 次) 的响应，这正是 <strong>IO 多路复用</strong>的机制。</p>\n<p>nio 模式下虽然<code>http-nio-8080-exec*</code>线程和回调线程<code>AsfThread-executor-*</code>的运行时间都很短，但是从 http 线程开始到 asf 回调处理完返回给前端结果的时间和 bio 即同步模式下的时间差异不大（在相同的逻辑流程下），并不是 nio 模式下服务响应的整体时间就会缩短，而是<strong>会提升 CPU 的利用率</strong>，因为 CPU 不再会阻塞等待（不可中断状态减少），这样 <strong>CPU 就能有更多的资源来处理其他的请求任务</strong>，相同单位时间内能处理更多的任务，所以 nio 模式带来的好处是：</p>\n<ul>\n<li><strong>提升 QPS（用更少的线程资源实现更高的并发能力）</strong></li>\n<li><strong>降低 CPU 负荷, 提高利用率</strong></li>\n</ul>\n<h3 id=\"2-Nio-原理\"><a href=\"#2-Nio-原理\" class=\"headerlink\" title=\"2. Nio 原理\"></a>2. Nio 原理</h3><p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/dae365f58f73d1b4cd38a6bf8caed3f9.webp\"></p>\n<p>image</p>\n<p>结合上面的接口交互图可知，接口 B 通过网络返回数据给调用方 (接口 A) 这一过程，对应底层实现就是网卡接收到返回数据后，通过自身的 DMA（直接内存访问）将数据拷贝到内核缓冲区，这一步不需要 CPU 参与操作，也就是把原先 CPU 等待的事情交给了底层网卡去处理，这样 <strong>CPU 就可以专注于我们的应用程序即接口内部的逻辑运算</strong>。</p>\n<h3 id=\"3-Nio-In-Java\"><a href=\"#3-Nio-In-Java\" class=\"headerlink\" title=\"3. Nio In Java\"></a>3. Nio In Java</h3><p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/3716197880e3ba7f18bb101cd5493bc4.webp\"></p>\n<p>image</p>\n<p>nio 在 java 里的实现主要是上图中的几个核心组件：<code>channel</code>、<code>buffer</code>、<code>selector</code>，这些组件组合起来即实现了上面所讲的<strong>多路复用机制</strong>，如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/ddb68e4baf235c645ed1369977cf2c5f.webp\"></p>\n<p>image</p>\n<h2 id=\"响应式编程\"><a href=\"#响应式编程\" class=\"headerlink\" title=\"响应式编程\"></a>响应式编程</h2><h3 id=\"1-什么是响应式编程？它和传统的编程方式有什么区别？\"><a href=\"#1-什么是响应式编程？它和传统的编程方式有什么区别？\" class=\"headerlink\" title=\"1. 什么是响应式编程？它和传统的编程方式有什么区别？\"></a>1. 什么是响应式编程？它和传统的编程方式有什么区别？</h3><p>响应式可以简单的理解为收到某个事件或通知后采取的一系列动作，如上文中所说的响应操作系统的网络数据通知，然后以<strong>回调的方式</strong>处理数据。</p>\n<p>传统的命令式编程主要由：顺序、分支、循环 等控制流来完成不同的行为</p>\n<p>响应式编程的特点是：</p>\n<ul>\n<li><strong>以逻辑为中心转换为以数据为中心</strong></li>\n<li><strong>从命令式到声明式的转换</strong></li>\n</ul>\n<h3 id=\"2-Java-Util-Concurrent-Future\"><a href=\"#2-Java-Util-Concurrent-Future\" class=\"headerlink\" title=\"2. Java.Util.Concurrent.Future\"></a>2. Java.Util.Concurrent.Future</h3><p>在 Java 使用 nio 后无法立即拿到真实的数据，而且先得到一个 “<code>future</code>“，可以理解为邮戳或快递单，为了获悉真正的数据我们需要不停的通过快递单号查询快递进度，所以 <strong>J.U.C 中的 Future 是 Java 对异步编程的第一个解决方案</strong>，通常和线程池结合使用，伪代码形式如下：</p>\n<pre><code>ExecutorService executor = Executors.newCachedThreadPool(); \n</code></pre>\n<p>复制代码</p>\n<p><code>Future</code>的缺点很明显：</p>\n<ul>\n<li>无法方便得知任务何时完成</li>\n<li>无法方便获得任务结果</li>\n<li>在主线程获得任务结果会导致主线程阻塞</li>\n</ul>\n<h3 id=\"3-ListenableFuture\"><a href=\"#3-ListenableFuture\" class=\"headerlink\" title=\"3. ListenableFuture\"></a>3. ListenableFuture</h3><p>Google 并发包下的<code>listenableFuture</code>对 Java 原生的 future 做了扩展，顾名思义就是使用监听器模式实现的<strong>回调机制</strong>，所以叫可监听的 future。</p>\n<pre><code>Futures.addCallback(listenableFuture, new FutureCallback&lt;String&gt;() &#123;\n</code></pre>\n<p>复制代码</p>\n<p>回调机制的最大问题是：<strong>Callback Hell（回调地狱）</strong></p>\n<p>试想如果调用的接口多了，而且接口之间有依赖的话，最终写出来的代码可能就是下面这个样子：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/6fe612975c662f502450b49762add1f5.webp\"></p>\n<p>image</p>\n<ul>\n<li>代码的字面形式和其所表达的业务含义不匹配</li>\n<li>业务的先后关系在代码层面变成了包含和被包含的关系</li>\n<li>大量使用 Callback 机制，使应该是先后的业务逻辑在代码形式上表现为层层嵌套, 这会导致代码难以理解和维护。</li>\n</ul>\n<p>那么如何解决 Callback Hell 问题呢？</p>\n<p><strong>响应式编程</strong></p>\n<p>其实主要是以下两种解决方式：</p>\n<ul>\n<li>事件驱动机制</li>\n<li>链式调用 (Lambda)</li>\n</ul>\n<h3 id=\"4-CompletableFuture\"><a href=\"#4-CompletableFuture\" class=\"headerlink\" title=\"4. CompletableFuture\"></a>4. CompletableFuture</h3><p>Java8 里的<code>CompletableFuture</code>和 Java9 的<code>Flow Api</code>勉强算是上面问题的解决方案：</p>\n<pre><code>CompletableFuture&lt;String&gt; f1 = CompletableFuture.supplyAsync(() -&gt;\n</code></pre>\n<p>复制代码</p>\n<p>但<code>CompletableFuture</code>处理简单的任务可以使用，但并不是一个完整的反应式编程解决方案，在服务调用复杂的情况下，存在服务编排、上下文传递、柔性限流 (背压) 方面的不足</p>\n<p>如果使用<code>CompletableFuture</code>面对这些问题可能需要自己额外造一些轮子，Java9 的<code>Flow</code>虽然是基于 <strong>Reactive Streams</strong> 规范实现的，但没有 RxJava、Project Reactor 这些异步框架丰富和强大和完整的解决方案。</p>\n<p>当然如果接口逻辑比较简单，完全可以使用<code>listenableFuture</code>或<code>CompletableFuture</code>，关于他们的详细用法可参考之前的一篇文章：<a href=\"http://javakk.com/225.html\">Java 异步编程指南</a>  </p>\n<h3 id=\"5-Reactive-Streams\"><a href=\"#5-Reactive-Streams\" class=\"headerlink\" title=\"5. Reactive Streams\"></a>5. Reactive Streams</h3><p>在网飞推出 RxJava1.0 并在 Android 端普及流行开后，响应式编程的规范也呼之欲出：</p>\n<p><a href=\"http://javakk.com/redirect/aHR0cHM6Ly93d3cucmVhY3RpdmUtc3RyZWFtcy5vcmcv\">https://www.reactive-streams.org/</a>  </p>\n<p>包括后来的 RxJava2.0、Project Reactor 都是基于 Reactive Streams 规范实现的。</p>\n<p>关于他们和<code>listenableFuture</code>、 <code>CompletableFuture</code>的区别通过下面的例子大家应该就会清楚。</p>\n<p>比如下面的基于回调的代码示例：获取用户的 5 个收藏列表功能</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/a5bce9ccdb01eac2c5f0b395506fdade.webp\"></p>\n<p>image</p>\n<p>图中标注序号的步骤对应如下：</p>\n<ol>\n<li>根据 uid 调用用户收藏列表接口<code>userService.getFavorites</code>  </li>\n<li>成功的回调逻辑</li>\n<li>如果用户收藏列表为空</li>\n<li>调用推荐服务<code>suggestionService.getSuggestions</code>  </li>\n<li>推荐服务成功后的回调逻辑</li>\n<li>取前 5 条推荐并展示 (<code>Java8 Stream api</code>)</li>\n<li>推荐服务失败的回调, 展示错误信息</li>\n<li>如果用户收藏列表有数据返回</li>\n<li>取前 5 条循环调用详情接口<code>favoriteService.getDetails</code> 成功回调则展示详情, 失败回调则展示错误信息</li>\n</ol>\n<p>可以看出主要逻辑都是在回调函数（<code>onSuccess()</code>、<code>onError()</code>）中处理的，在可读性和后期维护成本上比较大。</p>\n<p>基于 Reactive Streams 规范实现的响应式编程解决方案如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/815bcf61f4a19d9d328b44a59a2de7df.webp\"></p>\n<p>image</p>\n<ol>\n<li>调用用户收藏列表接口</li>\n<li>压平数据流调用详情接口</li>\n<li>如果收藏列表为空调用推荐接口</li>\n<li>取前 5 条</li>\n<li>切换成异步线程处理上述声明接口返回结果)</li>\n<li>成功则展示正常数据, 错误展示错误信息</li>\n</ol>\n<p>可以看出因为这些异步框架提供了丰富的 api，所以我们可以把主要精力<strong>放在数据的流转上，而不是原来的逻辑控制上。这也是异步编程带来的思想上的转变。</strong> </p>\n<p>下图是 RxJava 的<code>operator api</code>：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/40d03462df70105b225f83c8021b2a22.webp\"></p>\n<p>image</p>\n<p>（如果这些操作符满足不了你的需求，你也可以自定义操作符）</p>\n<p>所以说<strong>异步最吸引人的地方在于资源的充分利用，不把资源浪费在等待的时间上 (nio)，代价是增加了程序的复杂度，而 Reactive Program 封装了这些复杂性，使其变得简单。</strong> </p>\n<p>所以我们无论使用哪种异步框架，尽量使用框架提供的 api，而不是像上图那种基于回调业务的代码，把业务逻辑都写在 onSuccess、onError 等回调方法里，这样无法发挥异步框架的真正作用：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Codes Like Sync，Works Like Async</p></blockquote>\n<p>即以<strong>同步的方式编码，达到异步的效果与性能, 兼顾可维护性与可伸缩性</strong>。</p>\n<h2 id=\"异步框架技术选型\"><a href=\"#异步框架技术选型\" class=\"headerlink\" title=\"异步框架技术选型\"></a>异步框架技术选型</h2><p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/db532529e54564f23db573e702a9e5f1.webp\"></p>\n<p>（图片来源：淘宝应用架构升级——反应式架构的探索与实践）</p>\n<p>上面这张图也是阿里在 2019 年的深圳全球架构师峰会上分享的 PPT 截图（文章末尾有链接），供大家参考，选型标准主要是基于稳定性、普及性、成本这 3 点考虑</p>\n<p>如果是我个人更愿意选择 Project Reactor 作为首选异步框架，（具体差异网上很多分析，大家可以自行百度谷歌），还有一点是因为 Netflix 的尿性，推出的开源产品渐渐都不维护了，而且 Project Reactor 提供了<code>reactor-adapter</code>组件，可以方便的和 RxJava 的 api 转换。</p>\n<p>其实还有 <strong>Vert.x</strong> 也算异步框架 (底层使用 netty 实现 nio, 最新版已支持 reactive stream 规范)</p>\n<h2 id=\"异步化真正的好处\"><a href=\"#异步化真正的好处\" class=\"headerlink\" title=\"异步化真正的好处\"></a>异步化真正的好处</h2><h3 id=\"Scalability\"><a href=\"#Scalability\" class=\"headerlink\" title=\"Scalability\"></a>Scalability</h3><p>伸缩性主要体现在以下两个方面：</p>\n<ul>\n<li><strong>elastic 弹性</strong></li>\n<li><strong>resilient 容错性</strong></li>\n</ul>\n<p>（异步化在平时<strong>不会明显降低 RT、提高 QPS</strong>，文章开头的数据也是在大促这种流量高峰下的体现出的异步效果）</p>\n<p>从架构和应用等更高纬度看待异步带来的好处则会提升系统的两大能力：<strong>弹性</strong> 和 <strong>容错性</strong></p>\n<p>前者反映了系统应对压力的表现，后者反映了系统应对故障的表现</p>\n<h4 id=\"1-容错性\"><a href=\"#1-容错性\" class=\"headerlink\" title=\"1. 容错性\"></a>1. 容错性</h4><p>像 RxJava，Reactor 这些异步框架处理回调数据时一般会切换线程上下文，其实就是使用不同的线程池来隔离不同的数据流处理逻辑，下图说明了这一特性的好处：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/0ea14fefc4d1d25fdb5af24fb33bc4e7.webp\"></p>\n<p>image</p>\n<p>即利用异步框架支持线程池切换的特性实现<strong>服务 &#x2F; 接口隔离</strong>，进而提高系统的<strong>高可用</strong>。</p>\n<h4 id=\"2-弹性\"><a href=\"#2-弹性\" class=\"headerlink\" title=\"2. 弹性\"></a>2. 弹性</h4><p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/c900853b40443228c730e53132c9d9aa.webp\"></p>\n<p>image</p>\n<p>back-pressure 是一种重要的反馈机制，相比于传统的熔断限流等方式，是一种更加<strong>柔性的自适应限流</strong>。使得系统得以优雅地响应负载，而不是在负载下崩溃。</p>\n<h2 id=\"异步化落地的难点及解决方案\"><a href=\"#异步化落地的难点及解决方案\" class=\"headerlink\" title=\"异步化落地的难点及解决方案\"></a>异步化落地的难点及解决方案</h2><p>还是先看下淘宝总结的异步改造中难点问题：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/044e4f716f9665367c72d06b1c9d3522.webp\"></p>\n<p>image</p>\n<p>（图片来源：淘宝应用架构升级——反应式架构的探索与实践）</p>\n<p>中间件全异步牵涉到到公司中台化战略或框架部门的支持，包括公司内部常用的中间件比如 MQ、redis、dal 等，超出了本文讨论的范围，感兴趣的可以看下文章末尾的参考资料。</p>\n<p>线程模型统一的背景在上一节异步化好处时有提到过，其实主要还是对线程池的管理，做好服务隔离，线程池设置和注意事项可以参考之前的两篇文章：<a href=\"http://javakk.com/188.html\">Java 踩坑记系列之线程池</a> 、<a href=\"http://javakk.com/215.html\">线程池 ForkJoinPool 简介</a>  </p>\n<p>这里主要说下上下文传递和阻塞检测的问题：</p>\n<h3 id=\"1-上下文传递\"><a href=\"#1-上下文传递\" class=\"headerlink\" title=\"1. 上下文传递\"></a>1. 上下文传递</h3><p>改造成异步服务后，不能再使用<code>ThreadLocal</code>传递上下文 context，因为异步框架比如 RxJava 一般在收到通知后会先调用<code>observeOn()</code>方法切换成另外一个线程处理回调，比如我们在请求接口时在<code>ThreadLocal</code>的 context 里设置了一个值，在回调线程里从 context 里取不到这个值的，因为此时已经不是同一个<code>ThreadLocal</code>了，所以需要我们手动在切换上下文的时候传递 context 从一个线程到另一个线程环境，伪代码如下：</p>\n<pre><code>Context context = ThreadLocalUtils.get(); \n</code></pre>\n<p>复制代码</p>\n<p>在<code>observeOn()</code>方法切换成另外一个线程后调用<code>doOnEvent</code>方法将原来的 context 赋给新的线程<code>ThreadLocal</code>  </p>\n<p><strong>注意</strong>：这里的代码只是提供一种解决思路，实际在使用前和使用后还要考虑清空<code>ThreadLocal</code>，因为线程有可能会回收到线程池下次复用，而不是立即清理，<strong>这样就会污染上下文环境</strong>。</p>\n<p>可以将传递上下文的方法封装成公共方法，不需要每次都手动切换。</p>\n<h3 id=\"2-阻塞检测\"><a href=\"#2-阻塞检测\" class=\"headerlink\" title=\"2. 阻塞检测\"></a>2. 阻塞检测</h3><p>阻塞检测主要是要能及时发现我们某个异步任务长时间阻塞的发生，比如异步线程执行时间过长进而影响整个接口的响应，原来同步场景下我们的日志都是串行记录到 ES 或 Cat 上的，现在改成异步后，每次处理接口数据的逻辑可能在不同的线程中完成，这样记录的日志就需要我们主动去合并（依据具体的业务场景而定），如果日志无法关联起来，对我们排查问题会增加很多难度。所幸的是随着异步的流行，现在很多日志和监控系统都已支持异步了。</p>\n<p>Project Reactor 自己也有阻塞检测功能，可以参考这篇文章：<a href=\"http://javakk.com/redirect/aHR0cHM6Ly9naXRodWIuY29tL3JlYWN0b3IvQmxvY2tIb3VuZA==\">BlockHound</a>  </p>\n<h3 id=\"3-其他问题\"><a href=\"#3-其他问题\" class=\"headerlink\" title=\"3. 其他问题\"></a>3. 其他问题</h3><p>除了上面提到的两个问题外，还有一些比如 RxJava2.0 之后不支持返回 null，如果我们原来的代码或编程习惯所致返回结果有 null 的情况，可以考虑使用 java8 的<code>Optional.ofNullable()</code>包装一下，然后返回的 RxJava 类型是这样的：<code>Single&lt;Optional&gt;</code>，其他异步框架如果有类似的问题同理。</p>\n<h2 id=\"异步其他解决方案：纤程-x2F-协程\"><a href=\"#异步其他解决方案：纤程-x2F-协程\" class=\"headerlink\" title=\"异步其他解决方案：纤程 &#x2F; 协程\"></a>异步其他解决方案：纤程 &#x2F; 协程</h2><ul>\n<li>Quasar</li>\n<li>Kilim</li>\n<li>Kotlin</li>\n<li>Open JDK Loom</li>\n<li>AJDK wisp2</li>\n</ul>\n<p>协程并不是什么新技术，它在很多语言中都有实现，比如 <code>Python</code>、<code>Lua</code>、<code>Go</code> 都支持协程。</p>\n<p>协程与线程不同之处在于，<strong>线程由内核调度，而协程的调度是进程自身完成的</strong>。这样就可以不受操作系统对线程数量的限制，一个线程内部可以创建成千上万个协程。因为上文讲到的异步技术都是基于线程的操作和封装，Java 中的线程概念对应的就是操作系统的线程。</p>\n<h3 id=\"1-Quasar、Kilim\"><a href=\"#1-Quasar、Kilim\" class=\"headerlink\" title=\"1. Quasar、Kilim\"></a>1. Quasar、Kilim</h3><p>开源的 Java 轻量级线程（协程）框架，通过利用<code>Java instrument</code>技术对字节码进行修改，使方法挂起前后可以保存和恢复 JVM 栈帧，方法内部已执行到的字节码位置也通过增加状态机的方式记录，在下次恢复执行可直接跳转至最新位置。</p>\n<h3 id=\"2-Kotlin\"><a href=\"#2-Kotlin\" class=\"headerlink\" title=\"2. Kotlin\"></a>2. Kotlin</h3><p>Kotlin Coroutine 协程库，因为 Kotlin 的运行依赖于 JVM，不能对 JVM 进行修改，因此 Kotlin 不能在底层支持协程。同时 Kotlin 是一门编程语言，需要在语言层面支持协程，所以 Kotlin 对协程支持最核心的部分是在编译器中完成，这一点其实和 Quasar、Kilim 实现原理类似，都是在<strong>编译期通过修改字节码</strong>的方式实现协程</p>\n<h3 id=\"3-Project-Loom\"><a href=\"#3-Project-Loom\" class=\"headerlink\" title=\"3. Project Loom\"></a>3. Project Loom</h3><p>Project Loom 发起的原因是因为长期以来 Java 的线程是与操作系统的线程一一对应的，这限制了 Java 平台并发能力提升，Project Loom 是<strong>从 JVM 层面对多线程技术进行彻底的改变</strong>。</p>\n<p>OpenJDK 在 2018 年创建了 Loom 项目，目标是在 JVM 上实现轻量级的线程，并解除 JVM 线程与内核线程的映射。其实 Loom 项目的核心开发人员正是从 Quasar 项目过来的，目的也很明确，就是要将这项技术集成到底层 JVM 里，所以 Quasar 项目目前已经不维护了。。。</p>\n<h3 id=\"4-AJDK-Wisp2\"><a href=\"#4-AJDK-Wisp2\" class=\"headerlink\" title=\"4. AJDK Wisp2\"></a>4. AJDK Wisp2</h3><p>Alibaba Dragonwell 是阿里巴巴的 Open JDK 发行版，提供长期支持。dragonwell8 已开源协程功能（之前的版本是不支持的），开启 jvm 命令：<code>-XX:+UseWisp2</code> 即支持协程。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>Future 在异步方面支持有限</li>\n<li>Callback 在编排能力方面有 Callback Hell 的短板</li>\n<li>Project Loom 最新支持的 Open JDK 版本是 16，目前还在测试中</li>\n<li>AJDK wisp2 需要换掉整个 JVM，需要考虑改动成本和收益比</li>\n</ul>\n","text":"Java异步编程随着RxJava、Reactor等异步框架的流行，异步编程受到了越来越多的关注，尤其是在 IO 密集型的业务场景中，相比传统的同步开发模式，异步...","permalink":"/post/JAVA/Java异步编程","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"com","slug":"com","count":3,"path":"api/categories/com.json"},{"name":"JAVA","slug":"com/JAVA","count":1,"path":"api/categories/com/JAVA.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"raw","slug":"raw","count":5,"path":"api/tags/raw.json"},{"name":"githubusercontent","slug":"githubusercontent","count":3,"path":"api/tags/githubusercontent.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">Java异步编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-RxJava-%E5%BC%82%E6%AD%A5%E6%94%B9%E9%80%A0%E5%90%8E%E7%9A%84%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">使用 RxJava 异步改造后的效果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">什么是异步编程？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B-NIO\"><span class=\"toc-text\">响应式编程 + NIO</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%BC%82%E6%AD%A5%E5%92%8C%E5%90%8C%E6%AD%A5%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9A\"><span class=\"toc-text\">1. 异步和同步的区别：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Nio-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">2. Nio 原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Nio-In-Java\"><span class=\"toc-text\">3. Nio In Java</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">响应式编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BB%80%E4%B9%88%E6%98%AF%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%EF%BC%9F%E5%AE%83%E5%92%8C%E4%BC%A0%E7%BB%9F%E7%9A%84%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">1. 什么是响应式编程？它和传统的编程方式有什么区别？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Java-Util-Concurrent-Future\"><span class=\"toc-text\">2. Java.Util.Concurrent.Future</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-ListenableFuture\"><span class=\"toc-text\">3. ListenableFuture</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-CompletableFuture\"><span class=\"toc-text\">4. CompletableFuture</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-Reactive-Streams\"><span class=\"toc-text\">5. Reactive Streams</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E6%A1%86%E6%9E%B6%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B\"><span class=\"toc-text\">异步框架技术选型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E5%8C%96%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">异步化真正的好处</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Scalability\"><span class=\"toc-text\">Scalability</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%AE%B9%E9%94%99%E6%80%A7\"><span class=\"toc-text\">1. 容错性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%BC%B9%E6%80%A7\"><span class=\"toc-text\">2. 弹性</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E5%8C%96%E8%90%BD%E5%9C%B0%E7%9A%84%E9%9A%BE%E7%82%B9%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">异步化落地的难点及解决方案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%B8%8A%E4%B8%8B%E6%96%87%E4%BC%A0%E9%80%92\"><span class=\"toc-text\">1. 上下文传递</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E9%98%BB%E5%A1%9E%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">2. 阻塞检测</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">3. 其他问题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E5%85%B6%E4%BB%96%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9A%E7%BA%A4%E7%A8%8B-x2F-%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">异步其他解决方案：纤程 &#x2F; 协程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Quasar%E3%80%81Kilim\"><span class=\"toc-text\">1. Quasar、Kilim</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Kotlin\"><span class=\"toc-text\">2. Kotlin</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Project-Loom\"><span class=\"toc-text\">3. Project Loom</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-AJDK-Wisp2\"><span class=\"toc-text\">4. AJDK Wisp2</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Spring Boot 排除自动配置的 4 种方法","uid":"a3c579c0425bdc8d839cf9bbfcb91047","slug":"JAVA/Spring Boot 排除自动配置的 4 种方法","date":"2021-08-09T23:05:31.000Z","updated":"2025-09-30T03:26:17.178Z","comments":true,"path":"api/articles/JAVA/Spring Boot 排除自动配置的 4 种方法.json","keywords":"XuGuangSheng","cover":"/covers/spring-boot-4.jpg","text":"Spring Boot 排除自动配置的 4 种方法Spring Boot 提供的自动配置非常强大，某些情况下，自动配置的功能可能不符合我们的需求，需要我们自定义...","permalink":"/post/JAVA/Spring Boot 排除自动配置的 4 种方法","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Spring","slug":"Spring","count":4,"path":"api/categories/Spring.json"},{"name":"JAVA","slug":"Spring/JAVA","count":4,"path":"api/categories/Spring/JAVA.json"}],"tags":[{"name":"Boot","slug":"Boot","count":1,"path":"api/tags/Boot.json"},{"name":"使用","slug":"使用","count":5,"path":"api/tags/使用.json"},{"name":"方法","slug":"方法","count":1,"path":"api/tags/方法.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Spring Boot配置文件指定包外文件","uid":"dd1cc8cb9e1a5d913e3dce35e0f864ee","slug":"JAVA/Spring Boot配置文件指定包外文件","date":"2021-08-07T15:16:44.000Z","updated":"2025-09-30T03:26:17.662Z","comments":true,"path":"api/articles/JAVA/Spring Boot配置文件指定包外文件.json","keywords":"XuGuangSheng","cover":"/covers/spring-boot.jpg","text":"Spring Boot配置文件指定包外文件通过命令行指定#SpringApplication 会默认将命令行选项参数转换为配置信息例如，启动时命令参数指定： j...","permalink":"/post/JAVA/Spring Boot配置文件指定包外文件","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"jar","slug":"jar","count":1,"path":"api/categories/jar.json"},{"name":"JAVA","slug":"jar/JAVA","count":1,"path":"api/categories/jar/JAVA.json"}],"tags":[{"name":"properties","slug":"properties","count":1,"path":"api/tags/properties.json"},{"name":"config","slug":"config","count":1,"path":"api/tags/config.json"},{"name":"application","slug":"application","count":1,"path":"api/tags/application.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}