{"title":"徒手撸框架--高并发环境下的请求合并","uid":"536679e8a77999953c3193ac12ff85df","slug":"JAVA/徒手撸框架--高并发环境下的请求合并","date":"2022-12-28T19:57:07.000Z","updated":"2025-09-30T03:26:26.169Z","comments":true,"path":"api/articles/JAVA/徒手撸框架--高并发环境下的请求合并.json","keywords":"XuGuangSheng","cover":"/covers/6e574f2f4349.jpg","content":"<h1 id=\"徒手撸框架–高并发环境下的请求合并\"><a href=\"#徒手撸框架–高并发环境下的请求合并\" class=\"headerlink\" title=\"徒手撸框架–高并发环境下的请求合并\"></a>徒手撸框架–高并发环境下的请求合并</h1><p>在高并发系统中，我们经常遇到这样的需求：系统产生大量的请求，但是这些请求实时性要求不高。我们就可以将这些请求合并，达到一定数量我们统一提交。最大化的利用系统性IO,提升系统的吞吐性能。</p>\n<p>所以请求合并框架需要考虑以下两个需求：</p>\n<ol>\n<li>当请求收集到一定数量时提交数据</li>\n<li>一段时间后如果请求没有达到指定的数量也进行提交</li>\n</ol>\n<p>我们就聊聊一如何实现这样一个需求。</p>\n<ul>\n<li>ScheduledThreadPoolExecutor</li>\n<li>阻塞队列</li>\n<li>线程安全的参数</li>\n<li>LockSupport的使用</li>\n</ul>\n<p>我们就聊一聊实现这个东西的具体思路是什么。希望大家能够学习到分析问题，设计模块的一些套路。</p>\n<h2 id=\"1-底层使用什么数据结构来持有需要合并的请求？\"><a href=\"#1-底层使用什么数据结构来持有需要合并的请求？\" class=\"headerlink\" title=\"1. 底层使用什么数据结构来持有需要合并的请求？\"></a><a href=\"#1-%E5%BA%95%E5%B1%82%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%9D%A5%E6%8C%81%E6%9C%89%E9%9C%80%E8%A6%81%E5%90%88%E5%B9%B6%E7%9A%84%E8%AF%B7%E6%B1%82%EF%BC%9F\" title=\"1. 底层使用什么数据结构来持有需要合并的请求？\"></a>1. 底层使用什么数据结构来持有需要合并的请求？</h2><ul>\n<li>既然我们的系统是在高并发的环境下使用，那我们肯定不能使用，普通的<code>ArrayList</code>来持有。我们可以使用阻塞队列来持有需要合并的请求。</li>\n<li>我们的数据结构需要提供一个 add() 的方法给外部，用于提交数据。当外部add数据以后，需要检查队列里面的数据的个数是否达到我们限额？达到数量提交数据，不达到继续等待。</li>\n<li>数据结构还需要提供一个timeOut()的方法，外部有一个计时器定时调用这个timeOut方法，如果方法被调用，则直接向远程提交数据。</li>\n<li>条件满足的时候线程执行提交动作，条件不满足的时候线程应当暂停，等待队列达到提交数据的条件。所以我们可以考虑使用 <code>LockSupport.park()</code>和<code>LockSupport.unpark</code> 来暂停和激活操作线程。</li>\n</ul>\n<p>经过上面的分析，我们就有了这样一个数据结构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlushThread</span>&lt;Item&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> bufferSize;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> flushInterval;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">long</span> lastFlushTime;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Thread writer;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> BlockingQueue&lt;Item&gt; queue;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Processor&lt;Item&gt; processor;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">FlushThread</span><span class=\"params\">(String name, <span class=\"type\">int</span> bufferSize, <span class=\"type\">int</span> flushInterval,<span class=\"type\">int</span> queueSize,Processor&lt;Item&gt; processor)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.bufferSize = bufferSize;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.flushInterval = flushInterval;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.lastFlushTime = System.currentTimeMillis();</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.processor = processor;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.queue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;&gt;(queueSize);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">add</span><span class=\"params\">(Item item)</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> queue.offer(item);</span><br><span class=\"line\">            flushOnDemand();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">timeOut</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(System.currentTimeMillis() - lastFlushTime &gt;= flushInterval)&#123;</span><br><span class=\"line\">                start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            LockSupport.unpark(writer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">flushOnDemand</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(queue.size() &gt;= bufferSize)&#123;</span><br><span class=\"line\">                start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">flush</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            lastFlushTime = System.currentTimeMillis();</span><br><span class=\"line\">            List&lt;Item&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(bufferSize);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> queue.drainTo(temp,bufferSize);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(size &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    processor.process(temp);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (Throwable e)&#123;</span><br><span class=\"line\">                    log.error(<span class=\"string\">&quot;process error&quot;</span>,e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canFlush</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> queue.size() &gt; bufferSize || System.currentTimeMillis() - lastFlushTime &gt; flushInterval;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            writer = Thread.currentThread();</span><br><span class=\"line\">            writer.setName(name);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!writer.isInterrupted())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!canFlush())&#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    LockSupport.park(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-如何实现定时提交呢？\"><a href=\"#2-如何实现定时提交呢？\" class=\"headerlink\" title=\"2. 如何实现定时提交呢？\"></a><a href=\"#2-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E6%8F%90%E4%BA%A4%E5%91%A2%EF%BC%9F\" title=\"2. 如何实现定时提交呢？\"></a>2. 如何实现定时提交呢？</h2><p>通常我们遇到定时相关的需求，首先想到的应该是使用 <code>ScheduledThreadPoolExecutor</code>定时来调用FlushThread 的 timeOut 方法,如果你想到的是 <code>Thread.sleep()</code>…那需要再努力学习，多看源码了。</p>\n<h2 id=\"3-怎样进一步的提升系统的吞吐量？\"><a href=\"#3-怎样进一步的提升系统的吞吐量？\" class=\"headerlink\" title=\"3. 怎样进一步的提升系统的吞吐量？\"></a><a href=\"#3-%E6%80%8E%E6%A0%B7%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E6%8F%90%E5%8D%87%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%90%9E%E5%90%90%E9%87%8F%EF%BC%9F\" title=\"3. 怎样进一步的提升系统的吞吐量？\"></a>3. 怎样进一步的提升系统的吞吐量？</h2><p>我们使用的<code>FlushThread</code> 实现了 <code>Runnable</code> 所以我们可以考虑使用线程池来持有多个<code>FlushThread</code>。</p>\n<p>所以我们就有这样的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Flusher</span>&lt;Item&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> FlushThread&lt;Item&gt;[] flushThreads;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AtomicInteger index;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Random</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">delta</span> <span class=\"operator\">=</span> <span class=\"number\">50</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">ScheduledExecutorService</span> <span class=\"variable\">TIMER</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ScheduledThreadPoolExecutor</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">ExecutorService</span> <span class=\"variable\">POOL</span> <span class=\"operator\">=</span> Executors.newCachedThreadPool();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Flusher</span><span class=\"params\">(String name,<span class=\"type\">int</span> bufferSiz,<span class=\"type\">int</span> flushInterval,<span class=\"type\">int</span> queueSize,<span class=\"type\">int</span> threads,Processor&lt;Item&gt; processor)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flushThreads = <span class=\"keyword\">new</span> <span class=\"title class_\">FlushThread</span>[threads];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(threads &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            index = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; threads; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> FlushThread&lt;Item&gt; flushThread = <span class=\"keyword\">new</span> <span class=\"title class_\">FlushThread</span>&lt;Item&gt;(name+ <span class=\"string\">&quot;-&quot;</span> + i,bufferSiz,flushInterval,queueSize,processor);</span><br><span class=\"line\">            flushThreads[i] = flushThread;</span><br><span class=\"line\">            POOL.submit(flushThread);</span><br><span class=\"line\">            </span><br><span class=\"line\">            TIMER.scheduleAtFixedRate(flushThread::timeOut, r.nextInt(delta), flushInterval, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">add</span><span class=\"params\">(Item item)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> flushThreads.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> flushThreads[<span class=\"number\">0</span>].add(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mod</span> <span class=\"operator\">=</span> index.incrementAndGet() % len;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flushThreads[mod].add(item);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlushThread</span>&lt;Item&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">        ...省略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-面向接口编程，提升系统扩展性：\"><a href=\"#4-面向接口编程，提升系统扩展性：\" class=\"headerlink\" title=\"4. 面向接口编程，提升系统扩展性：\"></a><a href=\"#4-%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B%EF%BC%8C%E6%8F%90%E5%8D%87%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%B1%95%E6%80%A7%EF%BC%9A\" title=\"4. 面向接口编程，提升系统扩展性：\"></a>4. 面向接口编程，提升系统扩展性：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Processor</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">(List&lt;T&gt; list)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们写个测试方法测试一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PrintOutProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Processor</span>&lt;String&gt;&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">(List&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;start flush&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        list.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;end flush&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Flusher&lt;String&gt; stringFlusher = <span class=\"keyword\">new</span> <span class=\"title class_\">Flusher</span>&lt;&gt;(<span class=\"string\">&quot;test&quot;</span>,<span class=\"number\">5</span>,<span class=\"number\">1000</span>,<span class=\"number\">30</span>,<span class=\"number\">1</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">PrintOutProcessor</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            stringFlusher.add(String.valueOf(index++));</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>执行的结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">start flush</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">end flush</span><br><span class=\"line\">start flush</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">end flush</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们发现并没有达到10个数字就触发了flush。因为出发了超时提交，虽然还没有达到规定的5<br>个数据，但还是执行了 flush。</p>\n<p>如果我们去除 <code>Thread.sleep(1000);</code> 再看看结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start flush</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">end flush</span><br><span class=\"line\">start flush</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">end flush</span><br></pre></td></tr></table></figure>\n\n<p>每5个数一次提交。完美。。。。</p>\n","text":"徒手撸框架–高并发环境下的请求合并在高并发系统中，我们经常遇到这样的需求：系统产生大量的请求，但是这些请求实时性要求不高。我们就可以将这些请求合并，达到一定数量...","permalink":"/post/JAVA/徒手撸框架--高并发环境下的请求合并","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"LockSupport","slug":"LockSupport","count":1,"path":"api/categories/LockSupport.json"},{"name":"JAVA","slug":"LockSupport/JAVA","count":1,"path":"api/categories/LockSupport/JAVA.json"}],"tags":[{"name":"底层使用什么数据结构来持有需要合并的请求","slug":"底层使用什么数据结构来持有需要合并的请求","count":1,"path":"api/tags/底层使用什么数据结构来持有需要合并的请求.json"},{"name":"timeOut","slug":"timeOut","count":1,"path":"api/tags/timeOut.json"},{"name":"如何实现定时提交呢","slug":"如何实现定时提交呢","count":1,"path":"api/tags/如何实现定时提交呢.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BE%92%E6%89%8B%E6%92%B8%E6%A1%86%E6%9E%B6%E2%80%93%E9%AB%98%E5%B9%B6%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E8%AF%B7%E6%B1%82%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">徒手撸框架–高并发环境下的请求合并</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%BA%95%E5%B1%82%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%9D%A5%E6%8C%81%E6%9C%89%E9%9C%80%E8%A6%81%E5%90%88%E5%B9%B6%E7%9A%84%E8%AF%B7%E6%B1%82%EF%BC%9F\"><span class=\"toc-text\">1. 底层使用什么数据结构来持有需要合并的请求？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E6%8F%90%E4%BA%A4%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\">2. 如何实现定时提交呢？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%80%8E%E6%A0%B7%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E6%8F%90%E5%8D%87%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%90%9E%E5%90%90%E9%87%8F%EF%BC%9F\"><span class=\"toc-text\">3. 怎样进一步的提升系统的吞吐量？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B%EF%BC%8C%E6%8F%90%E5%8D%87%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%B1%95%E6%80%A7%EF%BC%9A\"><span class=\"toc-text\">4. 面向接口编程，提升系统扩展性：</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"MAC地址正则匹配","uid":"ae3e49e2fd32f60fd6f14ef67049c415","slug":"ALG/MAC地址正则匹配","date":"2023-01-05T11:59:40.000Z","updated":"2025-09-30T03:26:01.499Z","comments":true,"path":"api/articles/ALG/MAC地址正则匹配.json","keywords":"XuGuangSheng","cover":"/covers/mac.jpg","text":"MAC地址正则匹配关于MAC地址MAC地址，也就是网卡MAC码。网卡MAC码是由IEEE的注册管理机构固定分配的,因此每一个主机会有一个MAC地址，具有全球唯一...","permalink":"/post/ALG/MAC地址正则匹配","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"MAC","slug":"MAC","count":1,"path":"api/categories/MAC.json"},{"name":"ALG","slug":"MAC/ALG","count":1,"path":"api/categories/MAC/ALG.json"}],"tags":[{"name":"匹配的结果例如","slug":"匹配的结果例如","count":1,"path":"api/tags/匹配的结果例如.json"},{"name":"地址","slug":"地址","count":1,"path":"api/tags/地址.json"},{"name":"地址正则匹配","slug":"地址正则匹配","count":1,"path":"api/tags/地址正则匹配.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Too many open files的四种解决办法","uid":"bf7b35be44144689d93f501402e9fb0d","slug":"LINUX/Too many open files的四种解决办法","date":"2022-12-07T00:21:50.000Z","updated":"2025-09-30T03:26:36.216Z","comments":true,"path":"api/articles/LINUX/Too many open files的四种解决办法.json","keywords":"XuGuangSheng","cover":"/covers/too-many-open-files.jpg","text":"Too many open files的四种解决办法【摘要】 Too many open files有四种可能:一 单个进程打开文件句柄数过多,二 操作系统打开...","permalink":"/post/LINUX/Too many open files的四种解决办法","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"inotify","slug":"inotify","count":1,"path":"api/categories/inotify.json"},{"name":"LINUX","slug":"inotify/LINUX","count":1,"path":"api/categories/inotify/LINUX.json"}],"tags":[{"name":"nofile","slug":"nofile","count":1,"path":"api/tags/nofile.json"},{"name":"openstack","slug":"openstack","count":1,"path":"api/tags/openstack.json"},{"name":"max","slug":"max","count":1,"path":"api/tags/max.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}