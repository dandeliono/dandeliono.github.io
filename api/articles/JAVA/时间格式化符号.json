{"title":"时间格式化符号","uid":"d28bd52a7c1a8649c5def9f8f82b26d2","slug":"JAVA/时间格式化符号","date":"2022-09-20T17:06:36.000Z","updated":"2025-09-30T03:26:27.616Z","comments":true,"path":"api/articles/JAVA/时间格式化符号.json","keywords":"XuGuangSheng","cover":"/covers/207b4a267f05.jpg","content":"<h1 id=\"时间格式化符号\"><a href=\"#时间格式化符号\" class=\"headerlink\" title=\"时间格式化符号\"></a>时间格式化符号</h1><h2 id=\"用于将日期时间格式化为字符串的字符\"><a href=\"#用于将日期时间格式化为字符串的字符\" class=\"headerlink\" title=\"用于将日期时间格式化为字符串的字符\"></a>用于将日期时间格式化为字符串的字符</h2><p>下表列出了您可以在模式中用来格式化或解析与日期时间相关的字符串的字符。 该表下面是一些注意事项，它们对表中的某些示例做了进一步说明。</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>含义</th>\n<th>表示</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>AM 或 PM 标记</td>\n<td>Text</td>\n<td>输入 am、AM、pm、PM。 输出 AM 或 PM</td>\n</tr>\n<tr>\n<td>d</td>\n<td>一月中的某一天（1-31）</td>\n<td>Number</td>\n<td>1、20</td>\n</tr>\n<tr>\n<td>dd</td>\n<td>一月中的某一天（01-31）</td>\n<td>Number</td>\n<td>01、31</td>\n</tr>\n<tr>\n<td>D</td>\n<td>一年中的某一天（1-366）</td>\n<td>Number</td>\n<td>3、80、100</td>\n</tr>\n<tr>\n<td>DD</td>\n<td>一年中的某一天（01-366）</td>\n<td>Number</td>\n<td>03、80、366</td>\n</tr>\n<tr>\n<td>DDD</td>\n<td>一年中的某一天（001-366）</td>\n<td>Number</td>\n<td>003</td>\n</tr>\n<tr>\n<td>e</td>\n<td>一周中的某一天（1-7）1</td>\n<td>Number</td>\n<td>2</td>\n</tr>\n<tr>\n<td>EEE</td>\n<td>一周中的某一天1</td>\n<td>Text</td>\n<td>Tue</td>\n</tr>\n<tr>\n<td>EEEE</td>\n<td>一周中的某一天1</td>\n<td>Text</td>\n<td>Tuesday</td>\n</tr>\n<tr>\n<td>F</td>\n<td>一月中某一周的某一天（1-5）2</td>\n<td>Number</td>\n<td>2</td>\n</tr>\n<tr>\n<td>G</td>\n<td>时代</td>\n<td>Text</td>\n<td>BC 或 AD</td>\n</tr>\n<tr>\n<td>h</td>\n<td>用 AM 或 PM 表示的小时（1-12）</td>\n<td>Number</td>\n<td>6</td>\n</tr>\n<tr>\n<td>hh</td>\n<td>用 AM 或 PM 表示的小时（01-12）</td>\n<td>Number</td>\n<td>06</td>\n</tr>\n<tr>\n<td>H</td>\n<td>24 小时格式的时间（0-23）3</td>\n<td>Number</td>\n<td>7</td>\n</tr>\n<tr>\n<td>HH</td>\n<td>24 小时格式的时间（00-23）3</td>\n<td>Number</td>\n<td>07</td>\n</tr>\n<tr>\n<td>I</td>\n<td>ISO8601 日期&#x2F;时间（最多 yyyy-MM-dd’T’HH:mm:ss. SSSZZZ)4</td>\n<td>Text</td>\n<td>2006-10-07T12:06:56.568+01:00</td>\n</tr>\n<tr>\n<td>IU</td>\n<td>ISO8601 日期&#x2F;时间（类似于 I，但是如果时区为 +00:00，那么 ZZZ 输出为“Z”）4</td>\n<td>Text</td>\n<td>2006-10-07T12:06:56.568+01:00, 2003-12 -15T15:42:12.000Z</td>\n</tr>\n<tr>\n<td>k</td>\n<td>24 小时格式的时间（1-24）3</td>\n<td>Number</td>\n<td>8</td>\n</tr>\n<tr>\n<td>kk</td>\n<td>24 小时格式的时间（01-24）3</td>\n<td>Number</td>\n<td>08</td>\n</tr>\n<tr>\n<td>K</td>\n<td>用 AM 或 PM 表示的小时（0-11）</td>\n<td>Number</td>\n<td>9</td>\n</tr>\n<tr>\n<td>KK</td>\n<td>用 AM 或 PM 表示的小时（00-11）</td>\n<td>Number</td>\n<td>09</td>\n</tr>\n<tr>\n<td>m</td>\n<td>分</td>\n<td>Number</td>\n<td>4</td>\n</tr>\n<tr>\n<td>mm</td>\n<td>分</td>\n<td>Number</td>\n<td>04</td>\n</tr>\n<tr>\n<td>M</td>\n<td>月（数值）</td>\n<td>Number</td>\n<td>5、12</td>\n</tr>\n<tr>\n<td>MM</td>\n<td>月（数值）</td>\n<td>Number</td>\n<td>05、12</td>\n</tr>\n<tr>\n<td>MMM</td>\n<td>月（字母）</td>\n<td>Text</td>\n<td>Jan、Feb</td>\n</tr>\n<tr>\n<td>MMMM</td>\n<td>月（字母）</td>\n<td>Text</td>\n<td>January、February</td>\n</tr>\n<tr>\n<td>s</td>\n<td>seconds10</td>\n<td>Number</td>\n<td>5</td>\n</tr>\n<tr>\n<td>ss</td>\n<td>seconds10</td>\n<td>Number</td>\n<td>05</td>\n</tr>\n<tr>\n<td>S</td>\n<td>decisecond5</td>\n<td>Number</td>\n<td>7</td>\n</tr>\n<tr>\n<td>SS</td>\n<td>centisecond5</td>\n<td>Number</td>\n<td>70</td>\n</tr>\n<tr>\n<td>SSS</td>\n<td>millisecond5</td>\n<td>Number</td>\n<td>700</td>\n</tr>\n<tr>\n<td>SSSS</td>\n<td>0.0001 秒5</td>\n<td>Number</td>\n<td>7000</td>\n</tr>\n<tr>\n<td>SSSSS</td>\n<td>0.00001 秒5</td>\n<td>Number</td>\n<td>70000</td>\n</tr>\n<tr>\n<td>SSSSSS</td>\n<td>0.000001 秒5</td>\n<td>Number</td>\n<td>700000</td>\n</tr>\n<tr>\n<td>T</td>\n<td>ISO8601 时间（最多为 HH:mm:ss.SSSZZZ）4</td>\n<td>Text</td>\n<td>12:06:56.568+01:00</td>\n</tr>\n<tr>\n<td>TU</td>\n<td>ISO8601 时间（类似于 T，但是 +00:00 时区用“Z”替换）4</td>\n<td>Text</td>\n<td>12:06:56.568+01:00、15:42:12.000Z</td>\n</tr>\n<tr>\n<td>w</td>\n<td>一年中的某一周6</td>\n<td>Number</td>\n<td>7、53</td>\n</tr>\n<tr>\n<td>ww</td>\n<td>一年中的某一周6</td>\n<td>Number</td>\n<td>07、53</td>\n</tr>\n<tr>\n<td>W</td>\n<td>一月中的某一周7</td>\n<td>Number</td>\n<td>2</td>\n</tr>\n<tr>\n<td>yy</td>\n<td>year8</td>\n<td>Number</td>\n<td>06</td>\n</tr>\n<tr>\n<td>yyyy</td>\n<td>year8</td>\n<td>Number</td>\n<td>2006</td>\n</tr>\n<tr>\n<td>YY</td>\n<td>年：仅与年中的周结合使用6</td>\n<td>Number</td>\n<td>06</td>\n</tr>\n<tr>\n<td>YYYY</td>\n<td>年：仅与年中的周结合使用6</td>\n<td>Number</td>\n<td>2006</td>\n</tr>\n<tr>\n<td>zzz</td>\n<td>时区（简称）9</td>\n<td>Text</td>\n<td>EST</td>\n</tr>\n<tr>\n<td>zzzz</td>\n<td>时区（全称）</td>\n<td>Text</td>\n<td>东部标准时间</td>\n</tr>\n<tr>\n<td>Z</td>\n<td>时区（+&#x2F;-n）</td>\n<td>Text</td>\n<td>+3</td>\n</tr>\n<tr>\n<td>ZZ</td>\n<td>时区（+&#x2F;-nn）</td>\n<td>Text</td>\n<td>+03</td>\n</tr>\n<tr>\n<td>ZZZ</td>\n<td>时区（+&#x2F;-nn:nn）</td>\n<td>Text</td>\n<td>+03:00</td>\n</tr>\n<tr>\n<td>ZZZU</td>\n<td>时区（如同 ZZZ，“+00:00”由“Z”替换）</td>\n<td>Text</td>\n<td>+03:00、Z</td>\n</tr>\n<tr>\n<td>ZZZZ</td>\n<td>时区（GMT+&#x2F;-nn:nn）</td>\n<td>Text</td>\n<td>GMT+03:00</td>\n</tr>\n<tr>\n<td>ZZZZZ</td>\n<td>时区（如同 ZZZ，但是无冒号）（+&#x2F;-nnnn）</td>\n<td>Text</td>\n<td>+0300</td>\n</tr>\n<tr>\n<td>‘</td>\n<td>文本的转义</td>\n<td></td>\n<td>‘User text’</td>\n</tr>\n<tr>\n<td>“</td>\n<td>（两个单引号）转义文本中的单引号</td>\n<td></td>\n<td>‘o”clock’</td>\n</tr>\n</tbody></table>\n<p>日期时间对象的表示取决于指定的符号。</p>\n<ul>\n<li><strong>文本</strong>：如果指定四个或四个以上的符号，将会显示完整的格式。 如果您指定的符号小于四个，将显示简短或缩略格式（如果存在）。 例如：<code>EEEE</code>生成<code>Monday</code>,<code>EEE</code>生成<code>Mon</code>.</li>\n<li><strong>数字</strong>：数值型日期时间部分的字符数必须在相应的格式化符号的限制范围内。 请重复使用同一符号以指定所需的最小位数。 允许的最大位数是特定符号的上限。 例如，月份中的第几天的上限为 31; 因此，格式字符串<code>d</code>允许对值 2 或 21 进行解析，但不允许对值 32 或 210 进行解析。 在输出时，使用零将数字填充到指定长度。 年是特殊情况；见附注 8。 分数秒也是特殊情况；请参阅注释 5。</li>\n<li><strong>容错日期时间检查</strong>：解析器将范围外的日期时间值转换为相应的范围内的值。 例如，将日期 2005-05-32 转换为 2005-06-01。 日期时间的输出始终遵循符号计数。 例如，以下项的格式化字符串:<code>yyyy-MM-dd</code>(其中 “-“ 是字段分隔符) 允许对一个或多个字符进行语法分析<code>MM</code>和<code>dd</code>。此转换允许输入无效的日期 (例如 2006-01-123 和 2006-011-12)。 值 2006-01-123 编写为日期 2006-05-03，而值 2006-011-12 编写为日期 2006-11-12。 时区格式符号 Z 出现的数目仅适用于输出 dateTime 格式。 空格被跳过。</li>\n<li><strong>物理类型</strong>：如果将 dateTime 对象的物理类型属性指定为压缩十进制，那么只有表示数字的模式格式化符号有效；即，表中“表示”列中包含“数字”的那些符号有效。 在格式模式中不允许使用其他字符。 例如，yyyyMMdd 有效，但是 yyyyMMMdd 无效，这是因为 MM 是月份的数字表示，而 MMM 是月份的文本表示。</li>\n<li>模式中的任何不在 [‘a’..’z’] 和 [‘A’..’Z’] 范围内的字符被视为引用的文本。 例如，冒号 (:)、逗号 (,)、句点 (.)、数字符（井号 #）、@ 符以及空格等字符将出现在所生成的时间文本中，即使这些字符未括在单引号内也是如此。</li>\n<li>您可能创建产生不可预测结果的格式字符串；因此必须谨慎使用这些符号。 例如，如果您指定<code>dMyyyy</code>，是无法区分日，月和年的。<code>dMyyyy</code>指示集成节点至少有一个字符表示日期，至少有一个字符表示月份，有四个字符表示年份。 因此<code>3112006</code>可能解释为 2006 年 11 月 3 日或 2006 年 1 月 31 日。</li>\n</ul>\n<p>注: 以下注释适用于上一张表。</p>\n<ol>\n<li><p>“一周中的某一天”字段是一周中的数字偏移量并且会根据物理消息集属性一周中的第一天而改变。 例如，如果将物理消息集属性一周中的第一天设置为星期一，那么一周中的第三天就是星期三。</p>\n</li>\n<li><p>12th 2006 年 7 月是 7 月的第二个星期三，可以表示为<code>2006 July Wednesday 2</code>使用格式字符串<code>yyyy MMMM EEEE F</code>。请注意，此格式不表示 2006 年 7 月 2 日的第 2 周的星期三，即 5th 2006 年 7 月; 此格式的字符串为<code>yyyy MMMM EEEE W</code>.</p>\n</li>\n<li><p>如果使用冲突的 am&#x2F;pm 字段指定，24 小时字段可能产品有歧义的时间。</p>\n</li>\n<li><p>请参阅 <a href=\"#ad09291___datetimeasstringiso8601\">ISO8601， I 和 T 日期时间标记</a>。</p>\n</li>\n<li><p>小数秒由大写 S 表示。 长度必须与输入中格式符号数目隐式匹配。 格式字符串<code>ss SSS</code>或<code>ss.SSS</code>例如，表示秒数和毫秒数。 但是，格式字符串<code>ss.sss</code>表示重复字段 (以秒为单位); 周期 (.) 后的值将作为秒字段，而不是作为小数秒。 输出将截断到指定长度。</p>\n</li>\n<li><p>一年的开始通常是在一周的某天。 如果这一周中的天数小于一年中第一个星期的天数物理消息集属性所指定的值，就认为这一周是上一年的最后一周；因此第一周从新年中的某天开始。 否则，就认为这一周是新年的第一周；在这种情况中，第一周在新年前的之几天开始。 例如， 2004 年第 1 周的星期一 (2004 年第 1 周的星期一，其中每年第 1 周 4 天数 &#x3D; 4 ，第 1 周的第 1 天 &#x3D; 星期一) 使用格式字符串<code>YYYY ww EEEE</code>实际上是 29th 2003 年 12 月。 如果您使用<code>Y</code>，一周中的第几天 (<code>E</code>) 和一年中的周 (<code>w</code>) 在必要时进行调整，以指示日期在上一年。</p>\n<p>如果使用小写字母<code>y</code>符号，那么不会进行调整，并且可能会对年底前后的日期产生不可预测的结果。 例如，如果将字符串 2002 01 Monday 格式化：</p>\n<ul>\n<li>2002 年第 1 周的星期一 (使用格式字符串)<code>YYYY ww EEEE</code>正确解释为<code>31st December 2001</code></li>\n<li>2002 年第 1 周的星期一 (使用格式字符串)<code>yyyy ww EEEE</code>被错误地解释为<code>30th December 2002</code></li>\n</ul>\n<p>使用<code>Y</code>与<code>w</code>仅当您未指定<code>w</code>，使用<code>y</code>.</p>\n</li>\n<li><p>一月中的第一周和最后一周可能包含相邻月份的天数。 例如，周一 31st 2006 年 7 月可以表示为 _2006 年 8 月第一周的星期一_，即<code>2006 08 1 Monday</code>使用格式字符串<code>yyyy MM W EEEE</code>.</p>\n</li>\n<li><p>年是作为特殊情况处理的：</p>\n<ul>\n<li>在输出时，如果计数为<code>y</code>是<code>2</code>，年份将截断为 2 位数字。 例如，如果<code>yyyy</code>生成<code>2006</code>,<code>yy</code>生成<code>06</code>.</li>\n<li>在输入时，对于 2 位数年份，将使用物理消息集属性世纪的开始采用 2 位数年份来确定世纪。 例如，如果将世纪的开始采用 2 位数年份设置为 53，97 年将是 1997，52 年是 2052，而 53 年是 1953。</li>\n</ul>\n</li>\n<li><p>使用<code>zzz</code>选项可能有不明确的结果。 例如：<code>BST</code>可以解释为<code>Bangladesh Standard Time</code>或<code>British Summer Time</code>. 出于兼容性原因， IBM® Integration Bus 使用先前的解释。</p>\n<p>要避免这些问题，请使用<code>zzzz</code>具有明确定义的名称的选项; 例如，欧洲&#x2F;伦敦，亚洲&#x2F;达卡或美洲&#x2F;洛杉矶。</p>\n</li>\n<li><p>秒<code>s</code> &amp;<code>ss</code>，必须在范围 0-59 内。 如果您需要构造一个 TIMESTAMP 来表示闰秒期间的时间，且要创建或强制转换的值要使用值 60 作为秒数，那么您必须在 ESQL 代码中处理此情况。 产品中的 CURRENT_ datetime 函数（例如 CURRENT_TIME）从不会生成秒值超出 0-59 范围的时间。</p>\n</li>\n</ol>\n","text":"时间格式化符号用于将日期时间格式化为字符串的字符下表列出了您可以在模式中用来格式化或解析与日期时间相关的字符串的字符。 该表下面是一些注意事项，它们对表中的某些...","permalink":"/post/JAVA/时间格式化符号","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"Number","slug":"Number","count":1,"path":"api/categories/Number.json"},{"name":"JAVA","slug":"Number/JAVA","count":1,"path":"api/categories/Number/JAVA.json"}],"tags":[{"name":"Text","slug":"Text","count":1,"path":"api/tags/Text.json"},{"name":"例如","slug":"例如","count":1,"path":"api/tags/例如.json"},{"name":"时区","slug":"时区","count":1,"path":"api/tags/时区.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%AC%A6%E5%8F%B7\"><span class=\"toc-text\">时间格式化符号</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E4%BA%8E%E5%B0%86%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">用于将日期时间格式化为字符串的字符</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"GitHub Actions 入门教程","uid":"f6a976669c665c437623667e8d82197c","slug":"OTHER/GitHub Actions 入门教程","date":"2022-09-24T18:34:35.000Z","updated":"2025-09-30T03:27:00.910Z","comments":true,"path":"api/articles/OTHER/GitHub Actions 入门教程.json","keywords":"XuGuangSheng","cover":"/covers/github-actions.jpg","text":"GitHub Actions 入门教程前言Github Actions 是 GitHub 推出的持续集成 (Continuous integration，简称 ...","permalink":"/post/OTHER/GitHub Actions 入门教程","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"job","slug":"job","count":1,"path":"api/categories/job.json"},{"name":"OTHER","slug":"job/OTHER","count":1,"path":"api/categories/job/OTHER.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"GitHub","slug":"GitHub","count":1,"path":"api/tags/GitHub.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"nginx--❤️图解及代码实现正向代理、反向代理及负载均衡","uid":"7c8ff8b55627526d1305ad59c430dd58","slug":"MIDDLEWARE/nginx--❤️图解及代码实现正向代理、反向代理及负载均衡","date":"2022-09-15T10:07:03.000Z","updated":"2025-09-30T03:26:53.541Z","comments":true,"path":"api/articles/MIDDLEWARE/nginx--❤️图解及代码实现正向代理、反向代理及负载均衡.json","keywords":"XuGuangSheng","cover":"/covers/nginx.jpg","text":"nginx–❤️图解及代码实现正向代理、反向代理及负载均衡什么是nginx？ 【百度百科】Nginx (engine x) 是一个高性能的HTTP和反向代理web...","permalink":"/post/MIDDLEWARE/nginx--❤️图解及代码实现正向代理、反向代理及负载均衡","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"nginx","slug":"nginx","count":3,"path":"api/categories/nginx.json"},{"name":"MIDDLEWARE","slug":"nginx/MIDDLEWARE","count":2,"path":"api/categories/nginx/MIDDLEWARE.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"http","slug":"http","count":6,"path":"api/tags/http.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}