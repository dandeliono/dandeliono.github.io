{"title":"Spring Boot配置文件指定包外文件","uid":"dd1cc8cb9e1a5d913e3dce35e0f864ee","slug":"JAVA/Spring Boot配置文件指定包外文件","date":"2021-08-07T15:16:44.000Z","updated":"2025-09-30T03:26:17.662Z","comments":true,"path":"api/articles/JAVA/Spring Boot配置文件指定包外文件.json","keywords":"XuGuangSheng","cover":"/covers/spring-boot.jpg","content":"<h1 id=\"Spring-Boot配置文件指定包外文件\"><a href=\"#Spring-Boot配置文件指定包外文件\" class=\"headerlink\" title=\"Spring Boot配置文件指定包外文件\"></a>Spring Boot配置文件指定包外文件</h1><h2 id=\"通过命令行指定\"><a href=\"#通过命令行指定\" class=\"headerlink\" title=\"通过命令行指定#\"></a>通过命令行指定<a href=\"#1625638747\">#</a></h2><p>SpringApplication 会默认将命令行选项参数转换为配置信息<br>例如，启动时命令参数指定：</p>\n<p><code>java -jar myproject.jar --server.port = 9000</code> </p>\n<p>从命令行指定配置项的优先级最高，不过你可以通过 setAddCommandLineProperties 来禁用</p>\n<p><code>SpringApplication.setAddCommandLineProperties(false).</code> </p>\n<h2 id=\"外置配置文件\"><a href=\"#外置配置文件\" class=\"headerlink\" title=\"外置配置文件#\"></a>外置配置文件<a href=\"#582670658\">#</a></h2><p>Spring 程序会按优先级从下面这些路径来加载 application.properties 配置文件</p>\n<ul>\n<li>当前目录下的 &#x2F; config 目录</li>\n<li>当前目录</li>\n<li>classpath 里的 &#x2F; config 目录</li>\n<li>classpath 跟目录</li>\n</ul>\n<p>因此，要外置配置文件就很简单了，在 jar 所在目录新建 config 文件夹，然后放入配置文件，或者直接放在配置文件在 jar 目录</p>\n<h2 id=\"自定义配置文件\"><a href=\"#自定义配置文件\" class=\"headerlink\" title=\"自定义配置文件#\"></a>自定义配置文件<a href=\"#2596559094\">#</a></h2><p>如果你不想使用 application.properties 作为配置文件，怎么办？完全没问题</p>\n<p><code>java -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties</code> </p>\n<p>或者</p>\n<p><code>java -jar -Dspring.config.location=D:\\config\\config.properties springbootrestdemo-0.0.1-SNAPSHOT.jar</code> </p>\n<p>当然，还能在代码里指定</p>\n<p>`@SpringBootApplication<br>@PropertySource(value&#x3D;{“file:config.properties”})<br>public class SpringbootrestdemoApplication {</p>\n<pre><code>public static void main(String[] args) &#123;\n    SpringApplication.run(SpringbootrestdemoApplication.class, args);\n&#125;\n</code></pre>\n<p>}` </p>\n<h2 id=\"按-Profile-不同环境读取不同配置\"><a href=\"#按-Profile-不同环境读取不同配置\" class=\"headerlink\" title=\"按 Profile 不同环境读取不同配置#\"></a>按 Profile 不同环境读取不同配置<a href=\"#1081893387\">#</a></h2><p>不同环境的配置设置一个配置文件，例如：</p>\n<ul>\n<li>dev 环境下的配置配置在 application-dev.properties 中；</li>\n<li>prod 环境下的配置配置在 application-prod.properties 中。</li>\n</ul>\n<p>在 application.properties 中指定使用哪一个文件</p>\n<p><code>spring.profiles.active = dev</code> </p>\n<p>当然，你也可以在运行的时候手动指定：</p>\n<p><code>java -jar myproject.jar --spring.profiles.active = prod</code><br> <a href=\"https://www.cnblogs.com/xiaoqi/p/6955288.html\">https://www.cnblogs.com/xiaoqi/p/6955288.html</a></p>\n","text":"Spring Boot配置文件指定包外文件通过命令行指定#SpringApplication 会默认将命令行选项参数转换为配置信息例如，启动时命令参数指定： j...","permalink":"/post/JAVA/Spring Boot配置文件指定包外文件","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"jar","slug":"jar","count":1,"path":"api/categories/jar.json"},{"name":"JAVA","slug":"jar/JAVA","count":1,"path":"api/categories/jar/JAVA.json"}],"tags":[{"name":"properties","slug":"properties","count":1,"path":"api/tags/properties.json"},{"name":"config","slug":"config","count":1,"path":"api/tags/config.json"},{"name":"application","slug":"application","count":1,"path":"api/tags/application.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Spring-Boot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%8C%87%E5%AE%9A%E5%8C%85%E5%A4%96%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">Spring Boot配置文件指定包外文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8C%87%E5%AE%9A\"><span class=\"toc-text\">通过命令行指定</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%96%E7%BD%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">外置配置文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">自定义配置文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%89-Profile-%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E8%AF%BB%E5%8F%96%E4%B8%8D%E5%90%8C%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">按 Profile 不同环境读取不同配置</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java异步编程","uid":"24d9916b82108a815fcb896c7754eb78","slug":"JAVA/Java异步编程","date":"2021-08-08T23:36:51.000Z","updated":"2025-09-30T03:26:12.693Z","comments":true,"path":"api/articles/JAVA/Java异步编程.json","keywords":"XuGuangSheng","cover":"/covers/java.jpg","text":"Java异步编程随着RxJava、Reactor等异步框架的流行，异步编程受到了越来越多的关注，尤其是在 IO 密集型的业务场景中，相比传统的同步开发模式，异步...","permalink":"/post/JAVA/Java异步编程","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"com","slug":"com","count":3,"path":"api/categories/com.json"},{"name":"JAVA","slug":"com/JAVA","count":1,"path":"api/categories/com/JAVA.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"raw","slug":"raw","count":5,"path":"api/tags/raw.json"},{"name":"githubusercontent","slug":"githubusercontent","count":3,"path":"api/tags/githubusercontent.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"ES 操作之批量写-BulkProcessor 原理浅析","uid":"bd22547b0a0201a36c471a9e283ced81","slug":"JAVA/ES 操作之批量写-BulkProcessor 原理浅析","date":"2021-08-05T23:32:23.000Z","updated":"2025-09-30T03:26:10.161Z","comments":true,"path":"api/articles/JAVA/ES 操作之批量写-BulkProcessor 原理浅析.json","keywords":"XuGuangSheng","cover":"/covers/es-bulkprocessor.jpg","text":"ES 操作之批量写-BulkProcessor 原理浅析 BulkProcessor 创建流程 [内部逻辑实现] 123456最近对线上业务进行重构，涉及到ES...","permalink":"/post/JAVA/ES 操作之批量写-BulkProcessor 原理浅析","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"BulkProcessor","slug":"BulkProcessor","count":1,"path":"api/categories/BulkProcessor.json"},{"name":"JAVA","slug":"BulkProcessor/JAVA","count":1,"path":"api/categories/BulkProcessor/JAVA.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"consumer","slug":"consumer","count":2,"path":"api/tags/consumer.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}