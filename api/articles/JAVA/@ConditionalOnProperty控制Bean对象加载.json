{"title":"ConditionalOnProperty控制Bean对象加载","uid":"d258daee60faadc2bf7311dc982adc47","slug":"JAVA/@ConditionalOnProperty控制Bean对象加载","date":"2021-08-25T15:27:06.000Z","updated":"2025-09-30T03:26:06.395Z","comments":true,"path":"api/articles/JAVA/@ConditionalOnProperty控制Bean对象加载.json","keywords":"XuGuangSheng","cover":"/covers/conditionalonpropertybean.jpg","content":"<h1 id=\"ConditionalOnProperty控制Bean对象加载\"><a href=\"#ConditionalOnProperty控制Bean对象加载\" class=\"headerlink\" title=\"@ConditionalOnProperty控制Bean对象加载\"></a>@ConditionalOnProperty控制Bean对象加载</h1><p><strong>1、简介</strong></p>\n<p> 　　SpringBoot 通过 @ConditionalOnProperty 来控制 @Configuration 是否生效</p>\n<p><strong>2、说明</strong></p>\n<pre><code>@Retention(RetentionPolicy.RUNTIME)\n@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)\n@Documented\n@Conditional(OnPropertyCondition.class) public @interface ConditionalOnProperty &#123;\n\n   String\\[\\] value() default &#123;&#125;; //数组，获取对应property名称的值，与name不可同时使用 \n String prefix() default &quot;&quot;;//property名称的前缀(最后一个属性前的一串。比如aaa.bbb.ccc，则prefix为aaa.bbb)，可有可无 \n String\\[\\] name() default &#123;&#125;;//数组，property完整名称或部分名称（可与prefix组合使用，组成完整的property名称），与value不可同时使用 \n String havingValue() default &quot;&quot;;//可与name组合使用，比较获取到的属性值与havingValue给定的值是否相同，相同才加载配置 \n boolean matchIfMissing() default false;//缺省配置。配置文件没有配置时，表示使用当前property。配置文件与havingValue匹配时，也使用当前property\n boolean relaxedNames() default true;//是否可以松散匹配，至今不知道怎么使用的 \n&#125;\n</code></pre>\n<p><strong>3、单个示例</strong></p>\n<p>　a、建立一个 Configuration 配置类:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">@Data</span></span><br><span class=\"line\"><span class=\"variable\">@Configuration</span></span><br><span class=\"line\"><span class=\"variable\">@ConditionalOnProperty</span>(value \\= <span class=\"string\">&quot;test.conditional&quot;</span>, havingValue = <span class=\"string\">&quot;abc&quot;</span>) <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestConfiguration</span> &#123; <span class=\"regexp\">/\\*\\* 默认值 \\*/</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title class_\">String</span> field = <span class=\"string\">&quot;default&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>　b、建立一个测试类：</p>\n<pre><code>@RestController\n@RequestMapping(&quot;test&quot;) public class TestController &#123;\n\n    @Autowired(required \\= false) private TestConfiguration test1Configuration;\n\n    @GetMapping(&quot;testConfiguration&quot;) public String testConfiguration() &#123; if (test1Configuration != null) &#123; return test1Configuration.getField();\n        &#125; return &quot;OK&quot;;\n    &#125;\n\n&#125;\n</code></pre>\n<p>c、配置文件 application.yml：</p>\n<p> d、通过 postman 或者其它工具发送请求。结果如下：</p>\n<p>以上表明 TestConfiguration 配置文件生效了</p>\n<p><strong>4、多种示例</strong></p>\n<p>接下来，改变 @ConditionalOnProperty 中的各个属性，然后通过查看返回结果来判断 TestConfiguration 是否生效。</p>\n<p>1、不配置 @ConditionalOnProperty，直接生效。</p>\n<p>2、只有 value 属性，没有 havingValue 属性。如果 application.yml 配置了 test.conditional 则生效，否则不生效。  </p>\n<pre><code>@ConditionalOnProperty(value = &quot;test.conditional&quot;)\n</code></pre>\n<p>3、prefix + name 相当于 value 属性 (两者不可同时使用)。如果 application.yml 配置了 test.conditional 则生效，否则不生效</p>\n<pre><code>@ConditionalOnProperty(prefix = &quot;test&quot;, name = &quot;conditional&quot;)\n</code></pre>\n<p>4、name 属性为一个数组，当要匹配多个值时，如果 application.yml 的配置与 name 属性中的值一一匹配则生效，否则不生效</p>\n<pre><code>@ConditionalOnProperty(prefix = &quot;test&quot;, name = &#123; &quot;conditional&quot;, &quot;other&quot; &#125;)\n\ntest:\n  conditional: abc\n  other: edf\n</code></pre>\n<p>5、当 matchIfMissing&#x3D;true 时：</p>\n<p> a、如果 application.yml 配置了 test.conditional 则生效 (此时 matchIfMissing 可有可无)，否则不生效</p>\n<p> b、如果 application.yml 啥都没配置则生效</p>\n<pre><code>@ConditionalOnProperty(prefix = &quot;test&quot;, name = &quot;conditional&quot;, matchIfMissing = true)\n</code></pre>\n<p>6、加上 havingValue 属性。当 havingValue 的值与 application.yml 文件中 test.conditional 的值一致时则生效，否则不生效</p>\n<pre><code>@ConditionalOnProperty(prefix = &quot;test&quot;, name = &quot;conditional&quot;, havingValue = &quot;abc&quot;)\n</code></pre>\n<p>7、加上 havingValue 属性。name 属性为数组时，如果 application.yml 文件中配置了相关属性且值都一致时则生效，否则不生效</p>\n<pre><code>@ConditionalOnProperty(prefix = &quot;test&quot;, name = &#123; &quot;conditional&quot;, &quot;other&quot; &#125;, havingValue = &quot;abc&quot;)\n\ntest:\n  conditional: abc\n  other: abc\n</code></pre>\n<p> <a href=\"https://www.cnblogs.com/xuwenjin/p/12603232.html\">https://www.cnblogs.com/xuwenjin/p/12603232.html</a></p>\n","text":"@ConditionalOnProperty控制Bean对象加载1、简介 SpringBoot 通过 @ConditionalOnProperty 来控制 @C...","permalink":"/post/JAVA/@ConditionalOnProperty控制Bean对象加载","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"application","slug":"application","count":1,"path":"api/categories/application.json"},{"name":"JAVA","slug":"application/JAVA","count":1,"path":"api/categories/application/JAVA.json"}],"tags":[{"name":"yml","slug":"yml","count":1,"path":"api/tags/yml.json"},{"name":"如果","slug":"如果","count":2,"path":"api/tags/如果.json"},{"name":"否则不生效","slug":"否则不生效","count":1,"path":"api/tags/否则不生效.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ConditionalOnProperty%E6%8E%A7%E5%88%B6Bean%E5%AF%B9%E8%B1%A1%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">@ConditionalOnProperty控制Bean对象加载</span></a></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Redis key 过期","uid":"6080594d045265903c518febf773294c","slug":"JAVA/Redis key 过期","date":"2021-08-26T18:26:40.000Z","updated":"2025-09-30T03:26:14.449Z","comments":true,"path":"api/articles/JAVA/Redis key 过期.json","keywords":"XuGuangSheng","cover":"/covers/redis-key.jpg","text":"Redis key 过期*Keys with an expire 有过期的 keyNormally Redis keys are created without...","permalink":"/post/JAVA/Redis key 过期","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"the","slug":"the","count":2,"path":"api/categories/the.json"},{"name":"JAVA","slug":"the/JAVA","count":1,"path":"api/categories/the/JAVA.json"}],"tags":[{"name":"Redis","slug":"Redis","count":3,"path":"api/tags/Redis.json"},{"name":"keys","slug":"keys","count":1,"path":"api/tags/keys.json"},{"name":"expire","slug":"expire","count":1,"path":"api/tags/expire.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"top linux下的任务管理器","uid":"549d64a763c7476fdfa760218054955e","slug":"LINUX/top linux下的任务管理器","date":"2021-08-23T17:12:55.000Z","updated":"2025-09-30T03:26:40.185Z","comments":true,"path":"api/articles/LINUX/top linux下的任务管理器.json","keywords":"XuGuangSheng","cover":"/covers/top-linux.jpg","text":"top linux下的任务管理器Linux Tools Quick Tutorial top 命令是 Linux 下常用的性能分析工具，能够实时显示系统中各个进...","permalink":"/post/LINUX/top linux下的任务管理器","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"top","slug":"top","count":1,"path":"api/categories/top.json"},{"name":"LINUX","slug":"top/LINUX","count":1,"path":"api/categories/top/LINUX.json"}],"tags":[{"name":"CPU","slug":"CPU","count":3,"path":"api/tags/CPU.json"},{"name":"total","slug":"total","count":2,"path":"api/tags/total.json"},{"name":"Cpu","slug":"Cpu","count":1,"path":"api/tags/Cpu.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}