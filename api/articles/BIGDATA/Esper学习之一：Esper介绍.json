{"title":"Esper学习之一：Esper介绍","uid":"7959b0a0c2b89085e6f8a032821dbd4d","slug":"BIGDATA/Esper学习之一：Esper介绍","date":"2023-06-08T17:48:32.000Z","updated":"2025-09-30T03:26:03.131Z","comments":true,"path":"api/articles/BIGDATA/Esper学习之一：Esper介绍.json","keywords":"XuGuangSheng","cover":"/covers/esperesper.jpg","content":"<h1 id=\"Esper学习之一：Esper介绍\"><a href=\"#Esper学习之一：Esper介绍\" class=\"headerlink\" title=\"Esper学习之一：Esper介绍\"></a>Esper学习之一：Esper介绍</h1><p>CEP即Complex Event Process，中文意思就是“复杂事件处理”。听起来好像很复杂，实际上就是基于事件流进行数据处理，把要分析的数据抽象成事件，然后将数据发送到CEP引擎，引擎就会根据事件的输入和最初注册的处理模型，得到事件处理结果。</p>\n<p>       有人可能要问了，这和Hadoop有什么区别？可是本人不才，没学过Hadoop，虽然说赶上了这阵风，但是从很多人那了解以后，觉得不过就是个不是特别成熟的工具，然后各个公司要根据需求对Hadoop进行二次开发，就需要懂得源码的人。所以就没打算学了，一个工具而已，等到自己确实有空的时候再学也不迟。至于CEP和Hadoop的区别，应该是Esper和Hadoop的区别，我的理解是：Hadoop适合做事后分析，而Esper适合实时分析。Hadoop我确实不是很了解，如果有问题还希望大家指正。</p>\n<p>       CEP是一种标准，Esper只是对这个标准的一种开源实现。除了Esper，很多大公司也有类似的商业软件，比如IBM，Sybase等等，听说巨贵无比。CEP的一个重要特点就是他是一个内存计算工具和类SQL语句。内存计算可以说是一把双刃剑。好处自不必说，一个字：快！坏处也显而易见，数据有丢失的风险，而且还有容量的限制（实时计算其实并不受制于内存大小，而是得看如何对实时进行定义，也就是具体的业务来决定了）。所以如果业务不能容忍数据丢失，那么高可用方案就必须做好，不过Esper的高可用很不好做，后面我将会说到。</p>\n<p>       CEP的类SQL语句，可以理解为处理模型的定义与描述。这是运行在CEP引擎中的特殊语句，之所以叫他类SQL，是因为它和SQL确实很像，除了select，insert，delete，update，而且也有avg，count等函数。所以对于会SQL的人来说，他的语法结构大致还是能猜出一二的。在Esper中，这个句子叫做EPL，即Event Process Language。作为Esper的核心内容，对于它的讲解有三四百页的英文文档，所以之后我会慢慢向大家细细说明的。</p>\n<p>下面就简单写个列子给大家看看吧。场景是计算3个苹果的平均价格</p>\n<ol>\n<li><p>package test;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPAdministrator;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPRuntime;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPServiceProvider;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPServiceProviderManager;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPStatement;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EventBean;  </p>\n</li>\n<li><p>import com.espertech.esper.client.UpdateListener;  </p>\n</li>\n<li><p>class Apple  </p>\n</li>\n<li><p>{  </p>\n</li>\n<li><p>    private int id;  </p>\n</li>\n<li><p>    private int price;  </p>\n</li>\n<li><p>    public int getId()  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return id;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public void setId(int id)  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        this.id &#x3D; id;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public int getPrice()  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return price;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public void setPrice(int price)  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        this.price &#x3D; price;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>}  </p>\n</li>\n<li><p>class AppleListener implements UpdateListener  </p>\n</li>\n<li><p>{  </p>\n</li>\n<li><p>    public void update(EventBean[] newEvents, EventBean[] oldEvents)  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        if (newEvents !&#x3D; null)  </p>\n</li>\n<li><p>        {  </p>\n</li>\n<li><p>            Double avg &#x3D; (Double) newEvents[0].get(“avg(price)”);  </p>\n</li>\n<li><p>            System.out.println(“Apple’s average price is “ + avg);  </p>\n</li>\n<li><p>        }  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>}  </p>\n</li>\n<li><p>public class Test {  </p>\n</li>\n<li><p>    public static void main(String[] args) throws InterruptedException {  </p>\n</li>\n<li><p>        EPServiceProvider epService &#x3D; EPServiceProviderManager.getDefaultProvider();  </p>\n</li>\n<li><p>        EPAdministrator admin &#x3D; epService.getEPAdministrator();  </p>\n</li>\n<li><p>        String product &#x3D; Apple.class.getName();  </p>\n</li>\n<li><p>        String epl &#x3D; “select avg(price) from “ + product + “.win:length_batch(3)”;  </p>\n</li>\n<li><p>        EPStatement state &#x3D; admin.createEPL(epl);  </p>\n</li>\n<li><p>        state.addListener(new AppleListener());  </p>\n</li>\n<li><p>        EPRuntime runtime &#x3D; epService.getEPRuntime();  </p>\n</li>\n<li><p>        Apple apple1 &#x3D; new Apple();  </p>\n</li>\n<li><p>        apple1.setId(1);  </p>\n</li>\n<li><p>        apple1.setPrice(5);  </p>\n</li>\n<li><p>        runtime.sendEvent(apple1);  </p>\n</li>\n<li><p>        Apple apple2 &#x3D; new Apple();  </p>\n</li>\n<li><p>        apple2.setId(2);  </p>\n</li>\n<li><p>        apple2.setPrice(2);  </p>\n</li>\n<li><p>        runtime.sendEvent(apple2);  </p>\n</li>\n<li><p>        Apple apple3 &#x3D; new Apple();  </p>\n</li>\n<li><p>        apple3.setId(3);  </p>\n</li>\n<li><p>        apple3.setPrice(5);  </p>\n</li>\n<li><p>        runtime.sendEvent(apple3);  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>}</p>\n</li>\n</ol>\n<p>  </p>\n<p>很简单的例子，虽然没有加注释，也应该很好懂吧。大家可以自己运行一下看看是什么结果。</p>\n<p>Esper的官网：<a href=\"http://esper.codehaus.org/\">http://esper.codehaus.org/</a> 里面有很多例子可以</p>\n","text":"Esper学习之一：Esper介绍CEP即Complex Event Process，中文意思就是“复杂事件处理”。听起来好像很复杂，实际上就是基于事件流进行数...","permalink":"/post/BIGDATA/Esper学习之一：Esper介绍","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"apple","slug":"apple","count":1,"path":"api/categories/apple.json"},{"name":"BIGDATA","slug":"apple/BIGDATA","count":1,"path":"api/categories/apple/BIGDATA.json"}],"tags":[{"name":"Esper","slug":"Esper","count":2,"path":"api/tags/Esper.json"},{"name":"esper","slug":"esper","count":2,"path":"api/tags/esper.json"},{"name":"Apple","slug":"Apple","count":2,"path":"api/tags/Apple.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Esper%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%80%EF%BC%9AEsper%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">Esper学习之一：Esper介绍</span></a></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Esper学习之二：事件类型","uid":"ae77ccdae608040cb14f38fa6a0025f9","slug":"BIGDATA/Esper学习之二：事件类型","date":"2023-06-08T17:49:07.000Z","updated":"2025-09-30T03:26:03.811Z","comments":true,"path":"api/articles/BIGDATA/Esper学习之二：事件类型.json","keywords":"XuGuangSheng","cover":"/covers/esper.jpg","text":"Esper学习之二：事件类型Esper对事件有特殊的数据结构约定。能处理的事件结构有：POJO，java.util.Map，Object Array，XML 1...","permalink":"/post/BIGDATA/Esper学习之二：事件类型","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"String","slug":"String","count":1,"path":"api/categories/String.json"},{"name":"BIGDATA","slug":"String/BIGDATA","count":1,"path":"api/categories/String/BIGDATA.json"}],"tags":[{"name":"class","slug":"class","count":2,"path":"api/tags/class.json"},{"name":"Map","slug":"Map","count":1,"path":"api/tags/Map.json"},{"name":"Person","slug":"Person","count":1,"path":"api/tags/Person.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"tcpdump在启用TCP卸载功能的网卡上报告 checksum error ·","uid":"1bb022f0a90cc114ad2400e87144dac4","slug":"LINUX/tcpdump在启用TCP卸载功能的网卡上报告 checksum error ·","date":"2023-06-08T12:39:56.000Z","updated":"2025-09-30T03:26:39.106Z","comments":true,"path":"api/articles/LINUX/tcpdump在启用TCP卸载功能的网卡上报告 checksum error ·.json","keywords":"XuGuangSheng","cover":"/covers/tcpdumptcp-checksum-error.jpg","text":"tcpdump在启用TCP卸载功能的网卡上报告”checksum error” ·在使用tcpdump对网卡进行抓包的时，很多时候会发现有cksum incor...","permalink":"/post/LINUX/tcpdump在启用TCP卸载功能的网卡上报告 checksum error ·","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"TCP","slug":"TCP","count":3,"path":"api/categories/TCP.json"},{"name":"LINUX","slug":"TCP/LINUX","count":1,"path":"api/categories/TCP/LINUX.json"}],"tags":[{"name":"checksum","slug":"checksum","count":1,"path":"api/tags/checksum.json"},{"name":"offloading","slug":"offloading","count":1,"path":"api/tags/offloading.json"},{"name":"offload","slug":"offload","count":1,"path":"api/tags/offload.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}