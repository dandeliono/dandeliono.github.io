{"title":"Esper学习之十四：Pattern（一）","uid":"bdf0bc79680e5abcf1a951c9276dec8c","slug":"BIGDATA/Esper学习之十四：Pattern（一）","date":"2023-06-09T11:31:58.000Z","updated":"2025-09-30T03:26:04.344Z","comments":true,"path":"api/articles/BIGDATA/Esper学习之十四：Pattern（一）.json","keywords":"XuGuangSheng","cover":"/covers/esperpattern.jpg","content":"<h1 id=\"Esper学习之十四：Pattern（一）\"><a href=\"#Esper学习之十四：Pattern（一）\" class=\"headerlink\" title=\"Esper学习之十四：Pattern（一）\"></a>Esper学习之十四：Pattern（一）</h1><p><strong>1. Pattern Atoms and Pattern operators</strong><br>Pattern是通过原子事件和操作符组合在一起构成模板。原子事件有3类，操作符有4类，具体如下：</p>\n<p>原子事件：<br>**1).**普通事件：包括POJO，Map，Array，XML<br>**2).**时间事件：包括间隔n个时间单位、crontab<br>**3).**自定义插件：用于观察特定事件的发生</p>\n<p>操作符：<br>**1).**重复操作符：every, every-distinct, [num] and until<br>**2).**逻辑操作符：and, or, not<br>**3).**顺序操作符：-&gt;（Followed by）<br>**4).**事件生命周期操作符：timer:within, timer:withinmax, while-expression, 自定义插件</p>\n<p>关于操作符，自然会有优先级，具体如下：</p>\n<table>\n<thead>\n<tr>\n<th>Precedence</th>\n<th>Operator</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>guard postfix</p>\n<p> | where timer:within and while (expression) (incl. withinmax and plug-in pattern guard) | </p>\n<p>MyEvent where timer:within(1 sec)</p>\n<p> |<br>| 2 | </p>\n<p>unary</p>\n<p> | every, not every, distinct | </p>\n<p>every MyEvent<br>timer:interval(5 min) and not MyEvent</p>\n<p> |<br>| 3 | repeat | [num], until | </p>\n<p>[5] MyEvent</p>\n<p>[1..3] MyEvent until MyOtherEvent</p>\n<p> |<br>| 4 | and | and | every (MyEvent and MyOtherEvent) |<br>| 5 | or | or | every (MyEvent or MyOtherEvent) |<br>| 6 | followed by | -&gt; | every (MyEvent -&gt; MyOtherEvent) |</p>\n<p>上面的内容各位可以先有个印象，方便理解之后的详解。</p>\n<p><strong>2. Pattern Filter Expression</strong><br>Pattern的Filter表达式和普通的表达式没有区别，我就不展开讲解了，各位看看下面几个例子就好，除了Filter之外的东西暂时不用关心是什么意思。</p>\n<p><strong>1).</strong> every e1&#x3D;RfidEvent -&gt; e2&#x3D;RfidEvent(assetId&#x3D;e1.assetId)<br>**2).**every e1&#x3D;RfidEvent -&gt; e2&#x3D;RfidEvent(MyLib.isInRadius(e1.x, e1.y, x, y) and zone in (1, e1.zone))<br>**3).**every (RfidEvent(zone &gt; 1) and RfidEvent(zone &lt; 10))</p>\n<p><strong>3. Controlling Event Consumption</strong><br>       上面说到了Filter，因为Pattern可以由多个原子事件组成，那么Filter自然也会有多个，正常情况下，所有的Filter都会对进入引擎的事件进行判定，但是我们也有只需要判定一次的时候，只要满足了某个Filter，那么其他的Filter就不用管这个事件了。Esper考虑到了这个需求，我们只需要在Filter表达式后面加个@consume注解即可，此注解可以跟随数字，表示过滤的优先级。默认优先级为1，数值越大优先级越高。</p>\n<p>为了结合上面几节的知识，我给了个完整的实例：</p>\n<p>执行结果：</p>\n<ol>\n<li><p>EPL1: every (a&#x3D;example.ConsumeEvent(id &#x3D; 1)@consume and b&#x3D;example.ConsumeEvent(name &#x3D; ‘luonq’))  </p>\n</li>\n<li><p>Send Event: ConsumeEvent{id&#x3D;1, name&#x3D;’luonq’, age&#x3D;0}  </p>\n</li>\n<li><p>Send Event: ConsumeEvent{id&#x3D;2, name&#x3D;’luonq’, age&#x3D;0}  </p>\n</li>\n<li><p>a: ConsumeEvent{id&#x3D;1, name&#x3D;’luonq’, age&#x3D;0}  </p>\n</li>\n<li><p>b: ConsumeEvent{id&#x3D;2, name&#x3D;’luonq’, age&#x3D;0}  </p>\n</li>\n<li><p>EPL2: every (a&#x3D;example.ConsumeEvent(id &#x3D; 1)@consume(2) or b&#x3D;example.ConsumeEvent(name &#x3D; ‘luonq’)@consume(3) or c&#x3D;example.ConsumeEvent(age &gt; 2))  </p>\n</li>\n<li><p>Send Event: ConsumeEvent{id&#x3D;1, name&#x3D;’luonq’, age&#x3D;3}  </p>\n</li>\n<li><p>a: null  </p>\n</li>\n<li><p>b: ConsumeEvent{id&#x3D;1, name&#x3D;’luonq’, age&#x3D;3}  </p>\n</li>\n<li><p>c: null  </p>\n</li>\n<li><p>Send Event: ConsumeEvent{id&#x3D;1, name&#x3D;’luonqin’, age&#x3D;1}  </p>\n</li>\n<li><p>a: ConsumeEvent{id&#x3D;1, name&#x3D;’luonqin’, age&#x3D;1}  </p>\n</li>\n<li><p>b: null  </p>\n</li>\n<li><p>c: null  </p>\n</li>\n<li><p>Send Event: ConsumeEvent{id&#x3D;3, name&#x3D;’luonqin’, age&#x3D;5}  </p>\n</li>\n<li><p>a: null  </p>\n</li>\n<li><p>b: null  </p>\n</li>\n<li><p>c: ConsumeEvent{id&#x3D;3, name&#x3D;’luonqin’, age&#x3D;5}</p>\n</li>\n</ol>\n<p>  </p>\n<p>这里先简单说明下，every关键字表示引擎把每个事件都进行Pattern的匹配，而不管上一个匹配是否完成。or和and就是或和且的意思，表示满足某个以及满足所有。</p>\n<p>去掉consume的执行结果：</p>\n<ol>\n<li><p>EPL1: every (a&#x3D;example.ConsumeEvent(id &#x3D; 1) and b&#x3D;example.ConsumeEvent(name &#x3D; ‘luonq’))  </p>\n</li>\n<li><p>Send Event: ConsumeEvent{id&#x3D;1, name&#x3D;’luonq’, age&#x3D;0}  </p>\n</li>\n<li><p>a: ConsumeEvent{id&#x3D;1, name&#x3D;’luonq’, age&#x3D;0}  </p>\n</li>\n<li><p>b: ConsumeEvent{id&#x3D;1, name&#x3D;’luonq’, age&#x3D;0}  </p>\n</li>\n<li><p>Send Event: ConsumeEvent{id&#x3D;2, name&#x3D;’luonq’, age&#x3D;0}  </p>\n</li>\n<li><p>EPL2: every (a&#x3D;example.ConsumeEvent(id &#x3D; 1) or b&#x3D;example.ConsumeEvent(name &#x3D; ‘luonq’) or c&#x3D;example.ConsumeEvent(age &gt; 2))  </p>\n</li>\n<li><p>Send Event: ConsumeEvent{id&#x3D;1, name&#x3D;’luonq’, age&#x3D;3}  </p>\n</li>\n<li><p>a: ConsumeEvent{id&#x3D;1, name&#x3D;’luonq’, age&#x3D;3}  </p>\n</li>\n<li><p>b: null  </p>\n</li>\n<li><p>c: null  </p>\n</li>\n<li><p>Send Event: ConsumeEvent{id&#x3D;1, name&#x3D;’luonqin’, age&#x3D;1}  </p>\n</li>\n<li><p>a: ConsumeEvent{id&#x3D;1, name&#x3D;’luonqin’, age&#x3D;1}  </p>\n</li>\n<li><p>b: null  </p>\n</li>\n<li><p>c: null  </p>\n</li>\n<li><p>Send Event: ConsumeEvent{id&#x3D;3, name&#x3D;’luonqin’, age&#x3D;5}  </p>\n</li>\n<li><p>a: null  </p>\n</li>\n<li><p>b: null  </p>\n</li>\n<li><p>c: ConsumeEvent{id&#x3D;3, name&#x3D;’luonqin’, age&#x3D;5}</p>\n</li>\n</ol>\n<p>  </p>\n<p>上面的例子可能看得不是很懂，不过没关系，等到后面讲操作符进行详解后再来回顾就很简单了。</p>\n","text":"Esper学习之十四：Pattern（一）1. Pattern Atoms and Pattern operatorsPattern是通过原子事件和操作符组合在...","permalink":"/post/BIGDATA/Esper学习之十四：Pattern（一）","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"ConsumeEvent","slug":"ConsumeEvent","count":1,"path":"api/categories/ConsumeEvent.json"},{"name":"BIGDATA","slug":"ConsumeEvent/BIGDATA","count":1,"path":"api/categories/ConsumeEvent/BIGDATA.json"}],"tags":[{"name":"name","slug":"name","count":6,"path":"api/tags/name.json"},{"name":"age","slug":"age","count":1,"path":"api/tags/age.json"},{"name":"every","slug":"every","count":1,"path":"api/tags/every.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Esper%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8D%81%E5%9B%9B%EF%BC%9APattern%EF%BC%88%E4%B8%80%EF%BC%89\"><span class=\"toc-text\">Esper学习之十四：Pattern（一）</span></a></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Linux Tar Split压缩解压缩分片压缩解压缩","uid":"e7a83bdf4e44456c4b6fc5db7d1c3bb4","slug":"LINUX/Linux Tar Split压缩解压缩分片压缩解压缩","date":"2023-06-12T14:15:57.000Z","updated":"2025-09-30T03:26:31.498Z","comments":true,"path":"api/articles/LINUX/Linux Tar Split压缩解压缩分片压缩解压缩.json","keywords":"XuGuangSheng","cover":"/covers/linux-tar-split.jpg","text":"Linux Tar Split压缩解压缩分片压缩解压缩文件压缩tar -zcvf test.tar.gz test/ -z：是否同时具有gzip属性，是否需要g...","permalink":"/post/LINUX/Linux Tar Split压缩解压缩分片压缩解压缩","photos":[],"count_time":{"symbolsCount":750,"symbolsTime":"1 mins."},"categories":[{"name":"tar","slug":"tar","count":1,"path":"api/categories/tar.json"},{"name":"LINUX","slug":"tar/LINUX","count":1,"path":"api/categories/tar/LINUX.json"}],"tags":[{"name":"test","slug":"test","count":1,"path":"api/tags/test.json"},{"name":"gzip","slug":"gzip","count":1,"path":"api/tags/gzip.json"},{"name":"stdout","slug":"stdout","count":1,"path":"api/tags/stdout.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Esper学习之十二：EPL语法（八）","uid":"247a554806e84b69903a33066dd8bcf1","slug":"BIGDATA/Esper学习之十二：EPL语法（八）","date":"2023-06-09T10:49:00.000Z","updated":"2025-09-30T03:26:04.088Z","comments":true,"path":"api/articles/BIGDATA/Esper学习之十二：EPL语法（八）.json","keywords":"XuGuangSheng","cover":"/covers/esperepl.jpg","text":"Esper学习之十二：EPL语法（八） 今天的内容十分重要，在Esper的应用中是十分常用的功能之一。它是一种事件集合，我们可以对这个集合进行增删查改，所以在复...","permalink":"/post/BIGDATA/Esper学习之十二：EPL语法（八）","photos":[],"count_time":{"symbolsCount":"32k","symbolsTime":"29 mins."},"categories":[{"name":"window","slug":"window","count":1,"path":"api/categories/window.json"},{"name":"BIGDATA","slug":"window/BIGDATA","count":1,"path":"api/categories/window/BIGDATA.json"}],"tags":[{"name":"select","slug":"select","count":5,"path":"api/tags/select.json"},{"name":"name","slug":"name","count":6,"path":"api/tags/name.json"},{"name":"named","slug":"named","count":1,"path":"api/tags/named.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}