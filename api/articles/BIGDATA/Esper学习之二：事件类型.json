{"title":"Esper学习之二：事件类型","uid":"ae77ccdae608040cb14f38fa6a0025f9","slug":"BIGDATA/Esper学习之二：事件类型","date":"2023-06-08T17:49:07.000Z","updated":"2025-09-30T03:26:03.811Z","comments":true,"path":"api/articles/BIGDATA/Esper学习之二：事件类型.json","keywords":"XuGuangSheng","cover":"/covers/esper.jpg","content":"<h1 id=\"Esper学习之二：事件类型\"><a href=\"#Esper学习之二：事件类型\" class=\"headerlink\" title=\"Esper学习之二：事件类型\"></a>Esper学习之二：事件类型</h1><p>Esper对事件有特殊的数据结构约定。能处理的事件结构有：POJO，java.util.Map，Object Array，XML</p>\n<p><strong>1.POJO</strong></p>\n<p>       对于POJO，Esper要求对每一个私有属性要有getter方法。Esper允许不必按照JavaBean规定的格式，但是getter方法是必须的。又或者可以在配置文件中配置可访问的方法来代替getter。简单示例如下</p>\n<ol>\n<li><p>public class Person  </p>\n</li>\n<li><p>{  </p>\n</li>\n<li><p>    String name;  </p>\n</li>\n<li><p>    int age;  </p>\n</li>\n<li><p>    public String getName()  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return name;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public int getAge()  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return age;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>}</p>\n</li>\n</ol>\n<p>  </p>\n<p>Esper同样也能支持复杂的数据类型以及嵌套。稍微复杂的Person如下</p>\n<ol>\n<li><p>import java.util.List;  </p>\n</li>\n<li><p>import java.util.Map;  </p>\n</li>\n<li><p>public class Person  </p>\n</li>\n<li><p>{  </p>\n</li>\n<li><p>    String name;  </p>\n</li>\n<li><p>    int age;  </p>\n</li>\n<li><p>    List<Child> children;  </p>\n</li>\n<li><p>    Map&lt;String, Integer&gt; phones;  </p>\n</li>\n<li><p>    Address address;  </p>\n</li>\n<li><p>    public String getName()  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return name;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public int getAge()  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return age;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public List<Child> getChildren()  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return children;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public Map&lt;String, Integer&gt; getPhones()  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return phones;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public Address getAddress()  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return address;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>}  </p>\n</li>\n<li><p>class Child  </p>\n</li>\n<li><p>{  </p>\n</li>\n<li><p>    String name;  </p>\n</li>\n<li><p>    int gender;  </p>\n</li>\n<li><p>}  </p>\n</li>\n<li><p>class Address  </p>\n</li>\n<li><p>{  </p>\n</li>\n<li><p>    String road;  </p>\n</li>\n<li><p>    String street;  </p>\n</li>\n<li><p>    int houseNo;  </p>\n</li>\n<li><p>}</p>\n</li>\n</ol>\n<p>  </p>\n<p>如上所示，Esper能支持包含了集合类型和嵌套类的POJO，示例的EPL语句如下</p>\n<ol>\n<li>&#x2F;&#x2F; 当Person类型的事件中name为luonanqin时，Esper能得到对应的age,children和address  </li>\n<li>select age,children,address from Person where name&#x3D;”luonanqin”</li>\n</ol>\n<p>   </p>\n<p>如果我不想要所有的child，而是想要第二个。并且我想得到家里的电话号码，那么Person需要改动一下</p>\n<ol>\n<li><p>import java.util.List;  </p>\n</li>\n<li><p>import java.util.Map;  </p>\n</li>\n<li><p>public class Person  </p>\n</li>\n<li><p>{  </p>\n</li>\n<li><p>    String name;  </p>\n</li>\n<li><p>    int age;  </p>\n</li>\n<li><p>    List<Child> children;  </p>\n</li>\n<li><p>    Map&lt;String, Integer&gt; phones;  </p>\n</li>\n<li><p>    Address address;  </p>\n</li>\n<li><p>    public String getName()  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return name;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public int getAge()  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return age;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public Child getChildren(int index)  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return children.get(index);  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public int getPhones(String name)  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return phones.get(name);  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public Address getAddress()  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return address;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>}</p>\n</li>\n</ol>\n<p>  </p>\n<p>对应的EPL如下</p>\n<ol start=\"2\">\n<li>select children[1], phones(‘home’), address.road where Person where name&#x3D;”luonanqin”</li>\n</ol>\n<p>  </p>\n<p>Esper支持事件的更新，对此Esper要求提供对应的setter方法。Person需要再有点小该度。示例如下</p>\n<ol>\n<li><p>import java.util.List;  </p>\n</li>\n<li><p>import java.util.Map;  </p>\n</li>\n<li><p>public class Person  </p>\n</li>\n<li><p>{  </p>\n</li>\n<li><p>    String name;  </p>\n</li>\n<li><p>    int age;  </p>\n</li>\n<li><p>    List<Child> children;  </p>\n</li>\n<li><p>    Map&lt;String, Integer&gt; phones;  </p>\n</li>\n<li><p>    Address address;  </p>\n</li>\n<li><p>    public String getName()  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return name;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public int getAge()  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return age;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public Child getChildren(int index)  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return children.get(index);  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public void setPhones(String name, Integer number){  </p>\n</li>\n<li><p>        phones.put(name, number);  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public int getPhones(String name)  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return phones.get(name);  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>    public Address getAddress()  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        return address;  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>}</p>\n</li>\n</ol>\n<p>  </p>\n<p>对应的EPL如下</p>\n<ol>\n<li>&#x2F;&#x2F; 当Person类型的事件中name为luonanqin时，更新家里的电话  </li>\n<li>update Person set phones(‘home’) &#x3D; 123456789 where name&#x3D;”luonanqin”</li>\n</ol>\n<p>  </p>\n<p>Esper对POJO的支持基本上就是上面所说的，另外他还支持实现了多个接口类或者抽象类的POJO，使用方法和普通的POJO没什么区别，这里就不列举了。</p>\n<p><strong>2.Map</strong></p>\n<p>Esper支持原生Java Map结构的事件。相对于POJO来说，Map的结构更利于事件类型的热加载，毕竟不是class，所以不需要重启JVM。所以如果系统对重启比较敏感，建议使用Map来定义事件的结构。Map的结构很简单，主要分为事件定义名和事件属性列表。我们继续拿Person来讲解</p>\n<ol>\n<li><p>import java.util.HashMap;  </p>\n</li>\n<li><p>import java.util.List;  </p>\n</li>\n<li><p>import java.util.Map;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPAdministrator;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPServiceProvider;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPServiceProviderManager;  </p>\n</li>\n<li><p>public class PersonMap  </p>\n</li>\n<li><p>{  </p>\n</li>\n<li><p>    public static void main(String[] args)  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        EPServiceProvider epService &#x3D; EPServiceProviderManager.getDefaultProvider();  </p>\n</li>\n<li><p>        EPAdministrator admin &#x3D; epService.getEPAdministrator();  </p>\n</li>\n<li><p>        Map&lt;String,Object&gt; person &#x3D; new HashMap&lt;String,Object&gt;();  </p>\n</li>\n<li><p>        person.put(“name”, String.class);  </p>\n</li>\n<li><p>        person.put(“age”, int.class);  </p>\n</li>\n<li><p>        person.put(“children”, List.class);  </p>\n</li>\n<li><p>        person.put(“phones”, Map.class);  </p>\n</li>\n<li><p>        admin.getConfiguration().addEventType(“Person”, person);  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>}</p>\n</li>\n</ol>\n<p>  </p>\n<p>如上所示，Map结构的事件需要将属性名作为key，属性的数据类型作为value保存到Map中，然后再通过Esper的接口注册到Esper。其中addEventType的两个参数分别代表事件定义的名称和所定义的结构。</p>\n<p>对应的EPL和POJO的没有区别</p>\n<ol>\n<li>&#x2F;&#x2F; 当Person类型的事件中name为luonanqin时，Esper能得到对应的age,children  </li>\n<li>select age,children from Person where name&#x3D;”luonanqin”</li>\n</ol>\n<p>   </p>\n<p>Map对于嵌套类的定义比较特别。如果嵌套的类是POJO，那就如上面所示。如果嵌套的还是Map，那么定义方式就需要改变。我们为Person加上Address，示例如下</p>\n<ol>\n<li><p>import java.util.HashMap;  </p>\n</li>\n<li><p>import java.util.List;  </p>\n</li>\n<li><p>import java.util.Map;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPAdministrator;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPServiceProvider;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPServiceProviderManager;  </p>\n</li>\n<li><p>public class PersonMap  </p>\n</li>\n<li><p>{  </p>\n</li>\n<li><p>    public static void main(String[] args)  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        EPServiceProvider epService &#x3D; EPServiceProviderManager.getDefaultProvider();  </p>\n</li>\n<li><p>        EPAdministrator admin &#x3D; epService.getEPAdministrator();  </p>\n</li>\n<li><p>        Map&lt;String, Object&gt; address &#x3D; new HashMap&lt;String, Object&gt;();  </p>\n</li>\n<li><p>        address.put(“road”, String.class);  </p>\n</li>\n<li><p>        address.put(“street”, String.class);  </p>\n</li>\n<li><p>        address.put(“houseNo”, int.class);  </p>\n</li>\n<li><p>        Map&lt;String, Object&gt; person &#x3D; new HashMap&lt;String, Object&gt;();  </p>\n</li>\n<li><p>        person.put(“name”, String.class);  </p>\n</li>\n<li><p>        person.put(“age”, int.class);  </p>\n</li>\n<li><p>        person.put(“children”, List.class);  </p>\n</li>\n<li><p>        person.put(“phones”, Map.class);  </p>\n</li>\n<li><p>        person.put(“address”, “Address”);  </p>\n</li>\n<li><p>        admin.getConfiguration().addEventType(“Address”, address);  </p>\n</li>\n<li><p>        admin.getConfiguration().addEventType(“Person”, person);  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>}</p>\n</li>\n</ol>\n<p>  </p>\n<p>如上所示，有两个关键点：</p>\n<p>1.Person在定义Address属性时，map的value不是Address.class，而是Address字符串，而这就代表引擎里的Address对应的Map结构定义</p>\n<p>2.事件定义注册必须是Address先于Person，因为Person用到了Address，而引擎是根据Address注册时用的名字去查找Address定义的，所以如果名字写错，引擎就找不到Address了</p>\n<p>如果Person有多个Address，则以数组方式定义Person的多个Address时，代码又变成下面的样子了</p>\n<ol>\n<li>person.put(“addresses”, “Address[]“);</li>\n</ol>\n<p>  </p>\n<p>另外对于Map，Esper只支持增量更新，也就是说只能增加Map中的属性定义，而不能修改或者删除某个属性（实际上属性增多并不影响其处理性能，所以没有删除在我看来也没什么。至于修改，也只能是先注销再注册了）。我们为Person增加一个gender属性，示例如下</p>\n<ol>\n<li><p>import java.util.Arrays;  </p>\n</li>\n<li><p>import java.util.HashMap;  </p>\n</li>\n<li><p>import java.util.List;  </p>\n</li>\n<li><p>import java.util.Map;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPAdministrator;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPServiceProvider;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPServiceProviderManager;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EventType;  </p>\n</li>\n<li><p>public class PersonMap  </p>\n</li>\n<li><p>{  </p>\n</li>\n<li><p>    public static void main(String[] args)  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        EPServiceProvider epService &#x3D; EPServiceProviderManager.getDefaultProvider();  </p>\n</li>\n<li><p>        EPAdministrator admin &#x3D; epService.getEPAdministrator();  </p>\n</li>\n<li><p>        Map&lt;String, Object&gt; address &#x3D; new HashMap&lt;String, Object&gt;();  </p>\n</li>\n<li><p>        address.put(“road”, String.class);  </p>\n</li>\n<li><p>        address.put(“street”, String.class);  </p>\n</li>\n<li><p>        address.put(“houseNo”, int.class);  </p>\n</li>\n<li><p>        Map&lt;String, Object&gt; person &#x3D; new HashMap&lt;String, Object&gt;();  </p>\n</li>\n<li><p>        person.put(“name”, String.class);  </p>\n</li>\n<li><p>        person.put(“age”, int.class);  </p>\n</li>\n<li><p>        person.put(“children”, List.class);  </p>\n</li>\n<li><p>        person.put(“phones”, Map.class);  </p>\n</li>\n<li><p>        person.put(“address”, “Address”);  </p>\n</li>\n<li><p>        admin.getConfiguration().addEventType(“Address”, address);  </p>\n</li>\n<li><p>        admin.getConfiguration().addEventType(“Person”, person);  </p>\n</li>\n<li><p>        person.put(“gender”, int.class);  </p>\n</li>\n<li><p>        admin.getConfiguration().updateMapEventType(“Person”, person);  </p>\n</li>\n<li><p>        EventType event &#x3D; admin.getConfiguration().getEventType(“Person”);  </p>\n</li>\n<li><p>        System.out.println(“Person props: “ + Arrays.asList(event.getPropertyNames()));  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>}</p>\n</li>\n</ol>\n<p>  </p>\n<p><strong>3.Object Array</strong></p>\n<p>对象数组和Map很像，基本没有差别。只是定义方式不一样，Esper同样也只支持增量更新。这里继续用Person为大家做例子</p>\n<ol>\n<li><p>import java.util.Arrays;  </p>\n</li>\n<li><p>import java.util.Map;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPAdministrator;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPServiceProvider;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EPServiceProviderManager;  </p>\n</li>\n<li><p>import com.espertech.esper.client.EventType;  </p>\n</li>\n<li><p>public class PersonArray  </p>\n</li>\n<li><p>{  </p>\n</li>\n<li><p>    public static void main(String[] args)  </p>\n</li>\n<li><p>    {  </p>\n</li>\n<li><p>        EPServiceProvider epService &#x3D; EPServiceProviderManager.getDefaultProvider();  </p>\n</li>\n<li><p>        EPAdministrator admin &#x3D; epService.getEPAdministrator();  </p>\n</li>\n<li><p>        String[] addressPropNames &#x3D; { “road”, “street”, “houseNo” };  </p>\n</li>\n<li><p>        Object[] addressPropTypes &#x3D; { String.class, String.class, int.class };  </p>\n</li>\n<li><p>        String[] childPropNames &#x3D; { “name”, “age” };  </p>\n</li>\n<li><p>        Object[] childPropTypes &#x3D; { String.class, int.class };  </p>\n</li>\n<li><p>        String[] personPropNames &#x3D; { “name”, “age”, “children”, “phones”, “address” };  </p>\n</li>\n<li><p>        Object[] personPropTypes &#x3D; { String.class, int.class, “Child[]“, Map.class, “Address” };  </p>\n</li>\n<li><p>        admin.getConfiguration().addEventType(“Address”, addressPropNames, addressPropTypes);  </p>\n</li>\n<li><p>        admin.getConfiguration().addEventType(“Child”, childPropNames, childPropTypes);  </p>\n</li>\n<li><p>        admin.getConfiguration().addEventType(“Person”, personPropNames, personPropTypes);  </p>\n</li>\n<li><p>        admin.getConfiguration().updateObjectArrayEventType(“Person”, new String[] { “gender” }, new Object[] { int.class });  </p>\n</li>\n<li><p>        EventType event &#x3D; admin.getConfiguration().getEventType(“Person”);  </p>\n</li>\n<li><p>        System.out.println(“Person props: “ + Arrays.asList(event.getPropertyNames()));  </p>\n</li>\n<li><p>    }  </p>\n</li>\n<li><p>}</p>\n</li>\n</ol>\n<p>  </p>\n<p>上面的例子包含了对象数组这种事件格式的所有特性，我就不多加解释了。</p>\n<p>4.XML</p>\n<p>待续</p>\n","text":"Esper学习之二：事件类型Esper对事件有特殊的数据结构约定。能处理的事件结构有：POJO，java.util.Map，Object Array，XML 1...","permalink":"/post/BIGDATA/Esper学习之二：事件类型","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"String","slug":"String","count":1,"path":"api/categories/String.json"},{"name":"BIGDATA","slug":"String/BIGDATA","count":1,"path":"api/categories/String/BIGDATA.json"}],"tags":[{"name":"class","slug":"class","count":2,"path":"api/tags/class.json"},{"name":"Map","slug":"Map","count":1,"path":"api/tags/Map.json"},{"name":"Person","slug":"Person","count":1,"path":"api/tags/Person.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Esper%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8C%EF%BC%9A%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Esper学习之二：事件类型</span></a></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Esper学习之三：进程模型","uid":"9e7669ec94144638fab3876a099d0e10","slug":"BIGDATA/Esper学习之三：进程模型","date":"2023-06-08T17:49:22.000Z","updated":"2025-09-30T03:26:03.690Z","comments":true,"path":"api/articles/BIGDATA/Esper学习之三：进程模型.json","keywords":"XuGuangSheng","cover":"/covers/esper.jpg","text":"Esper学习之三：进程模型 之前对Esper所能处理的事件结构进行了概述，并结合了例子进行讲解，不清楚的同学请看Esper学习之二：事件类型。今天主要为大家解...","permalink":"/post/BIGDATA/Esper学习之三：进程模型","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"EPL","slug":"EPL","count":2,"path":"api/categories/EPL.json"},{"name":"BIGDATA","slug":"EPL/BIGDATA","count":2,"path":"api/categories/EPL/BIGDATA.json"}],"tags":[{"name":"Esper","slug":"Esper","count":2,"path":"api/tags/Esper.json"},{"name":"length","slug":"length","count":1,"path":"api/tags/length.json"},{"name":"newEvents","slug":"newEvents","count":1,"path":"api/tags/newEvents.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Esper学习之一：Esper介绍","uid":"7959b0a0c2b89085e6f8a032821dbd4d","slug":"BIGDATA/Esper学习之一：Esper介绍","date":"2023-06-08T17:48:32.000Z","updated":"2025-09-30T03:26:03.131Z","comments":true,"path":"api/articles/BIGDATA/Esper学习之一：Esper介绍.json","keywords":"XuGuangSheng","cover":"/covers/esperesper.jpg","text":"Esper学习之一：Esper介绍CEP即Complex Event Process，中文意思就是“复杂事件处理”。听起来好像很复杂，实际上就是基于事件流进行数...","permalink":"/post/BIGDATA/Esper学习之一：Esper介绍","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"apple","slug":"apple","count":1,"path":"api/categories/apple.json"},{"name":"BIGDATA","slug":"apple/BIGDATA","count":1,"path":"api/categories/apple/BIGDATA.json"}],"tags":[{"name":"Esper","slug":"Esper","count":2,"path":"api/tags/Esper.json"},{"name":"esper","slug":"esper","count":2,"path":"api/tags/esper.json"},{"name":"Apple","slug":"Apple","count":2,"path":"api/tags/Apple.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}