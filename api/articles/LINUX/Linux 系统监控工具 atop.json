{"title":"Linux 系统监控工具 atop","uid":"82b3a52976f247e94d00aebe443d97b1","slug":"LINUX/Linux 系统监控工具 atop","date":"2023-12-13T09:25:22.000Z","updated":"2025-09-30T03:26:34.036Z","comments":true,"path":"api/articles/LINUX/Linux 系统监控工具 atop.json","keywords":"XuGuangSheng","cover":"/covers/linux-atop.jpg","content":"<h1 id=\"Linux-系统监控工具-atop\"><a href=\"#Linux-系统监控工具-atop\" class=\"headerlink\" title=\"Linux 系统监控工具 atop\"></a>Linux 系统监控工具 atop</h1><p>系统监控是运维工作中重要的一环，本文以 atop 工具为例来介绍系统的重要监控项。</p>\n<p>atop可以使用yum或apt包管理器进行安装。<a href=\"https://linux.die.net/man/1/atop\">atop man page</a> 中详细说明了 atop 中各监控项含义及atop命令用法。</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/793413/202002/793413-20200217150727683-2068010596.png\"><img src=\"https://img2018.cnblogs.com/blog/793413/202002/793413-20200217150727683-2068010596.png\">\n</a></p>\n<p>如上图所示, atop 的界面分为上半部分的系统监控项和下半部分的进程列表。</p>\n<p>atop 每10s更新一次系统监控项以及在这段时间内状态发生变化的进程，按下A键可以查看全部进程。</p>\n<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程#\"></a>进程<a href=\"#%E8%BF%9B%E7%A8%8B\">#</a></h2><p>第一行PRC显示总体进程状况:</p>\n<ul>\n<li>sys, user 表示 CPU 在内核态和用户态的运行时间比例</li>\n<li><code>#proc</code> 为当前总进程数,<ul>\n<li><code>#trun</code> 表示 running 状态线程数</li>\n<li><code>#tslpi</code> 表示 sleeping interruptible 状态的进线程数</li>\n<li><code>#tslpu</code> 表示 sleeping uninterruptible 状态线程数</li>\n<li><code>#zombie</code> 表示僵尸进程数</li>\n</ul>\n</li>\n<li>clones 表示在监控周期（默认10s）内 clone() 系统调用次数</li>\n</ul>\n<p>linux 中进程有两种 sleep 状态:</p>\n<ul>\n<li>interruptible sleep: 进程接收系统信号，可以被系统信号中断</li>\n<li>uninterruptible sleep: 进程不接收系统信号，不可被系统信号中断，包括kill -9 (SIGKILL 信号)。当一个进程向磁盘读写数据时，为了保证数据的一致性，在得到磁盘回复前，它是不能被其他进程或者中断打断的，这个时候的进程就处于不可中断状态。</li>\n</ul>\n<p>一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中，这种进程称之为僵尸进程。大量僵尸进程可能会占用进程描述符空间导致无法创建进程。</p>\n<p>孤儿进程是容易与僵尸进程混淆的一类进程，孤儿进程是父进程终止的进程，它们会被 init 进程接管并不会产生危害。</p>\n<h2 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU#\"></a>CPU<a href=\"#cpu\">#</a></h2><p>在 atop 中每个 CPU 逻辑核心拥有一个 <code>cpu</code> 行表示自身状态, 最前面的 CPU 行则展示系统总览。</p>\n<ul>\n<li>sys 表示CPU在内核态工作时间比例</li>\n<li>user 表示 CPU 在用户态工作时间比例</li>\n<li>irq 表示 CPU 处理系统中断所消耗的时间比例</li>\n<li>idle 表示 CPU 空闲时间比例</li>\n</ul>\n<p>CPL 行表示 CPU 负载（CPU Load）:</p>\n<ul>\n<li>avg1, avg5, avg15: 过去 1min、5min和 15min 内的平均系统负载</li>\n<li>csw 表示监控周期内上下文切换的次数</li>\n<li>intr 表示监控周期内中断发生的次数</li>\n</ul>\n<p><strong>系统负载</strong></p>\n<p>CPU 负载或称为系统负载是一个容易被误解的监控项，它的定义为内核运行队列中 running 或 uninterruptible sleep 状态的进程的平均数与CPU计算能力的比值。</p>\n<p>系统负载 1.0 说明CPU恰好满载，当系统负载大于1.0时会有进程因为等待CPU而阻塞。在多核系统中，系统负载等于CPU核心数表示恰好满载，如在上图所示双核系统中，load&#x3D;2说明恰好满载。</p>\n<p>上文已经说明，uninterruptible sleep 进程通常是在等待IO, 当网络异常或磁盘故障时会导致大量进程处于 uninterruptible sleep 状态从而导致 Load 急剧上升。</p>\n<p>常见的服务器程序大多数为IO密集型程序，常见的CPU密集型任务包括:</p>\n<ul>\n<li>大规模的排序计算, 如 mysql filesort</li>\n<li>大量的正则表达式匹配</li>\n<li>大量的 Hash Code 计算</li>\n<li>大规模的加解密或压缩解压计算</li>\n</ul>\n<p>当我们发现 CPU 使用率上升时，我们可以优先考虑是否在上述CPU密集型任务。</p>\n<h2 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存#\"></a>内存<a href=\"#%E5%86%85%E5%AD%98\">#</a></h2><p>MEM 行描述内存使用情况:</p>\n<ul>\n<li>tot: 物理内存总量</li>\n<li>free: 空闲内存总量</li>\n<li>cache: 文件缓存用量</li>\n<li>buff: 块设备缓存用量</li>\n<li>slab: 系统内核 slab 内存用量</li>\n<li>dirty: 需要写回磁盘的脏页用量，这部分内存使用已包含在cache中</li>\n</ul>\n<p>这里出现了两个两个缓存: cache 和 buffer:</p>\n<p>cache 是指 page cache， 是在文件系统级别的缓存。用于缓存从文件中读取的数据，下次读取文件时可以从内存中快速获取，不需要进行磁盘IO。</p>\n<p>buffer 是磁盘等块设备的缓存，不经过文件系统直接对磁盘进行读写的数据会缓存在 buffer 中。</p>\n<p>文件需要映射到物理磁盘的块上，这层映射关系由文件系统负责维护。没有文件系统支持的数据读写都会使用 buffer 缓存，比如文件系统元数据的缓存，以及 dd 等工具直接对磁盘进行读写时需要的缓存。</p>\n<p>cache 和 buffer 两个缓存既会被用在读请求中，也会被用在写请求中。</p>\n<p>PAG 行表示页缓存的使用情况:</p>\n<ul>\n<li>scan: 当可用内存不足时扫描的页数，这个值过高说明可用内存不足</li>\n<li>stall: 内核紧急将页加载到内存中的次数，这个值过高说明可用内存不足</li>\n<li>steal: 虚拟机相关指标</li>\n<li>swin: 从 Swap 分区将页加载到内存的次数</li>\n<li>swout: 将内存页写入 Swap 分区的次数</li>\n</ul>\n<p>scan 和 steal 的解释比较难理解，附上 man page 中的原文:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>This line contains the number of scanned pages (‘scan’) due to the fact that free memory drops below a particular threshold and the number times that the kernel tries to reclaim pages due to an urgent need (‘stall’)</p></blockquote>\n<p>SWP 行表示 Swap 分区使用状态:</p>\n<ul>\n<li>tot: Swap 分区总大小</li>\n<li>free: Swap 分区空闲空间大小</li>\n</ul>\n<p>当物理内存不足时，内核会将进程内存中不常用的页逐出内存写入磁盘中的 Swap 分区，当进程需要读取这些页时再将它们从磁盘中加载到内存。</p>\n<h2 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘#\"></a>磁盘<a href=\"#%E7%A3%81%E7%9B%98\">#</a></h2><p>DSK 列描述磁盘使用情况:</p>\n<ul>\n<li>vda: 该列为磁盘设备名，每个设备拥有一行</li>\n<li>busy: 设备处理IO请求的时间占比</li>\n<li>read: 监控周期内读请求数</li>\n<li>write: 监控周期内写请求数</li>\n<li>KiB&#x2F;r: 每次读请求的平均数据量</li>\n<li>KiB&#x2F;w: 每次写请求的平均数据量</li>\n<li>MBr&#x2F;s: 每秒读取的数据量</li>\n<li>MBw&#x2F;s: 每秒写入的数据量</li>\n<li>avq: io 队列的平均长度</li>\n<li>avio: 单次读写请求需要的毫秒数</li>\n</ul>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络#\"></a>网络<a href=\"#%E7%BD%91%E7%BB%9C\">#</a></h2><p>网络层通常包含 transport、network、 eth 和 lo 行， 分别表示传输层、网络层、以太网（数据链路层）和本地回环的监控指标。</p>\n<ul>\n<li>tcpi&#x2F;udpi&#x2F;ipi: 接收的 tcp&#x2F;udp&#x2F;ip 数据包</li>\n<li>tcpo&#x2F;udpo&#x2F;ipo : 发出的 tcp&#x2F;udp&#x2F;ip 数据包</li>\n<li>tcpao: 主动建立的tcp连接数(active open)</li>\n<li>tcppo: 被动建立的tcp连接数(passive open), 即通过 listen() 建立的连接数</li>\n<li>tcprs: tcp 重传次数</li>\n<li>tcpie: 读取时发生错误的次数</li>\n</ul>\n<p>进程列表有多个视图分别展示不同方面的数据:</p>\n<ul>\n<li>默认视图(Generic information): 按G键回到默认视图</li>\n<li>内存视图(Memory information): 按M键进入内存视图，显示进程的内存占用情况</li>\n<li>命令行视图(Command Line information): 按C键进入命令行视图，显示进程启动时详细命令行参数</li>\n<li>调度器视图(Scheduling information): 按S键进入视图，显示线程调度、CPU使用和运行统计</li>\n<li>磁盘视图(Disk information): 按D键进入视图，显示进程的磁盘IO使用情况</li>\n<li>网络视图(Network information): 按N键进入视图，显示进程的网络IO使用情况</li>\n</ul>\n<p>atop 默认展示过去10s内状态发生变化的进程，按下A键可以查看全部进程。</p>\n<h2 id=\"默认视图\"><a href=\"#默认视图\" class=\"headerlink\" title=\"默认视图#\"></a>默认视图<a href=\"#%E9%BB%98%E8%AE%A4%E8%A7%86%E5%9B%BE\">#</a></h2><p>默认视图展示常用的监控项:</p>\n<ul>\n<li>PID: 进程ID</li>\n<li>SYSCPU: 在内核态下使用CPU时间</li>\n<li>USERCPU: 在用户态下使用CPU时间</li>\n<li>VGROW: 过去一个监控周期内进程的虚拟内存空间增长，包括malloc()分配内存、使用共享内存以及free()释放内存造成的空间变化</li>\n<li>RGROW: 过去一个监控周期内进程常驻内存空间(resident memory)增长, 即进程内存空间中驻留在物理内存中未被逐出到SWAP分区的部分。</li>\n<li>RUID, EUID, SUID: 启动进程的UID<ul>\n<li>RUID: 登录时的用户ID</li>\n<li>EUID: Effective Uid。通常EUID&#x3D;RUID, setuid 或 sudo 等指令能以另一个用户身份执行命令，这个被“代理”的用户即为 Effective User。</li>\n</ul>\n</li>\n<li>EXC: 进程退出时的返回码</li>\n<li>THR: 进程中的线程数</li>\n<li>S: 进程状态，与ps命令的进程描述符相同</li>\n</ul>\n<p>简单介绍一下进程状态</p>\n<ul>\n<li>R: Runing</li>\n<li>S: sleeping interruptible 等待某个事件</li>\n<li>D: sleeping non-interruptible 通常在等待IO</li>\n<li>Z: Zombie 僵尸进程</li>\n<li>E: 进程在上个监控周期内退出</li>\n<li>T: TASK_STOPPED 或 TASK_TRACED 状态<ul>\n<li>TASK_STOPPED: 进程收到 SIGSTOP 信号进入暂停状态</li>\n<li>TASK_TRACED: 进程进入暂停状态等待跟踪它的进程，比如进程被 gdb 的断点暂停</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"内存视图\"><a href=\"#内存视图\" class=\"headerlink\" title=\"内存视图#\"></a>内存视图<a href=\"#%E5%86%85%E5%AD%98%E8%A7%86%E5%9B%BE\">#</a></h2><p><a href=\"https://img2018.cnblogs.com/blog/793413/202002/793413-20200217160947546-1072223420.png\"><img src=\"https://img2018.cnblogs.com/blog/793413/202002/793413-20200217160947546-1072223420.png\">\n</a></p>\n<p>按M键可以进入内存视图查看进程的内存使用情况:</p>\n<ul>\n<li>MINFLT: 进程缺页小错误(minor page fault)的次数</li>\n<li>MAJFLT: 进程缺页大错误(major page fault)的次数</li>\n<li>VSIZE: 虚拟内存空间的总大小</li>\n<li>RSIZE: 常驻内存(resident memory)的总大小</li>\n<li>VGROW: 虚拟内存空间在上个监控周期的增长</li>\n<li>RGROW: 虚拟内存空间在上个监控周期的增长</li>\n<li>MEM: 物理内存使用占比</li>\n</ul>\n<p>在 Linux 的内存管理系统中需要读取磁盘才能解决缺页中断称为大错误(Major Page Fault), 不需要读取磁盘可以解决的缺页中断被称为小错误(Minor Page Fault)。</p>\n<p>一般情况下 MINFLT 是因为频繁分配&#x2F;回收大内存块导致的，可以考虑使用内存池优化程序来减少缺页错误; MAJFLT 是由于物理内存不足导致。</p>\n<h2 id=\"调度视图\"><a href=\"#调度视图\" class=\"headerlink\" title=\"调度视图#\"></a>调度视图<a href=\"#%E8%B0%83%E5%BA%A6%E8%A7%86%E5%9B%BE\">#</a></h2><p><a href=\"https://img2018.cnblogs.com/blog/793413/202002/793413-20200217161653293-741653352.png\"><img src=\"https://img2018.cnblogs.com/blog/793413/202002/793413-20200217161653293-741653352.png\">\n</a></p>\n<p>按S键可以进入调度视图（Scheduling View）查看进程运行和CPU情况:</p>\n<ul>\n<li>TRUN: running 状态的线程数</li>\n<li>TSLPI: sleeping interruptible 状态线程数</li>\n<li>TSLPU: 表示 sleeping uninterruptible 状态进程数</li>\n<li>PILI: 调度策略</li>\n<li>PRI,NICE: 优先级，PRI+NICE越低优先级越高</li>\n<li>CPU: CPU 使用时间占比</li>\n</ul>\n<p>除了查看当前的状态外，atop 还可以服务方式运行在后台监控并记录系统状态。</p>\n<p>使用 <code>service atop start</code> 或 <code>systemctl start atop</code> 命令启动atop监控服务。</p>\n<p>atop 默认将数据保存在<code>/var/log/atop</code>目录下，10 分钟采集一次，保留最近28天的数据。上述配置可以在 <code>/etc/atop/atop.daily</code> 文件中进行修改。</p>\n<p>使用 <code>atop -r &lt;filename&gt;</code> 命令读取日志文件。按t键向前翻页，T键向后翻页，b键跳转到指定时间，时间格式为hh:mm。</p>\n","text":"Linux 系统监控工具 atop系统监控是运维工作中重要的一环，本文以 atop 工具为例来介绍系统的重要监控项。 atop可以使用yum或apt包管理器进行...","permalink":"/post/LINUX/Linux 系统监控工具 atop","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"CPU","slug":"CPU","count":5,"path":"api/categories/CPU.json"},{"name":"LINUX","slug":"CPU/LINUX","count":4,"path":"api/categories/CPU/LINUX.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"atop","slug":"atop","count":2,"path":"api/tags/atop.json"},{"name":"img","slug":"img","count":1,"path":"api/tags/img.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Linux-%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7-atop\"><span class=\"toc-text\">Linux 系统监控工具 atop</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">进程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CPU\"><span class=\"toc-text\">CPU</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98\"><span class=\"toc-text\">内存</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A3%81%E7%9B%98\"><span class=\"toc-text\">磁盘</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C\"><span class=\"toc-text\">网络</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E8%A7%86%E5%9B%BE\"><span class=\"toc-text\">默认视图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E8%A7%86%E5%9B%BE\"><span class=\"toc-text\">内存视图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E5%BA%A6%E8%A7%86%E5%9B%BE\"><span class=\"toc-text\">调度视图</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"使用 libfaketime 修改 docker 容器时间","uid":"9c243b726e495059eca1f4eed1c4f935","slug":"OCI/使用 libfaketime 修改 docker 容器时间","date":"2023-12-14T14:07:31.000Z","updated":"2025-09-30T03:26:58.187Z","comments":true,"path":"api/articles/OCI/使用 libfaketime 修改 docker 容器时间.json","keywords":"XuGuangSheng","cover":"/covers/libfaketime-docker.jpg","text":"使用 libfaketime 修改 docker 容器时间容器的时间问题：如果想要直接进入容器，使用date -s修改日期，则会出现一个 1 的错误，而且也不会...","permalink":"/post/OCI/使用 libfaketime 修改 docker 容器时间","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"使用","slug":"使用","count":2,"path":"api/categories/使用.json"},{"name":"OCI","slug":"使用/OCI","count":1,"path":"api/categories/使用/OCI.json"}],"tags":[{"name":"docker","slug":"docker","count":4,"path":"api/tags/docker.json"},{"name":"libfaketime","slug":"libfaketime","count":1,"path":"api/tags/libfaketime.json"},{"name":"cap","slug":"cap","count":1,"path":"api/tags/cap.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"使用prlimit命令不重启进程修改其limits等运行参数","uid":"57ca05a26664334bc519d817eff06219","slug":"LINUX/使用prlimit命令不重启进程修改其limits等运行参数","date":"2023-11-29T14:25:53.000Z","updated":"2025-09-30T03:26:41.483Z","comments":true,"path":"api/articles/LINUX/使用prlimit命令不重启进程修改其limits等运行参数.json","keywords":"XuGuangSheng","cover":"/covers/prlimitlimits.jpg","text":"使用prlimit命令不重启进程修改其limits等运行参数12345678910111213141516171819202122232425262728293...","permalink":"/post/LINUX/使用prlimit命令不重启进程修改其limits等运行参数","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"使用","slug":"使用","count":2,"path":"api/categories/使用.json"},{"name":"LINUX","slug":"使用/LINUX","count":1,"path":"api/categories/使用/LINUX.json"}],"tags":[{"name":"prlimit","slug":"prlimit","count":1,"path":"api/tags/prlimit.json"},{"name":"命令不重启进程修改其","slug":"命令不重启进程修改其","count":1,"path":"api/tags/命令不重启进程修改其.json"},{"name":"limits","slug":"limits","count":1,"path":"api/tags/limits.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}