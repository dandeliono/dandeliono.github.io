{"title":"strace 常用操作","uid":"a9faca4b916382c99b92d1b36024956a","slug":"LINUX/strace 常用操作","date":"2022-12-07T00:21:02.000Z","updated":"2025-09-30T03:26:38.852Z","comments":true,"path":"api/articles/LINUX/strace 常用操作.json","keywords":"XuGuangSheng","cover":"/covers/strace.jpg","content":"<h1 id=\"strace-常用操作\"><a href=\"#strace-常用操作\" class=\"headerlink\" title=\"strace 常用操作\"></a>strace 常用操作</h1><p>2019-03-30</p>\n<h2 id=\"前言¶\"><a href=\"#前言¶\" class=\"headerlink\" title=\"前言¶\"></a>前言<a href=\"#hidid1\" title=\"Permalink to this headline\">¶</a></h2><p><a href=\"http://man7.org/linux/man-pages/man1/strace.1.html\">strace</a> 可以用来查看&#x2F;记录程序运行过程中调用的 <a href=\"http://man7.org/linux/man-pages/man2/syscalls.2.html\">系统调用</a> 以及接收到的进程信号（signal）， 对于我们日常 debug 疑难杂症非常的有帮助，是一个非常好的 debug 工具。本文简单记录一下 strace 的常用功能和操作。</p>\n<h2 id=\"输出的含义¶\"><a href=\"#输出的含义¶\" class=\"headerlink\" title=\"输出的含义¶\"></a>输出的含义<a href=\"#hidid2\" title=\"Permalink to this headline\">¶</a></h2><p>我们通过一个简单的命令来查看 strace 程序的典型输出：</p>\n<p>$ strace ls &#x2F;tmp&#x2F;trace<br>execve(“&#x2F;bin&#x2F;ls”, [“ls”, “&#x2F;tmp&#x2F;trace”], [&#x2F;* 41 vars *&#x2F;]) = 0<br>brk(0)                                  = 0x11af000<br>mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f0738c16000<br>access(“&#x2F;etc&#x2F;ld.so.preload”, R_OK)      = -1 ENOENT (No such file or directory)<br>open(“&#x2F;etc&#x2F;ld.so.cache”, O_RDONLY)      = 3<br>fstat(3, {st_mode=S_IFREG|0644, st_size=35759, …}) = 0<br>mmap(NULL, 35759, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f0738c0a000<br>close(3)                                = 0<br>open(“&#x2F;lib64&#x2F;libselinux.so.1”, O_RDONLY) = 3<br>read(3, “\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0&gt;\\0\\1\\0\\0\\0PX\\0\\0\\0\\0\\0\\0”…, 832) = 832<br>fstat(3, {st_mode=S_IFREG|0755, st_size=122040, …}) = 0<br>….<br>fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), …}) = 0<br>mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb97a060000<br>write(1, “test_dir  test.txt\\n”, 19test_dir  test.txt<br>)    = 19<br>close(1)                                = 0<br>munmap(0x7fb97a060000, 4096)            = 0<br>close(2)                                = 0<br>exit_group(0)                           = ?<br>+++ exited with 0 +++</p>\n<p>比如下面的这个输出:</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execve(<span class=\"string\">&quot;/bin/ls&quot;</span>, <span class=\"string\">\\[&quot;ls&quot;,</span> <span class=\"string\">&quot;/tmp/trace&quot;</span><span class=\"string\">\\],</span> <span class=\"string\">\\[/\\*</span> <span class=\"number\">41</span> vars <span class=\"string\">\\*/\\])</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>的含义如下：</p>\n<ul>\n<li>execve: 系统调用的名称。</li>\n<li>(“&#x2F;bin&#x2F;ls”, [“ls”, “&#x2F;tmp&#x2F;trace”], [&#x2F;* 41 vars *&#x2F;]): 这个括号里是系统调用的参数。</li>\n<li>= 0 : 这个 0 是系统调用的返回值，不一定是数字看具体的系统调用返回啥结果就是啥值。</li>\n</ul>\n<p>上面有些系统调用的返回值比较特殊，比如:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">access</span><span class=\"params\">(<span class=\"string\">&quot;/etc/ld.so.preload&quot;</span>, R\\_OK)</span></span>      = -<span class=\"number\">1</span> ENOENT (No such file or directory)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>后面这个 ENOENT (No such file or directory) 中的 ENOENT 是错误码， (No such file or directory) 是错误码的解释。</p>\n<p>上面是系统调用相关的输出格式和含义，下面再看一个进程信号(signal)的输出格式：</p>\n<p>$ strace -p 15718<br>Process 15718 attached<br>select(1, [0], NULL, NULL, NULL)        = ? ERESTARTNOHAND (To be restarted if no handler)<br>— SIGTERM {si_signo=SIGTERM, si_code=SI_USER, si_pid=15757, si_uid=500} —<br>+++ killed by SIGTERM +++</p>\n<p>其中:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\--- SIGTERM &#123;si\\<span class=\"attribute\">_signo</span>=SIGTERM, si\\<span class=\"attribute\">_code</span>=SI\\_USER, si\\<span class=\"attribute\">_pid</span>=15757, si\\<span class=\"attribute\">_uid</span>=500&#125; ---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这一句就是进程接收到的具体 signal 的信息。</p>\n<h2 id=\"常用命令行参数¶\"><a href=\"#常用命令行参数¶\" class=\"headerlink\" title=\"常用命令行参数¶\"></a>常用命令行参数<a href=\"#hidid3\" title=\"Permalink to this headline\">¶</a></h2><p>常用的参数组合:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strace -f -s 1024 -tt -T -yy -p <span class=\"tag\">&lt;<span class=\"name\">pid</span>&gt;</span></span><br><span class=\"line\">strace -f -s 1024 -tt -T -yy -p <span class=\"tag\">&lt;<span class=\"name\">pid</span>&gt;</span> -o <span class=\"tag\">&lt;<span class=\"name\">filename</span>&gt;</span></span><br><span class=\"line\">strace -c -p <span class=\"tag\">&lt;<span class=\"name\">pid</span>&gt;</span></span><br><span class=\"line\">strace -f -s 1024 -tt -T -yy -C -p <span class=\"tag\">&lt;<span class=\"name\">pid</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>-p <pid>: 附加到进程中，记录某个进程的系统调用和进程信号信息。多个 -p <pid> 可以实现同时追踪多个进程。</p>\n</li>\n<li><p>-f: 同时追踪子进程的系统调用情况（如果是多线程程序的话，会同时追踪所有线程）。如果不加 -f 参数的话默认只追踪指定的单个进程。</p>\n</li>\n<li><p>-o <filename>: 把输出结果保存到文件中（默认是输出到标准错误）。</p>\n</li>\n<li><p>-ff: 与 -o <filename> 一起使用，会把每个 pid (进程 pid 或线程 id) 的 strace 数据保存到 <filename>.<pid> 的文件中。</p>\n</li>\n<li><p>-e <expr>: 过滤事件，只输出符合规则的事件，可以用来指定只看某些系统调用的情况，比如： -e open,read 。 或者不看某些系统调用： -e ‘!open,read’ ，更强大的过滤功能可以查看 <a href=\"http://man7.org/linux/man-pages/man1/strace.1.html\">strace(1)</a> 。</p>\n</li>\n<li><p>-s <size>: 指定字符串数据的大小，默认 32。可以通过 -s 来显示更详细的信息或精简信息（比如很多系统调用的参数的值会被截断，可以通过 -s 配置更大的 size 来查看更详细的参数值）。</p>\n</li>\n<li><p>-tt: 显示系统调用是在哪个时刻调用的，包含微秒（ -t 参数一样的效果就是时间不包含微秒）:</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ strace -<span class=\"keyword\">e</span> <span class=\"keyword\">open</span>,<span class=\"keyword\">read</span> -s 2 -tt <span class=\"keyword\">ls</span></span><br><span class=\"line\">14:32:18.877470 <span class=\"keyword\">read</span>(3, <span class=\"string\">&quot;\\\\177E&quot;</span>..., 832) = 832</span><br><span class=\"line\">14:32:18.878249 <span class=\"keyword\">read</span>(3, <span class=\"string\">&quot;\\\\177E&quot;</span>..., 832) = 832</span><br><span class=\"line\">14:32:18.878867 <span class=\"keyword\">read</span>(3, <span class=\"string\">&quot;\\\\177E&quot;</span>..., 832) = 832</span><br><span class=\"line\">14:32:18.879386 <span class=\"keyword\">read</span>(3, <span class=\"string\">&quot;\\\\177E&quot;</span>..., 832) = 832</span><br><span class=\"line\">14:32:18.879871 <span class=\"keyword\">read</span>(3, <span class=\"string\">&quot;\\\\177E&quot;</span>..., 832) = 832</span><br><span class=\"line\">14:32:18.880923 <span class=\"keyword\">read</span>(3, <span class=\"string\">&quot;no&quot;</span>..., 1024)  = 420</span><br><span class=\"line\">14:32:18.881255 <span class=\"keyword\">read</span>(3, <span class=\"string\">&quot;&quot;</span>, 1024)       = 0</span><br><span class=\"line\"></span><br><span class=\"line\">上面的第一列时间信息即为 -tt 的效果。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>-T: 显示执行系统调用所花费的时间，单位是秒</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ strace -e <span class=\"built_in\">read</span> -s 2 -T <span class=\"built_in\">pwd</span></span><br><span class=\"line\"><span class=\"built_in\">read</span>(3, <span class=\"string\">&quot;\\\\177E&quot;</span>..., 832)                = 832 &lt;0.000012&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">上面行末的 &lt;0.000012&gt; 即为 -T 的效果。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>-y: 输出文件描述符所对应的文件路径</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ strace -e read -s <span class=\"number\">10</span>  cat test<span class=\"selector-class\">.txt</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">read</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"string\">&quot;\\\\177ELF\\\\2\\\\1\\\\1\\\\3\\\\0\\\\0&quot;</span>..., <span class=\"number\">832</span>)</span></span>  = <span class=\"number\">832</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">read</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"string\">&quot;hello\\\\n&quot;</span>, <span class=\"number\">131072</span>)</span></span>              = <span class=\"number\">6</span></span><br><span class=\"line\">hello</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">read</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"number\">131072</span>)</span></span>                     = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ strace -e read -s <span class=\"number\">10</span> -y  cat test<span class=\"selector-class\">.txt</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">read</span><span class=\"params\">(<span class=\"number\">3</span>&lt;/lib/x86\\_64-linux-gnu/libc-<span class=\"number\">2.27</span>.so&gt;, <span class=\"string\">&quot;\\\\177ELF\\\\2\\\\1\\\\1\\\\3\\\\0\\\\0&quot;</span>..., <span class=\"number\">832</span>)</span></span> = <span class=\"number\">832</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">read</span><span class=\"params\">(<span class=\"number\">3</span>&lt;/path/to/test.txt&gt;, <span class=\"string\">&quot;hello\\\\n&quot;</span>, <span class=\"number\">131072</span>)</span></span> = <span class=\"number\">6</span></span><br><span class=\"line\">hello</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">read</span><span class=\"params\">(<span class=\"number\">3</span>&lt;/path/to/test.txt&gt;, <span class=\"string\">&quot;&quot;</span>, <span class=\"number\">131072</span>)</span></span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">可以看到加了 -y 后文件描述符后面会跟它所对应的文件的路径</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>-yy: 输出文件描述更详细的信息，比如 socket 文件描述符输出所对应的协议信息。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ strace -e connect -s <span class=\"number\">3</span>  nc <span class=\"selector-attr\">[baidu.com]</span>(http:<span class=\"comment\">//baidu.com/) 80</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">connect</span><span class=\"params\">(<span class=\"number\">3</span>, &#123;sa\\_family=AF\\_INET, sin\\_port=htons(<span class=\"number\">53</span>)</span></span>, sin\\_addr=inet\\<span class=\"built_in\">_addr</span>(<span class=\"string\">&quot;127.0.0.53&quot;</span>)&#125;, <span class=\"number\">16</span>) = <span class=\"number\">0</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">$ strace -e connect -s <span class=\"number\">3</span> -y  nc <span class=\"selector-attr\">[baidu.com]</span>(http:<span class=\"comment\">//baidu.com/) 80</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">connect</span><span class=\"params\">(<span class=\"number\">3</span>&lt;socket:\\[<span class=\"number\">22180</span>\\]&gt;, &#123;sa\\_family=AF\\_INET, sin\\_port=htons(<span class=\"number\">53</span>)</span></span>, sin\\_addr=inet\\<span class=\"built_in\">_addr</span>(<span class=\"string\">&quot;127.0.0.53&quot;</span>)&#125;, <span class=\"number\">16</span>) = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ strace -e connect -s <span class=\"number\">3</span> -yy  nc <span class=\"selector-attr\">[baidu.com]</span>(http:<span class=\"comment\">//baidu.com/) 80</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">connect</span><span class=\"params\">(<span class=\"number\">3</span>&lt;UDP:\\[<span class=\"number\">22202</span>\\]&gt;, &#123;sa\\_family=AF\\_INET, sin\\_port=htons(<span class=\"number\">53</span>)</span></span>, sin\\_addr=inet\\<span class=\"built_in\">_addr</span>(<span class=\"string\">&quot;127.0.0.53&quot;</span>)&#125;, <span class=\"number\">16</span>) = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">可以看到 -yy 会显示上面的 UDP 这个协议信息。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>-c: 统计系统调用的次数、种类以及错误信息，会隐藏详细的追踪信息（前面的 -e 过滤参数也可以用于这个）:</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ strace -c cat test.txt</span><br><span class=\"line\">hello</span><br><span class=\"line\">% time     seconds  usecs/call     calls    errors syscall</span><br><span class=\"line\">------ ----------- ----------- --------- --------- ----------------</span><br><span class=\"line\"> <span class=\"number\">18</span>.<span class=\"number\">45</span>    <span class=\"number\">0.000019</span>           <span class=\"number\">3</span>         <span class=\"number\">7</span>           mmap</span><br><span class=\"line\"> <span class=\"number\">18</span>.<span class=\"number\">45</span>    <span class=\"number\">0.000019</span>           <span class=\"number\">5</span>         <span class=\"number\">4</span>           mprotect</span><br><span class=\"line\"> <span class=\"number\">17</span>.<span class=\"number\">48</span>    <span class=\"number\">0.000018</span>           <span class=\"number\">9</span>         <span class=\"number\">2</span>           munmap</span><br><span class=\"line\"> <span class=\"number\">13</span>.<span class=\"number\">59</span>    <span class=\"number\">0.000014</span>           <span class=\"number\">4</span>         <span class=\"number\">4</span>           openat</span><br><span class=\"line\">  <span class=\"number\">9</span>.<span class=\"number\">71</span>    <span class=\"number\">0.000010</span>          <span class=\"number\">10</span>         <span class=\"number\">1</span>           write</span><br><span class=\"line\">  <span class=\"number\">6</span>.<span class=\"number\">80</span>    <span class=\"number\">0.000007</span>           <span class=\"number\">2</span>         <span class=\"number\">3</span>           read</span><br><span class=\"line\">  <span class=\"number\">5</span>.<span class=\"number\">83</span>    <span class=\"number\">0.000006</span>           <span class=\"number\">2</span>         <span class=\"number\">3</span>         <span class=\"number\">3</span> access</span><br><span class=\"line\">  <span class=\"number\">3</span>.<span class=\"number\">88</span>    <span class=\"number\">0.000004</span>           <span class=\"number\">1</span>         <span class=\"number\">5</span>           fstat</span><br><span class=\"line\">  <span class=\"number\">2</span>.<span class=\"number\">91</span>    <span class=\"number\">0.000003</span>           <span class=\"number\">1</span>         <span class=\"number\">6</span>           close</span><br><span class=\"line\">  <span class=\"number\">1</span>.<span class=\"number\">94</span>    <span class=\"number\">0.000002</span>           <span class=\"number\">1</span>         <span class=\"number\">3</span>           brk</span><br><span class=\"line\">  <span class=\"number\">0</span>.<span class=\"number\">97</span>    <span class=\"number\">0.000001</span>           <span class=\"number\">1</span>         <span class=\"number\">1</span>           execve</span><br><span class=\"line\">  <span class=\"number\">0</span>.<span class=\"number\">00</span>    <span class=\"number\">0.000000</span>           <span class=\"number\">0</span>         <span class=\"number\">1</span>           arch\\_prctl</span><br><span class=\"line\">  <span class=\"number\">0</span>.<span class=\"number\">00</span>    <span class=\"number\">0.000000</span>           <span class=\"number\">0</span>         <span class=\"number\">1</span>           fadvise64</span><br><span class=\"line\">------ ----------- ----------- --------- --------- ----------------</span><br><span class=\"line\"><span class=\"number\">100</span>.<span class=\"number\">00</span>    <span class=\"number\">0.000103</span>                    <span class=\"number\">41</span>         <span class=\"number\">3</span> total</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>-C: 跟 -c 类似，只是增加了会输出详细的追踪信息</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">$ strace</span> <span class=\"literal\">-</span><span class=\"comment\">e read</span> <span class=\"literal\">-</span><span class=\"comment\">C</span> <span class=\"literal\">-</span><span class=\"comment\">s 3 cat test</span><span class=\"string\">.</span><span class=\"comment\">txt</span></span><br><span class=\"line\"><span class=\"comment\">read(3</span><span class=\"string\">,</span> <span class=\"comment\">&quot;\\\\177EL&quot;</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">,</span> <span class=\"comment\">832)               = 832</span></span><br><span class=\"line\"><span class=\"comment\">read(3</span><span class=\"string\">,</span> <span class=\"comment\">&quot;hel&quot;</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">,</span> <span class=\"comment\">131072)               = 6</span></span><br><span class=\"line\"><span class=\"comment\">hello</span></span><br><span class=\"line\"><span class=\"comment\">read(3</span><span class=\"string\">,</span> <span class=\"comment\">&quot;&quot;</span><span class=\"string\">,</span> <span class=\"comment\">131072)                     = 0</span></span><br><span class=\"line\"><span class=\"literal\">+++</span> <span class=\"comment\">exited with 0</span> <span class=\"literal\">+++</span></span><br><span class=\"line\"><span class=\"comment\">% time     seconds  usecs/call     calls    errors syscall</span></span><br><span class=\"line\"><span class=\"literal\">------</span> <span class=\"literal\">-----------</span> <span class=\"literal\">-----------</span> <span class=\"literal\">---------</span> <span class=\"literal\">---------</span> <span class=\"literal\">----------------</span></span><br><span class=\"line\">  <span class=\"comment\">0</span><span class=\"string\">.</span><span class=\"comment\">00    0</span><span class=\"string\">.</span><span class=\"comment\">000000           0         3           read</span></span><br><span class=\"line\"><span class=\"literal\">------</span> <span class=\"literal\">-----------</span> <span class=\"literal\">-----------</span> <span class=\"literal\">---------</span> <span class=\"literal\">---------</span> <span class=\"literal\">----------------</span></span><br><span class=\"line\"><span class=\"comment\">100</span><span class=\"string\">.</span><span class=\"comment\">00    0</span><span class=\"string\">.</span><span class=\"comment\">000000                     3           total</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>-v: 显示系统调用时传入的参数变量的具体内容，而不是默认显示为 &#x2F;* 8 vars *&#x2F;</p>\n</li>\n</ul>\n<h3 id=\"常用过滤表达式¶\"><a href=\"#常用过滤表达式¶\" class=\"headerlink\" title=\"常用过滤表达式¶\"></a>常用过滤表达式<a href=\"#hidid4\" title=\"Permalink to this headline\">¶</a></h3><p>-e <expr> 这个参数可以用来指定需要 trace 哪些事件，格式如下:</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\[qualifier=\\]\\[!\\]\\[?\\]value1\\[,\\[?\\]value2\\]...</span><br><span class=\"line\"></span><br><span class=\"line\">其中 qualifier 的值是 trace, abbrev, verbose, raw,</span><br><span class=\"line\">signal, read, write, fault, inject, or kvm 。默认是 trace</span><br><span class=\"line\"></span><br><span class=\"line\">value 就是各种过滤条件了。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-e trace&#x3D;<set> : <set> 是系统调用名称（默认是 trace&#x3D;all ），比如 trace&#x3D;open,close,read,write</li>\n<li>-e trace&#x3D;&#x2F;<regex>: 可以通过这种方式来用正则表达式指定系统调用名称，支持的正则语法可以参考 <a href=\"http://man7.org/linux/man-pages/man7/regex.7.html\">regex(7)</a> 。</li>\n<li>-e trace&#x3D;%file: 文件相关系统调用。</li>\n<li>-e trace&#x3D;%desc: 文件描述符相关。</li>\n<li>-e trace&#x3D;%process: 进程管理相关系统调用。</li>\n<li>-e trace&#x3D;%network: 网络相关。</li>\n<li>-e trace&#x3D;%signal: 信号相关。</li>\n<li>-e trace&#x3D;%ipc: IPC 相关。</li>\n<li>-e trace&#x3D;%memory: 内存 mapping 相关。</li>\n<li>-e signal&#x3D;<set>: <set> 是进程信号的名称（默认是 signal&#x3D;all ），比如 -e signal&#x3D;SIGTERM</li>\n<li>-e read&#x3D;<set>: 追踪指定 fd 上的数据并打印 hex 和 ascii 格式的数据， <set> 是 fd 比如:read&#x3D;3,5</li>\n</ul>\n<h2 id=\"总结¶\"><a href=\"#总结¶\" class=\"headerlink\" title=\"总结¶\"></a>总结<a href=\"#hidid6\" title=\"Permalink to this headline\">¶</a></h2><p>更多关于 strace 的信息可以从参考资料的 strace(1) 中获取，如果对输出中系统调用不了解的话可以参考参考资料中的 syscalls(2) 中的信息，同时也别忘了搜索引擎是你的好朋友，有啥不明白的记得 Google 一下。</p>\n<hr>\n","text":"strace 常用操作2019-03-30 前言¶strace 可以用来查看/记录程序运行过程中调用的 系统调用 以及接收到的进程信号（signal）， 对于我...","permalink":"/post/LINUX/strace 常用操作","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"trace","slug":"trace","count":1,"path":"api/categories/trace.json"},{"name":"LINUX","slug":"trace/LINUX","count":1,"path":"api/categories/trace/LINUX.json"}],"tags":[{"name":"strace","slug":"strace","count":2,"path":"api/tags/strace.json"},{"name":"man","slug":"man","count":1,"path":"api/tags/man.json"},{"name":"signal","slug":"signal","count":1,"path":"api/tags/signal.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#strace-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">strace 常用操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80%C2%B6\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E7%9A%84%E5%90%AB%E4%B9%89%C2%B6\"><span class=\"toc-text\">输出的含义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%C2%B6\"><span class=\"toc-text\">常用命令行参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E8%BF%87%E6%BB%A4%E8%A1%A8%E8%BE%BE%E5%BC%8F%C2%B6\"><span class=\"toc-text\">常用过滤表达式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%C2%B6\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Too many open files的四种解决办法","uid":"bf7b35be44144689d93f501402e9fb0d","slug":"LINUX/Too many open files的四种解决办法","date":"2022-12-07T00:21:50.000Z","updated":"2025-09-30T03:26:36.216Z","comments":true,"path":"api/articles/LINUX/Too many open files的四种解决办法.json","keywords":"XuGuangSheng","cover":"/covers/too-many-open-files.jpg","text":"Too many open files的四种解决办法【摘要】 Too many open files有四种可能:一 单个进程打开文件句柄数过多,二 操作系统打开...","permalink":"/post/LINUX/Too many open files的四种解决办法","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"inotify","slug":"inotify","count":1,"path":"api/categories/inotify.json"},{"name":"LINUX","slug":"inotify/LINUX","count":1,"path":"api/categories/inotify/LINUX.json"}],"tags":[{"name":"nofile","slug":"nofile","count":1,"path":"api/tags/nofile.json"},{"name":"openstack","slug":"openstack","count":1,"path":"api/tags/openstack.json"},{"name":"max","slug":"max","count":1,"path":"api/tags/max.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"文件描述符(fd)泄漏排查一篇就够了_写代码的小提的博客-CSDN博客","uid":"fb884516282f9be59505de88d795cde5","slug":"LINUX/文件描述符(fd)泄漏排查一篇就够了_写代码的小提的博客-CSDN博客","date":"2022-12-01T11:42:30.000Z","updated":"2025-09-30T03:26:43.405Z","comments":true,"path":"api/articles/LINUX/文件描述符(fd)泄漏排查一篇就够了_写代码的小提的博客-CSDN博客.json","keywords":"XuGuangSheng","cover":"/covers/fd-csdn.jpg","text":"文件描述符(fd)泄漏排查一篇就够了_写代码的小提的博客-CSDN博客生产多次遇到文件描述符（fd）泄露相关的问题， 文件描述符泄漏一般引起的现象是文件句柄数（...","permalink":"/post/LINUX/文件描述符(fd)泄漏排查一篇就够了_写代码的小提的博客-CSDN博客","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"tcp","slug":"tcp","count":1,"path":"api/categories/tcp.json"},{"name":"LINUX","slug":"tcp/LINUX","count":1,"path":"api/categories/tcp/LINUX.json"}],"tags":[{"name":"strace","slug":"strace","count":2,"path":"api/tags/strace.json"},{"name":"lsof","slug":"lsof","count":1,"path":"api/tags/lsof.json"},{"name":"alloc","slug":"alloc","count":1,"path":"api/tags/alloc.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}