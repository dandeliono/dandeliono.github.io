{"title":"shell 语言","uid":"443ea60f9d53e9e33f4d61c5af59c5dc","slug":"LINUX/shell 语言","date":"2022-01-26T18:01:10.000Z","updated":"2025-09-30T03:26:37.714Z","comments":true,"path":"api/articles/LINUX/shell 语言.json","keywords":"XuGuangSheng","cover":"/covers/shell.jpg","content":"<h1 id=\"shell-语言\"><a href=\"#shell-语言\" class=\"headerlink\" title=\"shell 语言\"></a>shell 语言</h1><ul>\n<li><a href=\"#1-%E7%AE%80%E4%BB%8B\">1. 简介</a><ul>\n<li><a href=\"#11-%E4%BB%80%E4%B9%88%E6%98%AF-shell\">1.1. 什么是 shell</a></li>\n<li><a href=\"#12-%E4%BB%80%E4%B9%88%E6%98%AF-shell-%E8%84%9A%E6%9C%AC\">1.2. 什么是 shell 脚本</a></li>\n<li><a href=\"#13-shell-%E7%8E%AF%E5%A2%83\">1.3. Shell 环境</a></li>\n<li><a href=\"#14-%E6%A8%A1%E5%BC%8F\">1.4. 模式</a></li>\n</ul>\n</li>\n<li><a href=\"#2-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\">2. 基本语法</a><ul>\n<li><a href=\"#21-%E8%A7%A3%E9%87%8A%E5%99%A8\">2.1. 解释器</a></li>\n<li><a href=\"#22-%E6%B3%A8%E9%87%8A\">2.2. 注释</a></li>\n<li><a href=\"#23-echo\">2.3. echo</a></li>\n<li><a href=\"#24-printf\">2.4. printf</a></li>\n</ul>\n</li>\n<li><a href=\"#3-%E5%8F%98%E9%87%8F\">3. 变量</a><ul>\n<li><a href=\"#31-%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E5%8E%9F%E5%88%99\">3.1. 变量命名原则</a></li>\n<li><a href=\"#32-%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F\">3.2. 声明变量</a></li>\n<li><a href=\"#33-%E5%8F%AA%E8%AF%BB%E5%8F%98%E9%87%8F\">3.3. 只读变量</a></li>\n<li><a href=\"#34-%E5%88%A0%E9%99%A4%E5%8F%98%E9%87%8F\">3.4. 删除变量</a></li>\n<li><a href=\"#35-%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B\">3.5. 变量类型</a></li>\n<li><a href=\"#36-%E5%8F%98%E9%87%8F%E7%A4%BA%E4%BE%8B%E6%BA%90%E7%A0%81\">3.6. 变量示例源码</a></li>\n</ul>\n</li>\n<li><a href=\"#4-%E5%AD%97%E7%AC%A6%E4%B8%B2\">4. 字符串</a><ul>\n<li><a href=\"#41-%E5%8D%95%E5%BC%95%E5%8F%B7%E5%92%8C%E5%8F%8C%E5%BC%95%E5%8F%B7\">4.1. 单引号和双引号</a></li>\n<li><a href=\"#42-%E6%8B%BC%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2\">4.2. 拼接字符串</a></li>\n<li><a href=\"#43-%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6\">4.3. 获取字符串长度</a></li>\n<li><a href=\"#44-%E6%88%AA%E5%8F%96%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2\">4.4. 截取子字符串</a></li>\n<li><a href=\"#45-%E6%9F%A5%E6%89%BE%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2\">4.5. 查找子字符串</a></li>\n<li><a href=\"#46-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%A4%BA%E4%BE%8B%E6%BA%90%E7%A0%81\">4.6. 字符串示例源码</a></li>\n</ul>\n</li>\n<li><a href=\"#5-%E6%95%B0%E7%BB%84\">5. 数组</a><ul>\n<li><a href=\"#51-%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84\">5.1. 创建数组</a></li>\n<li><a href=\"#52-%E8%AE%BF%E9%97%AE%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0\">5.2. 访问数组元素</a></li>\n<li><a href=\"#53-%E8%AE%BF%E9%97%AE%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6\">5.3. 访问数组长度</a></li>\n<li><a href=\"#54-%E5%90%91%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0\">5.4. 向数组中添加元素</a></li>\n<li><a href=\"#55-%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0\">5.5. 从数组中删除元素</a></li>\n<li><a href=\"#56-%E6%95%B0%E7%BB%84%E7%A4%BA%E4%BE%8B%E6%BA%90%E7%A0%81\">5.6. 数组示例源码</a></li>\n</ul>\n</li>\n<li><a href=\"#6-%E8%BF%90%E7%AE%97%E7%AC%A6\">6. 运算符</a><ul>\n<li><a href=\"#61-%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\">6.1. 算术运算符</a></li>\n<li><a href=\"#62-%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\">6.2. 关系运算符</a></li>\n<li><a href=\"#63-%E5%B8%83%E5%B0%94%E8%BF%90%E7%AE%97%E7%AC%A6\">6.3. 布尔运算符</a></li>\n<li><a href=\"#64-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\">6.4. 逻辑运算符</a></li>\n<li><a href=\"#65-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%90%E7%AE%97%E7%AC%A6\">6.5. 字符串运算符</a></li>\n<li><a href=\"#66-%E6%96%87%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%BF%90%E7%AE%97%E7%AC%A6\">6.6. 文件测试运算符</a></li>\n</ul>\n</li>\n<li><a href=\"#7-%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\">7. 控制语句</a><ul>\n<li><a href=\"#71-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5\">7.1. 条件语句</a></li>\n<li><a href=\"#72-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5\">7.2. 循环语句</a></li>\n</ul>\n</li>\n<li><a href=\"#8-%E5%87%BD%E6%95%B0\">8. 函数</a><ul>\n<li><a href=\"#81-%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0\">8.1. 位置参数</a></li>\n<li><a href=\"#82-%E5%87%BD%E6%95%B0%E5%A4%84%E7%90%86%E5%8F%82%E6%95%B0\">8.2. 函数处理参数</a></li>\n</ul>\n</li>\n<li><a href=\"#9-shell-%E6%89%A9%E5%B1%95\">9. Shell 扩展</a></li>\n<li><a href=\"#10-%E6%B5%81%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91\">10. 流和重定向</a><ul>\n<li><a href=\"#101-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81\">10.1. 输入、输出流</a></li>\n<li><a href=\"#102-%E9%87%8D%E5%AE%9A%E5%90%91\">10.2. 重定向</a></li>\n<li><a href=\"#103-devnull-%E6%96%87%E4%BB%B6\">10.3. <code>/dev/null</code> 文件</a></li>\n</ul>\n</li>\n<li><a href=\"#11-debug\">11. Debug</a></li>\n<li><a href=\"#12-%E6%9B%B4%E5%A4%9A%E5%86%85%E5%AE%B9\">12. 更多内容</a></li>\n</ul>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><h3 id=\"1-1-什么是-shell\"><a href=\"#1-1-什么是-shell\" class=\"headerlink\" title=\"1.1. 什么是 shell\"></a>1.1. 什么是 shell</h3><ul>\n<li>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。</li>\n<li>Shell 既是一种命令语言，又是一种程序设计语言。</li>\n<li>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问 Linux 内核的服务。</li>\n</ul>\n<p>Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p>\n<h3 id=\"1-2-什么是-shell-脚本\"><a href=\"#1-2-什么是-shell-脚本\" class=\"headerlink\" title=\"1.2. 什么是 shell 脚本\"></a>1.2. 什么是 shell 脚本</h3><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序，一般文件后缀为 <code>.sh</code>。</p>\n<p>业界所说的 shell 通常都是指 shell 脚本，但 shell 和 shell script 是两个不同的概念。</p>\n<h3 id=\"1-3-Shell-环境\"><a href=\"#1-3-Shell-环境\" class=\"headerlink\" title=\"1.3. Shell 环境\"></a>1.3. Shell 环境</h3><p>Shell 编程跟 java、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p>\n<p>Shell 的解释器种类众多，常见的有：</p>\n<ul>\n<li><a href=\"https://www.gnu.org/software/bash/\">sh</a> - 即 Bourne Shell。sh 是 Unix 标准默认的 shell。</li>\n<li><a href=\"https://www.gnu.org/software/bash/\">bash</a> - 即 Bourne Again Shell。bash 是 Linux 标准默认的 shell。</li>\n<li><a href=\"https://fishshell.com/\">fish</a> - 智能和用户友好的命令行 shell。</li>\n<li><a href=\"http://xiki.org/\">xiki</a> - 使 shell 控制台更友好，更强大。</li>\n<li><a href=\"http://www.zsh.org/\">zsh</a> - 功能强大的 shell 与脚本语言。</li>\n</ul>\n<h4 id=\"指定脚本解释器\"><a href=\"#指定脚本解释器\" class=\"headerlink\" title=\"指定脚本解释器\"></a>指定脚本解释器</h4><p>在 shell 脚本，<code>#!</code> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器。<code>#!</code> 被称作<a href=\"https://zh.wikipedia.org/wiki/Shebang\">shebang（也称为 Hashbang ）</a>。</p>\n<p>所以，你应该会在 shell 中，见到诸如以下的注释：</p>\n<ul>\n<li>指定 sh 解释器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定 bash 解释器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意</strong></p>\n<p>上面的指定解释器的方式是比较常见的，但有时候，你可能也会看到下面的方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env bash</span><br></pre></td></tr></table></figure>\n\n<p>这样做的好处是，系统会自动在 <code>PATH</code> 环境变量中查找你指定的程序（本例中的<code>bash</code>）。相比第一种写法，你应该尽量用这种写法，因为程序的路径是不确定的。这样写还有一个好处，操作系统的<code>PATH</code>变量有可能被配置为指向程序的另一个版本。比如，安装完新版本的<code>bash</code>，我们可能将其路径添加到<code>PATH</code>中，来 “隐藏” 老版本。如果直接用<code>#!/bin/bash</code>，那么系统会选择老版本的<code>bash</code>来执行脚本，如果用<code>#!/usr/bin/env bash</code>，则会使用新版本。</p></blockquote>\n<h3 id=\"1-4-模式\"><a href=\"#1-4-模式\" class=\"headerlink\" title=\"1.4. 模式\"></a>1.4. 模式</h3><p>shell 有交互和非交互两种模式。</p>\n<h4 id=\"交互模式\"><a href=\"#交互模式\" class=\"headerlink\" title=\"交互模式\"></a>交互模式</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>简单来说，你可以将 shell 的交互模式理解为执行命令行。</p></blockquote>\n<p>看到形如下面的东西，说明 shell 处于交互模式下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user@host:~$</span><br></pre></td></tr></table></figure>\n\n<p>接着，便可以输入一系列 Linux 命令，比如 <code>ls</code>，<code>grep</code>，<code>cd</code>，<code>mkdir</code>，<code>rm</code> 等等。</p>\n<h4 id=\"非交互模式\"><a href=\"#非交互模式\" class=\"headerlink\" title=\"非交互模式\"></a>非交互模式</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>简单来说，你可以将 shell 的非交互模式理解为执行 shell 脚本。</p></blockquote>\n<p>在非交互模式下，shell 从文件或者管道中读取命令并执行。</p>\n<p>当 shell 解释器执行完文件中的最后一个命令，shell 进程终止，并回到父进程。</p>\n<p>可以使用下面的命令让 shell 以非交互模式运行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh /path/to/script.sh</span><br><span class=\"line\">bash /path/to/script.sh</span><br><span class=\"line\">source /path/to/script.sh</span><br><span class=\"line\">./path/to/script.sh</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中，<code>script.sh</code>是一个包含 shell 解释器可以识别并执行的命令的普通文本文件，<code>sh</code>和<code>bash</code>是 shell 解释器程序。你可以使用任何喜欢的编辑器创建<code>script.sh</code>（vim，nano，Sublime Text, Atom 等等）。</p>\n<p>其中，<code>source /path/to/script.sh</code> 和 <code>./path/to/script.sh</code> 是等价的。</p>\n<p>除此之外，你还可以通过<code>chmod</code>命令给文件添加可执行的权限，来直接执行脚本文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /path/to/script.sh </span><br><span class=\"line\">/path/to/test.sh</span><br></pre></td></tr></table></figure>\n\n<p>这种方式要求脚本文件的第一行必须指明运行该脚本的程序，比如：</p>\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/tree/master/codes/shell/demos/helloworld.sh\">helloworld.sh</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\">echo &quot;Hello, world!&quot;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中，我们使用了一个很有用的命令<code>echo</code>来输出字符串到屏幕上。</p>\n<h2 id=\"2-基本语法\"><a href=\"#2-基本语法\" class=\"headerlink\" title=\"2. 基本语法\"></a>2. 基本语法</h2><h3 id=\"2-1-解释器\"><a href=\"#2-1-解释器\" class=\"headerlink\" title=\"2.1. 解释器\"></a>2.1. 解释器</h3><p>前面虽然两次提到了<code>#!</code> ，但是本着重要的事情说三遍的精神，这里再强调一遍：</p>\n<p>在 shell 脚本，<code>#!</code> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 解释器。<code>#!</code> 被称作<a href=\"https://zh.wikipedia.org/wiki/Shebang\">shebang（也称为 Hashbang ）</a>。</p>\n<p><code>#!</code> 决定了脚本可以像一个独立的可执行文件一样执行，而不用在终端之前输入<code>sh</code>, <code>bash</code>, <code>python</code>, <code>php</code>等。</p>\n<h3 id=\"2-2-注释\"><a href=\"#2-2-注释\" class=\"headerlink\" title=\"2.2. 注释\"></a>2.2. 注释</h3><p>注释可以说明你的代码是什么作用，以及为什么这样写。</p>\n<p>shell 语法中，注释是特殊的语句，会被 shell 解释器忽略。</p>\n<ul>\n<li>单行注释 - 以 <code>#</code> 开头，到行尾结束。</li>\n<li>多行注释 - 以 <code>:&lt;&lt;EOF</code> 开头，到 <code>EOF</code> 结束。</li>\n</ul>\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/tree/master/codes/shell/demos/comment-demo.sh\">comment-demo.sh</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">:&lt;&lt;EOF</span><br><span class=\"line\">echo &#x27;这是多行注释&#x27;</span><br><span class=\"line\">echo &#x27;这是多行注释&#x27;</span><br><span class=\"line\">echo &#x27;这是多行注释&#x27;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-echo\"><a href=\"#2-3-echo\" class=\"headerlink\" title=\"2.3. echo\"></a>2.3. echo</h3><p>echo 用于字符串的输出。</p>\n<p>输出普通字符串：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;hello, world&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出含变量的字符串：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;hello, \\&quot;zp\\&quot;&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出含变量的字符串：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=zp</span><br><span class=\"line\">echo &quot;hello, \\&quot;$&#123;name&#125;\\&quot;&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出含换行符的字符串：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">echo &quot;YES\\nNO&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo -e &quot;YES\\nNO&quot; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出含不换行符的字符串：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;YES&quot;</span><br><span class=\"line\">echo &quot;NO&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo -e &quot;YES\\c&quot; </span><br><span class=\"line\">echo &quot;NO&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出重定向至文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;test&quot; &gt; test.txt</span><br></pre></td></tr></table></figure>\n\n<p>输出执行结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo `pwd`</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/tree/master/codes/shell/demos/echo-demo.sh\">echo-demo.sh</a></p>\n<h3 id=\"2-4-printf\"><a href=\"#2-4-printf\" class=\"headerlink\" title=\"2.4. printf\"></a>2.4. printf</h3><p>printf 用于格式化输出字符串。</p>\n<p>默认，printf 不会像 echo 一样自动添加换行符，如果需要换行可以手动添加 <code>\\n</code>。</p>\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/tree/master/codes/shell/demos/printf-demo.sh\">printf-demo.sh</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">printf &#x27;%d %s\\n&#x27; 1 &quot;abc&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">printf &quot;%d %s\\n&quot; 1 &quot;abc&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">printf %s abcdef</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">printf &quot;%s\\n&quot; abc def</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">printf &quot;%s %s %s\\n&quot; a b c d e f g h i j</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">printf &quot;%s and %d \\n&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">printf &quot;%-10s %-8s %-4s\\n&quot; 姓名 性别 体重kg</span><br><span class=\"line\">printf &quot;%-10s %-8s %-4.2f\\n&quot; 郭靖 男 66.1234</span><br><span class=\"line\">printf &quot;%-10s %-8s %-4.2f\\n&quot; 杨过 男 48.6543</span><br><span class=\"line\">printf &quot;%-10s %-8s %-4.2f\\n&quot; 郭芙 女 47.9876</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"printf-的转义符\"><a href=\"#printf-的转义符\" class=\"headerlink\" title=\"printf 的转义符\"></a>printf 的转义符</h4><table>\n<thead>\n<tr>\n<th>序列</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>\\a</code></td>\n<td>警告字符，通常为 ASCII 的 BEL 字符</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>后退</td>\n</tr>\n<tr>\n<td><code>\\c</code></td>\n<td>抑制（不显示）输出结果中任何结尾的换行字符（只在 %b 格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略</td>\n</tr>\n<tr>\n<td><code>\\f</code></td>\n<td>换页（formfeed）</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>换行</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>回车（Carriage return）</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>水平制表符</td>\n</tr>\n<tr>\n<td><code>\\v</code></td>\n<td>垂直制表符</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>一个字面上的反斜杠字符</td>\n</tr>\n<tr>\n<td><code>\\ddd</code></td>\n<td>表示 1 到 3 位数八进制值的字符。仅在格式字符串中有效</td>\n</tr>\n<tr>\n<td><code>\\0ddd</code></td>\n<td>表示 1 到 3 位的八进制值字符</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-变量\"><a href=\"#3-变量\" class=\"headerlink\" title=\"3. 变量\"></a>3. 变量</h2><p>跟许多程序设计语言一样，你可以在 bash 中创建变量。</p>\n<p>Bash 中没有数据类型，bash 中的变量可以保存一个数字、一个字符、一个字符串等等。同时无需提前声明变量，给变量赋值会直接创建变量。</p>\n<h3 id=\"3-1-变量命名原则\"><a href=\"#3-1-变量命名原则\" class=\"headerlink\" title=\"3.1. 变量命名原则\"></a>3.1. 变量命名原则</h3><ul>\n<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li>\n<li>中间不能有空格，可以使用下划线（_）。</li>\n<li>不能使用标点符号。</li>\n<li>不能使用 bash 里的关键字（可用 help 命令查看保留关键字）。</li>\n</ul>\n<h3 id=\"3-2-声明变量\"><a href=\"#3-2-声明变量\" class=\"headerlink\" title=\"3.2. 声明变量\"></a>3.2. 声明变量</h3><p>访问变量的语法形式为：<code>$&#123;var&#125;</code> 和 <code>$var</code> 。</p>\n<p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，所以推荐加花括号。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">word=&quot;hello&quot;</span><br><span class=\"line\">echo $&#123;word&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-只读变量\"><a href=\"#3-3-只读变量\" class=\"headerlink\" title=\"3.3. 只读变量\"></a>3.3. 只读变量</h3><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rword=&quot;hello&quot;</span><br><span class=\"line\">echo $&#123;rword&#125;</span><br><span class=\"line\">readonly rword</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-删除变量\"><a href=\"#3-4-删除变量\" class=\"headerlink\" title=\"3.4. 删除变量\"></a>3.4. 删除变量</h3><p>使用 unset 命令可以删除变量。变量被删除后不能再次使用。unset 命令不能删除只读变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dword=&quot;hello&quot;  </span><br><span class=\"line\">echo $&#123;dword&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">unset dword    </span><br><span class=\"line\">echo $&#123;dword&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-变量类型\"><a href=\"#3-5-变量类型\" class=\"headerlink\" title=\"3.5. 变量类型\"></a>3.5. 变量类型</h3><ul>\n<li><strong>局部变量</strong> - 局部变量是仅在某个脚本内部有效的变量。它们不能被其他的程序和脚本访问。</li>\n<li><strong>环境变量</strong> - 环境变量是对当前 shell 会话内所有的程序或脚本都可见的变量。创建它们跟创建局部变量类似，但使用的是 <code>export</code> 关键字，shell 脚本也可以定义环境变量。</li>\n</ul>\n<p>常见的环境变量：</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$HOME</code></td>\n<td>当前用户的用户目录</td>\n</tr>\n<tr>\n<td><code>$PATH</code></td>\n<td>用分号分隔的目录列表，shell 会到这些目录中查找命令</td>\n</tr>\n<tr>\n<td><code>$PWD</code></td>\n<td>当前工作目录</td>\n</tr>\n<tr>\n<td><code>$RANDOM</code></td>\n<td>0 到 32767 之间的整数</td>\n</tr>\n<tr>\n<td><code>$UID</code></td>\n<td>数值类型，当前用户的用户 ID</td>\n</tr>\n<tr>\n<td><code>$PS1</code></td>\n<td>主要系统输入提示符</td>\n</tr>\n<tr>\n<td><code>$PS2</code></td>\n<td>次要系统输入提示符</td>\n</tr>\n</tbody></table>\n<p><a href=\"http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_02.html###sect_03_02_04\">这里</a> 有一张更全面的 Bash 环境变量列表。</p>\n<h3 id=\"3-6-变量示例源码\"><a href=\"#3-6-变量示例源码\" class=\"headerlink\" title=\"3.6. 变量示例源码\"></a>3.6. 变量示例源码</h3><p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/tree/master/codes/shell/demos/variable-demo.sh\">variable-demo.sh</a></p>\n<h2 id=\"4-字符串\"><a href=\"#4-字符串\" class=\"headerlink\" title=\"4. 字符串\"></a>4. 字符串</h2><h3 id=\"4-1-单引号和双引号\"><a href=\"#4-1-单引号和双引号\" class=\"headerlink\" title=\"4.1. 单引号和双引号\"></a>4.1. 单引号和双引号</h3><p>shell 字符串可以用单引号 <code>&#39;&#39;</code>，也可以用双引号 <code>“”</code>，也可以不用引号。</p>\n<ul>\n<li>单引号的特点<ul>\n<li>单引号里不识别变量</li>\n<li>单引号里不能出现单独的单引号（使用转义符也不行），但可成对出现，作为字符串拼接使用。</li>\n</ul>\n</li>\n<li>双引号的特点<ul>\n<li>双引号里识别变量</li>\n<li>双引号里可以出现转义字符</li>\n</ul>\n</li>\n</ul>\n<p>综上，推荐使用双引号。</p>\n<h3 id=\"4-2-拼接字符串\"><a href=\"#4-2-拼接字符串\" class=\"headerlink\" title=\"4.2. 拼接字符串\"></a>4.2. 拼接字符串</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">name1=&#x27;white&#x27;</span><br><span class=\"line\">str1=&#x27;hello, &#x27;$&#123;name1&#125;&#x27;&#x27;</span><br><span class=\"line\">str2=&#x27;hello, $&#123;name1&#125;&#x27;</span><br><span class=\"line\">echo $&#123;str1&#125;_$&#123;str2&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">name2=&quot;black&quot;</span><br><span class=\"line\">str3=&quot;hello, &quot;$&#123;name2&#125;&quot;&quot;</span><br><span class=\"line\">str4=&quot;hello, $&#123;name2&#125;&quot;</span><br><span class=\"line\">echo $&#123;str3&#125;_$&#123;str4&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-获取字符串长度\"><a href=\"#4-3-获取字符串长度\" class=\"headerlink\" title=\"4.3. 获取字符串长度\"></a>4.3. 获取字符串长度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text=&quot;12345&quot;</span><br><span class=\"line\">echo $&#123;#text&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-截取子字符串\"><a href=\"#4-4-截取子字符串\" class=\"headerlink\" title=\"4.4. 截取子字符串\"></a>4.4. 截取子字符串</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text=&quot;12345&quot;</span><br><span class=\"line\">echo $&#123;text:2:2&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>从第 3 个字符开始，截取 2 个字符</p>\n<h3 id=\"4-5-查找子字符串\"><a href=\"#4-5-查找子字符串\" class=\"headerlink\" title=\"4.5. 查找子字符串\"></a>4.5. 查找子字符串</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\"></span><br><span class=\"line\">text=&quot;hello&quot;</span><br><span class=\"line\">echo `expr index &quot;$&#123;text&#125;&quot; ll`</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>查找 <code>ll</code> 子字符在 <code>hello</code> 字符串中的起始位置。</p>\n<h3 id=\"4-6-字符串示例源码\"><a href=\"#4-6-字符串示例源码\" class=\"headerlink\" title=\"4.6. 字符串示例源码\"></a>4.6. 字符串示例源码</h3><p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/tree/master/codes/shell/demos/string-demo.sh\">string-demo.sh</a></p>\n<h2 id=\"5-数组\"><a href=\"#5-数组\" class=\"headerlink\" title=\"5. 数组\"></a>5. 数组</h2><p>bash 只支持一维数组。</p>\n<p>数组下标从 0 开始，下标可以是整数或算术表达式，其值应大于或等于 0。</p>\n<h3 id=\"5-1-创建数组\"><a href=\"#5-1-创建数组\" class=\"headerlink\" title=\"5.1. 创建数组\"></a>5.1. 创建数组</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">nums=([2]=2 [0]=0 [1]=1)</span><br><span class=\"line\">colors=(red yellow &quot;dark blue&quot;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-访问数组元素\"><a href=\"#5-2-访问数组元素\" class=\"headerlink\" title=\"5.2. 访问数组元素\"></a>5.2. 访问数组元素</h3><ul>\n<li><strong>访问数组的单个元素：</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $&#123;nums[1]&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>访问数组的所有元素：</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $&#123;colors[*]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo $&#123;colors[@]&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面两行有很重要（也很微妙）的区别：</p>\n<p>为了将数组中每个元素单独一行输出，我们用 <code>printf</code> 命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf &quot;+ %s\\n&quot; $&#123;colors[*]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>为什么<code>dark</code>和<code>blue</code>各占了一行？尝试用引号包起来：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf &quot;+ %s\\n&quot; &quot;$&#123;colors[*]&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>现在所有的元素都在一行输出 —— 这不是我们想要的！让我们试试<code>$&#123;colors[@]&#125;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf &quot;+ %s\\n&quot; &quot;$&#123;colors[@]&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在引号内，<code>$&#123;colors[@]&#125;</code>将数组中的每个元素扩展为一个单独的参数；数组元素中的空格得以保留。</p>\n<ul>\n<li><strong>访问数组的部分元素：</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $&#123;nums[@]:0:2&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在上面的例子中，<code>$&#123;array[@]&#125;</code> 扩展为整个数组，<code>:0:2</code>取出了数组中从 0 开始，长度为 2 的元素。</p>\n<h3 id=\"5-3-访问数组长度\"><a href=\"#5-3-访问数组长度\" class=\"headerlink\" title=\"5.3. 访问数组长度\"></a>5.3. 访问数组长度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $&#123;#nums[*]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-4-向数组中添加元素\"><a href=\"#5-4-向数组中添加元素\" class=\"headerlink\" title=\"5.4. 向数组中添加元素\"></a>5.4. 向数组中添加元素</h3><p>向数组中添加元素也非常简单：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colors=(white &quot;$&#123;colors[@]&#125;&quot; green black)</span><br><span class=\"line\">echo $&#123;colors[@]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中，<code>$&#123;colors[@]&#125;</code> 扩展为整个数组，并被置换到复合赋值语句中，接着，对数组<code>colors</code>的赋值覆盖了它原来的值。</p>\n<h3 id=\"5-5-从数组中删除元素\"><a href=\"#5-5-从数组中删除元素\" class=\"headerlink\" title=\"5.5. 从数组中删除元素\"></a>5.5. 从数组中删除元素</h3><p>用<code>unset</code>命令来从数组中删除一个元素：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unset nums[0]</span><br><span class=\"line\">echo $&#123;nums[@]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-6-数组示例源码\"><a href=\"#5-6-数组示例源码\" class=\"headerlink\" title=\"5.6. 数组示例源码\"></a>5.6. 数组示例源码</h3><p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/tree/master/codes/shell/demos/array-demo.sh\">array-demo.sh</a></p>\n<h2 id=\"6-运算符\"><a href=\"#6-运算符\" class=\"headerlink\" title=\"6. 运算符\"></a>6. 运算符</h2><h3 id=\"6-1-算术运算符\"><a href=\"#6-1-算术运算符\" class=\"headerlink\" title=\"6.1. 算术运算符\"></a>6.1. 算术运算符</h3><p>下表列出了常用的算术运算符，假定变量 x 为 10，变量 y 为 20：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>加法</td>\n<td><code>expr $x + $y</code> 结果为 30。</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减法</td>\n<td><code>expr $x - $y</code> 结果为 -10。</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘法</td>\n<td><code>expr $x * $y</code> 结果为 200。</td>\n</tr>\n<tr>\n<td>&#x2F;</td>\n<td>除法</td>\n<td><code>expr $y / $x</code> 结果为 2。</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余</td>\n<td><code>expr $y % $x</code> 结果为 0。</td>\n</tr>\n<tr>\n<td>\\&#x3D;</td>\n<td>赋值</td>\n<td><code>x=$y</code> 将把变量 y 的值赋给 x。</td>\n</tr>\n<tr>\n<td>\\&#x3D;&#x3D;</td>\n<td>相等。用于比较两个数字，相同则返回 true。</td>\n<td><code>[$x == $y]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>!&#x3D;</td>\n<td>不相等。用于比较两个数字，不相同则返回 true。</td>\n<td><code>[$x != $y]</code> 返回 true。</td>\n</tr>\n</tbody></table>\n<p><strong>注意：</strong> 条件表达式要放在方括号之间，并且要有空格，例如: <code>[$x==$y]</code> 是错误的，必须写成 <code>[$x == $y]</code>。</p>\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/blob/master/codes/shell/demos/operator/operator-demo.sh\">operator-demo.sh</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=10</span><br><span class=\"line\">y=20</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;x=$&#123;x&#125;, y=$&#123;y&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr $&#123;x&#125; + $&#123;y&#125;`</span><br><span class=\"line\">echo &quot;$&#123;x&#125; + $&#123;y&#125; = $val&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr $&#123;x&#125; - $&#123;y&#125;`</span><br><span class=\"line\">echo &quot;$&#123;x&#125; - $&#123;y&#125; = $val&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr $&#123;x&#125; \\* $&#123;y&#125;`</span><br><span class=\"line\">echo &quot;$&#123;x&#125; * $&#123;y&#125; = $val&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr $&#123;y&#125; / $&#123;x&#125;`</span><br><span class=\"line\">echo &quot;$&#123;y&#125; / $&#123;x&#125; = $val&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr $&#123;y&#125; % $&#123;x&#125;`</span><br><span class=\"line\">echo &quot;$&#123;y&#125; % $&#123;x&#125; = $val&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $&#123;x&#125; == $&#123;y&#125; ]]</span><br><span class=\"line\">then</span><br><span class=\"line\">  echo &quot;$&#123;x&#125; = $&#123;y&#125;&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [[ $&#123;x&#125; != $&#123;y&#125; ]]</span><br><span class=\"line\">then</span><br><span class=\"line\">  echo &quot;$&#123;x&#125; != $&#123;y&#125;&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-关系运算符\"><a href=\"#6-2-关系运算符\" class=\"headerlink\" title=\"6.2. 关系运算符\"></a>6.2. 关系运算符</h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>\n<p>下表列出了常用的关系运算符，假定变量 x 为 10，变量 y 为 20：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-eq</code></td>\n<td>检测两个数是否相等，相等返回 true。</td>\n<td><code>[$a -eq $b]</code>返回 false。</td>\n</tr>\n<tr>\n<td><code>-ne</code></td>\n<td>检测两个数是否相等，不相等返回 true。</td>\n<td><code>[$a -ne $b]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>-gt</code></td>\n<td>检测左边的数是否大于右边的，如果是，则返回 true。</td>\n<td><code>[$a -gt $b]</code> 返回 false。</td>\n</tr>\n<tr>\n<td><code>-lt</code></td>\n<td>检测左边的数是否小于右边的，如果是，则返回 true。</td>\n<td><code>[$a -lt $b]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>-ge</code></td>\n<td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td>\n<td><code>[$a -ge $b]</code> 返回 false。</td>\n</tr>\n<tr>\n<td><code>-le</code></td>\n<td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td>\n<td><code>[$a -le $b]</code>返回 true。</td>\n</tr>\n</tbody></table>\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/blob/master/codes/shell/demos/operator/operator-demo2.sh\">operator-demo2.sh</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=10</span><br><span class=\"line\">y=20</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;x=$&#123;x&#125;, y=$&#123;y&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $&#123;x&#125; -eq $&#123;y&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; -eq $&#123;y&#125; : x 等于 y&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; -eq $&#123;y&#125;: x 不等于 y&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $&#123;x&#125; -ne $&#123;y&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; -ne $&#123;y&#125;: x 不等于 y&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; -ne $&#123;y&#125;: x 等于 y&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $&#123;x&#125; -gt $&#123;y&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; -gt $&#123;y&#125;: x 大于 y&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; -gt $&#123;y&#125;: x 不大于 y&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $&#123;x&#125; -lt $&#123;y&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; -lt $&#123;y&#125;: x 小于 y&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; -lt $&#123;y&#125;: x 不小于 y&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $&#123;x&#125; -ge $&#123;y&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; -ge $&#123;y&#125;: x 大于或等于 y&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; -ge $&#123;y&#125;: x 小于 y&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $&#123;x&#125; -le $&#123;y&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; -le $&#123;y&#125;: x 小于或等于 y&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; -le $&#123;y&#125;: x 大于 y&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-3-布尔运算符\"><a href=\"#6-3-布尔运算符\" class=\"headerlink\" title=\"6.3. 布尔运算符\"></a>6.3. 布尔运算符</h3><p>下表列出了常用的布尔运算符，假定变量 x 为 10，变量 y 为 20：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>!</code></td>\n<td>非运算，表达式为 true 则返回 false，否则返回 true。</td>\n<td><code>[! false]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>-o</code></td>\n<td>或运算，有一个表达式为 true 则返回 true。</td>\n<td><code>[$a -lt 20 -o $b -gt 100]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>-a</code></td>\n<td>与运算，两个表达式都为 true 才返回 true。</td>\n<td><code>[$a -lt 20 -a $b -gt 100]</code> 返回 false。</td>\n</tr>\n</tbody></table>\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/blob/master/codes/shell/demos/operator/operator-demo3.sh\">operator-demo3.sh</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=10</span><br><span class=\"line\">y=20</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;x=$&#123;x&#125;, y=$&#123;y&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $&#123;x&#125; != $&#123;y&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; != $&#123;y&#125; : x 不等于 y&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; != $&#123;y&#125;: x 等于 y&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $&#123;x&#125; -lt 100 &amp;&amp; $&#123;y&#125; -gt 15 ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; 小于 100 且 $&#123;y&#125; 大于 15 : 返回 true&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; 小于 100 且 $&#123;y&#125; 大于 15 : 返回 false&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $&#123;x&#125; -lt 100 || $&#123;y&#125; -gt 100 ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; 小于 100 或 $&#123;y&#125; 大于 100 : 返回 true&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; 小于 100 或 $&#123;y&#125; 大于 100 : 返回 false&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $&#123;x&#125; -lt 5 || $&#123;y&#125; -gt 100 ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; 小于 5 或 $&#123;y&#125; 大于 100 : 返回 true&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; 小于 5 或 $&#123;y&#125; 大于 100 : 返回 false&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-4-逻辑运算符\"><a href=\"#6-4-逻辑运算符\" class=\"headerlink\" title=\"6.4. 逻辑运算符\"></a>6.4. 逻辑运算符</h3><p>以下介绍 Shell 的逻辑运算符，假定变量 x 为 10，变量 y 为 20:</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&amp;&amp;</code></td>\n<td>逻辑的 AND</td>\n<td><code>[[$&#123;x&#125; -lt 100 &amp;&amp; $&#123;y&#125; -gt 100 ]]</code> 返回 false</td>\n</tr>\n<tr>\n<td>`</td>\n<td></td>\n<td>`</td>\n</tr>\n</tbody></table>\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/blob/master/codes/shell/demos/operator/operator-demo4.sh\">operator-demo4.sh</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=10</span><br><span class=\"line\">y=20</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;x=$&#123;x&#125;, y=$&#123;y&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $&#123;x&#125; -lt 100 &amp;&amp; $&#123;y&#125; -gt 100 ]]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; -lt 100 &amp;&amp; $&#123;y&#125; -gt 100 返回 true&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; -lt 100 &amp;&amp; $&#123;y&#125; -gt 100 返回 false&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $&#123;x&#125; -lt 100 || $&#123;y&#125; -gt 100 ]]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; -lt 100 || $&#123;y&#125; -gt 100 返回 true&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; -lt 100 || $&#123;y&#125; -gt 100 返回 false&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-5-字符串运算符\"><a href=\"#6-5-字符串运算符\" class=\"headerlink\" title=\"6.5. 字符串运算符\"></a>6.5. 字符串运算符</h3><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>=</code></td>\n<td>检测两个字符串是否相等，相等返回 true。</td>\n<td><code>[$a = $b]</code> 返回 false。</td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>检测两个字符串是否相等，不相等返回 true。</td>\n<td><code>[$a != $b]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>-z</code></td>\n<td>检测字符串长度是否为 0，为 0 返回 true。</td>\n<td><code>[-z $a]</code> 返回 false。</td>\n</tr>\n<tr>\n<td><code>-n</code></td>\n<td>检测字符串长度是否为 0，不为 0 返回 true。</td>\n<td><code>[-n $a]</code> 返回 true。</td>\n</tr>\n<tr>\n<td><code>str</code></td>\n<td>检测字符串是否为空，不为空返回 true。</td>\n<td><code>[$a]</code> 返回 true。</td>\n</tr>\n</tbody></table>\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/blob/master/codes/shell/demos/operator/operator-demo5.sh\">operator-demo5.sh</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=&quot;abc&quot;</span><br><span class=\"line\">y=&quot;xyz&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;x=$&#123;x&#125;, y=$&#123;y&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $&#123;x&#125; = $&#123;y&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; = $&#123;y&#125; : x 等于 y&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; = $&#123;y&#125;: x 不等于 y&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $&#123;x&#125; != $&#123;y&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; != $&#123;y&#125; : x 不等于 y&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; != $&#123;y&#125;: x 等于 y&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ -z $&#123;x&#125; ]]; then</span><br><span class=\"line\">   echo &quot;-z $&#123;x&#125; : 字符串长度为 0&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;-z $&#123;x&#125; : 字符串长度不为 0&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ -n &quot;$&#123;x&#125;&quot; ]]; then</span><br><span class=\"line\">   echo &quot;-n $&#123;x&#125; : 字符串长度不为 0&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;-n $&#123;x&#125; : 字符串长度为 0&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $&#123;x&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; : 字符串不为空&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; : 字符串为空&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-6-文件测试运算符\"><a href=\"#6-6-文件测试运算符\" class=\"headerlink\" title=\"6.6. 文件测试运算符\"></a>6.6. 文件测试运算符</h3><p>文件测试运算符用于检测 Unix 文件的各种属性。</p>\n<p>属性检测描述如下：</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-b file</td>\n<td>检测文件是否是块设备文件，如果是，则返回 true。</td>\n<td><code>[-b $file]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-c file</td>\n<td>检测文件是否是字符设备文件，如果是，则返回 true。</td>\n<td><code>[-c $file]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-d file</td>\n<td>检测文件是否是目录，如果是，则返回 true。</td>\n<td><code>[-d $file]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-f file</td>\n<td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>\n<td><code>[-f $file]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-g file</td>\n<td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td>\n<td><code>[-g $file]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-k file</td>\n<td>检测文件是否设置了粘着位 (Sticky Bit)，如果是，则返回 true。</td>\n<td><code>[-k $file]</code>返回 false。</td>\n</tr>\n<tr>\n<td>-p file</td>\n<td>检测文件是否是有名管道，如果是，则返回 true。</td>\n<td><code>[-p $file]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-u file</td>\n<td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td>\n<td><code>[-u $file]</code> 返回 false。</td>\n</tr>\n<tr>\n<td>-r file</td>\n<td>检测文件是否可读，如果是，则返回 true。</td>\n<td><code>[-r $file]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-w file</td>\n<td>检测文件是否可写，如果是，则返回 true。</td>\n<td><code>[-w $file]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-x file</td>\n<td>检测文件是否可执行，如果是，则返回 true。</td>\n<td><code>[-x $file]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-s file</td>\n<td>检测文件是否为空（文件大小是否大于 0），不为空返回 true。</td>\n<td><code>[-s $file]</code> 返回 true。</td>\n</tr>\n<tr>\n<td>-e file</td>\n<td>检测文件（包括目录）是否存在，如果是，则返回 true。</td>\n<td><code>[-e $file]</code> 返回 true。</td>\n</tr>\n</tbody></table>\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/blob/master/codes/shell/demos/operator/operator-demo6.sh\">operator-demo6.sh</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file=&quot;/etc/hosts&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ -r $&#123;file&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;file&#125; 文件可读&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;file&#125; 文件不可读&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [[ -w $&#123;file&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;file&#125; 文件可写&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;file&#125; 文件不可写&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [[ -x $&#123;file&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;file&#125; 文件可执行&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;file&#125; 文件不可执行&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [[ -f $&#123;file&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;file&#125; 文件为普通文件&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;file&#125; 文件为特殊文件&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [[ -d $&#123;file&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;file&#125; 文件是个目录&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;file&#125; 文件不是个目录&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [[ -s $&#123;file&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;file&#125; 文件不为空&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;file&#125; 文件为空&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [[ -e $&#123;file&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;file&#125; 文件存在&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;file&#125; 文件不存在&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-控制语句\"><a href=\"#7-控制语句\" class=\"headerlink\" title=\"7. 控制语句\"></a>7. 控制语句</h2><h3 id=\"7-1-条件语句\"><a href=\"#7-1-条件语句\" class=\"headerlink\" title=\"7.1. 条件语句\"></a>7.1. 条件语句</h3><p>跟其它程序设计语言一样，Bash 中的条件语句让我们可以决定一个操作是否被执行。结果取决于一个包在<code>[[]]</code>里的表达式。</p>\n<p>由<code>[[]]</code>（<code>sh</code>中是<code>[ ]</code>）包起来的表达式被称作 <strong>检测命令</strong> 或 <strong>基元</strong>。这些表达式帮助我们检测一个条件的结果。这里可以找到有关<a href=\"http://serverfault.com/a/52050\">bash 中单双中括号区别</a>的答案。</p>\n<p>共有两个不同的条件表达式：<code>if</code>和<code>case</code>。</p>\n<h4 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a><code>if</code></h4><p>（1）<code>if</code> 语句</p>\n<p><code>if</code>在使用上跟其它语言相同。如果中括号里的表达式为真，那么<code>then</code>和<code>fi</code>之间的代码会被执行。<code>fi</code>标志着条件代码块的结束。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">if [[ 1 -eq 1 ]]; then echo &quot;1 -eq 1 result is: true&quot;; fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if [[ &quot;abc&quot; -eq &quot;abc&quot; ]]</span><br><span class=\"line\">then</span><br><span class=\"line\">  echo &quot;&quot;abc&quot; -eq &quot;abc&quot; result is: true&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>（2）<code>if else</code> 语句</p>\n<p>同样，我们可以使用<code>if..else</code>语句，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [[ 2 -ne 1 ]]; then</span><br><span class=\"line\">  echo &quot;true&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">  echo &quot;false&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>（3）<code>if elif else</code> 语句</p>\n<p>有些时候，<code>if..else</code>不能满足我们的要求。别忘了<code>if..elif..else</code>，使用起来也很方便。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=10</span><br><span class=\"line\">y=20</span><br><span class=\"line\">if [[ $&#123;x&#125; &gt; $&#123;y&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; &gt; $&#123;y&#125;&quot;</span><br><span class=\"line\">elif [[ $&#123;x&#125; &lt; $&#123;y&#125; ]]; then</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; &lt; $&#123;y&#125;&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;$&#123;x&#125; = $&#123;y&#125;&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/blob/master/codes/shell/demos/statement/if-demo.sh\">if-demo.sh</a></p>\n<h4 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a><code>case</code></h4><p>如果你需要面对很多情况，分别要采取不同的措施，那么使用<code>case</code>会比嵌套的<code>if</code>更有用。使用<code>case</code>来解决复杂的条件判断，看起来像下面这样：</p>\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/blob/master/codes/shell/demos/statement/case-demo.sh\">case-demo.sh</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec</span><br><span class=\"line\">case $&#123;oper&#125; in</span><br><span class=\"line\">  &quot;+&quot;)</span><br><span class=\"line\">    val=`expr $&#123;x&#125; + $&#123;y&#125;`</span><br><span class=\"line\">    echo &quot;$&#123;x&#125; + $&#123;y&#125; = $&#123;val&#125;&quot;</span><br><span class=\"line\">  ;;</span><br><span class=\"line\">  &quot;-&quot;)</span><br><span class=\"line\">    val=`expr $&#123;x&#125; - $&#123;y&#125;`</span><br><span class=\"line\">    echo &quot;$&#123;x&#125; - $&#123;y&#125; = $&#123;val&#125;&quot;</span><br><span class=\"line\">  ;;</span><br><span class=\"line\">  &quot;*&quot;)</span><br><span class=\"line\">    val=`expr $&#123;x&#125; \\* $&#123;y&#125;`</span><br><span class=\"line\">    echo &quot;$&#123;x&#125; * $&#123;y&#125; = $&#123;val&#125;&quot;</span><br><span class=\"line\">  ;;</span><br><span class=\"line\">  &quot;/&quot;)</span><br><span class=\"line\">    val=`expr $&#123;x&#125; / $&#123;y&#125;`</span><br><span class=\"line\">    echo &quot;$&#123;x&#125; / $&#123;y&#125; = $&#123;val&#125;&quot;</span><br><span class=\"line\">  ;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">    echo &quot;Unknown oper!&quot;</span><br><span class=\"line\">  ;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n\n<p>每种情况都是匹配了某个模式的表达式。<code>|</code>用来分割多个模式，<code>)</code>用来结束一个模式序列。第一个匹配上的模式对应的命令将会被执行。<code>*</code>代表任何不匹配以上给定模式的模式。命令块儿之间要用<code>;;</code>分隔。</p>\n<h3 id=\"7-2-循环语句\"><a href=\"#7-2-循环语句\" class=\"headerlink\" title=\"7.2. 循环语句\"></a>7.2. 循环语句</h3><p>循环其实不足为奇。跟其它程序设计语言一样，bash 中的循环也是只要控制条件为真就一直迭代执行的代码块。</p>\n<p>Bash 中有四种循环：<code>for</code>，<code>while</code>，<code>until</code>和<code>select</code>。</p>\n<h4 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a><code>for</code>循环</h4><p><code>for</code>与它在 C 语言中的姊妹非常像。看起来是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for arg in elem1 elem2 ... elemN</span><br><span class=\"line\">do</span><br><span class=\"line\">  </span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>在每次循环的过程中，<code>arg</code>依次被赋值为从<code>elem1</code>到<code>elemN</code>。这些值还可以是通配符或者<a href=\"https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E5%A4%A7%E6%8B%AC%E5%8F%B7%E6%89%A9%E5%B1%95\">大括号扩展</a>。</p>\n<p>当然，我们还可以把<code>for</code>循环写在一行，但这要求<code>do</code>之前要有一个分号，就像下面这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in &#123;1..5&#125;; do echo $i; done</span><br></pre></td></tr></table></figure>\n\n<p>还有，如果你觉得<code>for..in..do</code>对你来说有点奇怪，那么你也可以像 C 语言那样使用<code>for</code>，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (( i = 0; i &lt; 10; i++ )); do</span><br><span class=\"line\">  echo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>当我们想对一个目录下的所有文件做同样的操作时，<code>for</code>就很方便了。举个例子，如果我们想把所有的<code>.bash</code>文件移动到<code>script</code>文件夹中，并给它们可执行权限，我们的脚本可以这样写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DIR=/home/zp</span><br><span class=\"line\">for FILE in $&#123;DIR&#125;/*.sh; do</span><br><span class=\"line\">  mv &quot;$FILE&quot; &quot;$&#123;DIR&#125;/scripts&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/blob/master/codes/shell/demos/statement/for-demo.sh\">for-demo.sh</a></p>\n<h4 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a><code>while</code>循环</h4><p><code>while</code>循环检测一个条件，只要这个条件为 _真_，就执行一段命令。被检测的条件跟<code>if..then</code>中使用的<a href=\"https://github.com/denysdovhan/bash-handbook/blob/master/translations/zh-CN/README.md#%E5%9F%BA%E5%85%83%E5%92%8C%E7%BB%84%E5%90%88%E8%A1%A8%E8%BE%BE%E5%BC%8F\">基元</a>并无二异。因此一个<code>while</code>循环看起来会是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while [[ condition ]]</span><br><span class=\"line\">do</span><br><span class=\"line\">  </span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>跟<code>for</code>循环一样，如果我们把<code>do</code>和被检测的条件写到一行，那么必须要在<code>do</code>之前加一个分号。</p>\n<p>比如下面这个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">x=0</span><br><span class=\"line\">while [[ $&#123;x&#125; -lt 10 ]]; do</span><br><span class=\"line\">  echo $((x * x))</span><br><span class=\"line\">  x=$((x + 1))</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/blob/master/codes/shell/demos/statement/while-demo.sh\">while-demo.sh</a></p>\n<h4 id=\"until循环\"><a href=\"#until循环\" class=\"headerlink\" title=\"until循环\"></a><code>until</code>循环</h4><p><code>until</code>循环跟<code>while</code>循环正好相反。它跟<code>while</code>一样也需要检测一个测试条件，但不同的是，只要该条件为 <em>假</em> 就一直执行循环：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=0</span><br><span class=\"line\">until [[ $&#123;x&#125; -ge 5 ]]; do</span><br><span class=\"line\">  echo $&#123;x&#125;</span><br><span class=\"line\">  x=`expr $&#123;x&#125; + 1`</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/blob/master/codes/shell/demos/statement/until-demo.sh\">until-demo.sh</a></p>\n<h4 id=\"select循环\"><a href=\"#select循环\" class=\"headerlink\" title=\"select循环\"></a><code>select</code>循环</h4><p><code>select</code>循环帮助我们组织一个用户菜单。它的语法几乎跟<code>for</code>循环一致：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select answer in elem1 elem2 ... elemN</span><br><span class=\"line\">do</span><br><span class=\"line\">  </span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p><code>select</code>会打印<code>elem1..elemN</code>以及它们的序列号到屏幕上，之后会提示用户输入。通常看到的是<code>$?</code>（<code>PS3</code>变量）。用户的选择结果会被保存到<code>answer</code>中。如果<code>answer</code>是一个在<code>1..N</code>之间的数字，那么<code>语句</code>会被执行，紧接着会进行下一次迭代 —— 如果不想这样的话我们可以使用<code>break</code>语句。</p>\n<p>一个可能的实例可能会是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\"></span><br><span class=\"line\">PS3=&quot;Choose the package manager: &quot;</span><br><span class=\"line\">select ITEM in bower npm gem pip</span><br><span class=\"line\">do</span><br><span class=\"line\">echo -n &quot;Enter the package name: &quot; &amp;&amp; read PACKAGE</span><br><span class=\"line\">case $&#123;ITEM&#125; in</span><br><span class=\"line\">  bower) bower install $&#123;PACKAGE&#125; ;;</span><br><span class=\"line\">  npm) npm install $&#123;PACKAGE&#125; ;;</span><br><span class=\"line\">  gem) gem install $&#123;PACKAGE&#125; ;;</span><br><span class=\"line\">  pip) pip install $&#123;PACKAGE&#125; ;;</span><br><span class=\"line\">esac</span><br><span class=\"line\">break </span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>这个例子，先询问用户他想使用什么包管理器。接着，又询问了想安装什么包，最后执行安装操作。</p>\n<p>运行这个脚本，会得到如下输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./my_script</span><br><span class=\"line\">1) bower</span><br><span class=\"line\">2) npm</span><br><span class=\"line\">3) gem</span><br><span class=\"line\">4) pip</span><br><span class=\"line\">Choose the package manager: 2</span><br><span class=\"line\">Enter the package name: gitbook-cli</span><br></pre></td></tr></table></figure>\n\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/blob/master/codes/shell/demos/statement/select-demo.sh\">select-demo.sh</a></p>\n<h4 id=\"break-和-continue\"><a href=\"#break-和-continue\" class=\"headerlink\" title=\"break 和 continue\"></a><code>break</code> 和 <code>continue</code></h4><p>如果想提前结束一个循环或跳过某次循环执行，可以使用 shell 的<code>break</code>和<code>continue</code>语句来实现。它们可以在任何循环中使用。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>break</code>语句用来提前结束当前循环。</p>\n<p><code>continue</code>语句用来跳过某次迭代。</p></blockquote>\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/blob/master/codes/shell/demos/statement/break-demo.sh\">break-demo.sh</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">i=1</span><br><span class=\"line\">while [[ $&#123;i&#125; -lt 10 ]]; do</span><br><span class=\"line\">  if [[ $((i % 3)) -eq 0 ]] &amp;&amp; [[ $((i % 2)) -eq 0 ]]; then</span><br><span class=\"line\">    echo $&#123;i&#125;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  i=`expr $&#123;i&#125; + 1`</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/blob/master/codes/shell/demos/statement/continue-demo.sh\">continue-demo.sh</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">for (( i = 0; i &lt; 10; i ++ )); do</span><br><span class=\"line\">  if [[ $((i % 2)) -eq 0 ]]; then</span><br><span class=\"line\">    continue;</span><br><span class=\"line\">  fi</span><br><span class=\"line\">  echo $&#123;i&#125;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-函数\"><a href=\"#8-函数\" class=\"headerlink\" title=\"8. 函数\"></a>8. 函数</h2><p>bash 函数定义语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ function ] funname [()] &#123;</span><br><span class=\"line\">    action;</span><br><span class=\"line\">    [return int;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>💡 说明：</p>\n<ol>\n<li>函数定义时，<code>function</code> 关键字可有可无。</li>\n<li>函数返回值 - return 返回函数返回值，返回值类型只能为整数（0-255）。如果不加 return 语句，shell 默认将以最后一条命令的运行结果，作为函数返回值。</li>\n<li>函数返回值在调用该函数后通过 <code>$?</code> 来获得。</li>\n<li>所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至 shell 解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</li>\n</ol></blockquote>\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/tree/master/codes/shell/demos//function/function-demo.sh\">function-demo.sh</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\"></span><br><span class=\"line\">calc()&#123;</span><br><span class=\"line\">  PS3=&quot;choose the oper: &quot;</span><br><span class=\"line\">  select oper in + - \\* / </span><br><span class=\"line\">  do</span><br><span class=\"line\">  echo -n &quot;enter first num: &quot; &amp;&amp; read x </span><br><span class=\"line\">  echo -n &quot;enter second num: &quot; &amp;&amp; read y </span><br><span class=\"line\">  exec</span><br><span class=\"line\">  case $&#123;oper&#125; in</span><br><span class=\"line\">    &quot;+&quot;)</span><br><span class=\"line\">      return $(($&#123;x&#125; + $&#123;y&#125;))</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    &quot;-&quot;)</span><br><span class=\"line\">      return $(($&#123;x&#125; - $&#123;y&#125;))</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    &quot;*&quot;)</span><br><span class=\"line\">      return $(($&#123;x&#125; * $&#123;y&#125;))</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    &quot;/&quot;)</span><br><span class=\"line\">      return $(($&#123;x&#125; / $&#123;y&#125;))</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">      echo &quot;$&#123;oper&#125; is not support!&quot;</span><br><span class=\"line\">      return 0</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  esac</span><br><span class=\"line\">  break</span><br><span class=\"line\">  done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">calc</span><br><span class=\"line\">echo &quot;the result is: $?&quot; </span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./function-demo.sh</span><br><span class=\"line\">1) +</span><br><span class=\"line\">2) -</span><br><span class=\"line\">3) *</span><br><span class=\"line\">4) /</span><br><span class=\"line\">choose the oper: 3</span><br><span class=\"line\">enter first num: 10</span><br><span class=\"line\">enter second num: 10</span><br><span class=\"line\">the result is: 100</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-1-位置参数\"><a href=\"#8-1-位置参数\" class=\"headerlink\" title=\"8.1. 位置参数\"></a>8.1. 位置参数</h3><p><strong>位置参数</strong>是在调用一个函数并传给它参数时创建的变量。</p>\n<p>位置参数变量表：</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$0</code></td>\n<td>脚本名称</td>\n</tr>\n<tr>\n<td><code>$1 … $9</code></td>\n<td>第 1 个到第 9 个参数列表</td>\n</tr>\n<tr>\n<td><code>$&#123;10&#125; … $&#123;N&#125;</code></td>\n<td>第 10 个到 N 个参数列表</td>\n</tr>\n<tr>\n<td><code>$*</code> or <code>$@</code></td>\n<td>除了<code>$0</code>外的所有位置参数</td>\n</tr>\n<tr>\n<td><code>$#</code></td>\n<td>不包括<code>$0</code>在内的位置参数的个数</td>\n</tr>\n<tr>\n<td><code>$FUNCNAME</code></td>\n<td>函数名称（仅在函数内部有值）</td>\n</tr>\n</tbody></table>\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/tree/master/codes/shell/demos//function/function-demo2.sh\">function-demo2.sh</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\"></span><br><span class=\"line\">x=0</span><br><span class=\"line\">if [[ -n $1 ]]; then</span><br><span class=\"line\">  echo &quot;第一个参数为：$1&quot;</span><br><span class=\"line\">  x=$1</span><br><span class=\"line\">else</span><br><span class=\"line\">  echo &quot;第一个参数为空&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">y=0</span><br><span class=\"line\">if [[ -n $2 ]]; then</span><br><span class=\"line\">  echo &quot;第二个参数为：$2&quot;</span><br><span class=\"line\">  y=$2</span><br><span class=\"line\">else</span><br><span class=\"line\">  echo &quot;第二个参数为空&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">paramsFunction()&#123;</span><br><span class=\"line\">  echo &quot;函数第一个入参：$1&quot;</span><br><span class=\"line\">  echo &quot;函数第二个入参：$2&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">paramsFunction $&#123;x&#125; $&#123;y&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./function-demo2.sh</span><br><span class=\"line\">第一个参数为空</span><br><span class=\"line\">第二个参数为空</span><br><span class=\"line\">函数第一个入参：0</span><br><span class=\"line\">函数第二个入参：0</span><br><span class=\"line\"></span><br><span class=\"line\">$ ./function-demo2.sh 10 20</span><br><span class=\"line\">第一个参数为：10</span><br><span class=\"line\">第二个参数为：20</span><br><span class=\"line\">函数第一个入参：10</span><br><span class=\"line\">函数第二个入参：20</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>./variable-demo4.sh hello world</code> ，然后在脚本中通过 <code>$1</code>、<code>$2</code> … 读取第 1 个参数、第 2 个参数。。。</p>\n<h3 id=\"8-2-函数处理参数\"><a href=\"#8-2-函数处理参数\" class=\"headerlink\" title=\"8.2. 函数处理参数\"></a>8.2. 函数处理参数</h3><p>另外，还有几个特殊字符用来处理参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数处理</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$#</code></td>\n<td>返回参数个数</td>\n</tr>\n<tr>\n<td><code>$*</code></td>\n<td>返回所有参数</td>\n</tr>\n<tr>\n<td><code>$$</code></td>\n<td>脚本运行的当前进程 ID 号</td>\n</tr>\n<tr>\n<td><code>$!</code></td>\n<td>后台运行的最后一个进程的 ID 号</td>\n</tr>\n<tr>\n<td><code>$@</code></td>\n<td>返回所有参数</td>\n</tr>\n<tr>\n<td><code>$-</code></td>\n<td>返回 Shell 使用的当前选项，与 set 命令功能相同。</td>\n</tr>\n<tr>\n<td><code>$?</code></td>\n<td>函数返回值</td>\n</tr>\n</tbody></table>\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/tree/master/codes/shell/demos//function/function-demo3.sh\">function-demo3.sh</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runner() &#123;</span><br><span class=\"line\">  return 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">name=zp</span><br><span class=\"line\">paramsFunction()&#123;</span><br><span class=\"line\">  echo &quot;函数第一个入参：$1&quot;</span><br><span class=\"line\">  echo &quot;函数第二个入参：$2&quot;</span><br><span class=\"line\">  echo &quot;传递到脚本的参数个数：$#&quot;</span><br><span class=\"line\">  echo &quot;所有参数：&quot;</span><br><span class=\"line\">  printf &quot;+ %s\\n&quot; &quot;$*&quot;</span><br><span class=\"line\">  echo &quot;脚本运行的当前进程 ID 号：$$&quot;</span><br><span class=\"line\">  echo &quot;后台运行的最后一个进程的 ID 号：$!&quot;</span><br><span class=\"line\">  echo &quot;所有参数：&quot;</span><br><span class=\"line\">  printf &quot;+ %s\\n&quot; &quot;$@&quot;</span><br><span class=\"line\">  echo &quot;Shell 使用的当前选项：$-&quot;</span><br><span class=\"line\">  runner</span><br><span class=\"line\">  echo &quot;runner 函数的返回值：$?&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">paramsFunction 1 &quot;abc&quot; &quot;hello, \\&quot;zp\\&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-Shell-扩展\"><a href=\"#9-Shell-扩展\" class=\"headerlink\" title=\"9. Shell 扩展\"></a>9. Shell 扩展</h2><p><em>扩展</em> 发生在一行命令被分成一个个的 <em>记号（tokens）</em> 之后。换言之，扩展是一种执行数学运算的机制，还可以用来保存命令的执行结果，等等。</p>\n<p>感兴趣的话可以阅读<a href=\"https://www.gnu.org/software/bash/manual/bash.html###Shell-Expansions\">关于 shell 扩展的更多细节</a>。</p>\n<h4 id=\"大括号扩展\"><a href=\"#大括号扩展\" class=\"headerlink\" title=\"大括号扩展\"></a>大括号扩展</h4><p>大括号扩展让生成任意的字符串成为可能。它跟 <em>文件名扩展</em> 很类似，举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo beg&#123;i,a,u&#125;n </span><br></pre></td></tr></table></figure>\n\n<p>大括号扩展还可以用来创建一个可被循环迭代的区间。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#123;0..5&#125; </span><br><span class=\"line\">echo &#123;00..8..2&#125; </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"命令置换\"><a href=\"#命令置换\" class=\"headerlink\" title=\"命令置换\"></a>命令置换</h4><p>命令置换允许我们对一个命令求值，并将其值置换到另一个命令或者变量赋值表达式中。当一个命令被``或<code>$()</code>包围时，命令置换将会执行。举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">now=`date +%T`</span><br><span class=\"line\"></span><br><span class=\"line\">now=$(date +%T)</span><br><span class=\"line\"></span><br><span class=\"line\">echo $now </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"算数扩展\"><a href=\"#算数扩展\" class=\"headerlink\" title=\"算数扩展\"></a>算数扩展</h4><p>在 bash 中，执行算数运算是非常方便的。算数表达式必须包在<code>$(())</code>中。算数扩展的格式为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result=$(( ((10 + 5*3) - 7) / 2 ))</span><br><span class=\"line\">echo $result </span><br></pre></td></tr></table></figure>\n\n<p>在算数表达式中，使用变量无需带上<code>$</code>前缀：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=4</span><br><span class=\"line\">y=7</span><br><span class=\"line\">echo $(( x + y ))     </span><br><span class=\"line\">echo $(( ++x + y++ )) </span><br><span class=\"line\">echo $(( x + y ))     </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"单引号和双引号\"><a href=\"#单引号和双引号\" class=\"headerlink\" title=\"单引号和双引号\"></a>单引号和双引号</h4><p>单引号和双引号之间有很重要的区别。在双引号中，变量引用或者命令置换是会被展开的。在单引号中是不会的。举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;Your home: $HOME&quot; </span><br><span class=\"line\">echo &#x27;Your home: $HOME&#x27; </span><br></pre></td></tr></table></figure>\n\n<p>当局部变量和环境变量包含空格时，它们在引号中的扩展要格外注意。随便举个例子，假如我们用<code>echo</code>来输出用户的输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INPUT=&quot;A string  with   strange    whitespace.&quot;</span><br><span class=\"line\">echo $INPUT   </span><br><span class=\"line\">echo &quot;$INPUT&quot; </span><br></pre></td></tr></table></figure>\n\n<p>调用第一个<code>echo</code>时给了它 5 个单独的参数 —— <code>$INPUT</code> 被分成了单独的词，<code>echo</code>在每个词之间打印了一个空格。第二种情况，调用<code>echo</code>时只给了它一个参数（整个 $INPUT 的值，包括其中的空格）。</p>\n<p>来看一个更严肃的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILE=&quot;Favorite Things.txt&quot;</span><br><span class=\"line\">cat $FILE   </span><br><span class=\"line\">cat &quot;$FILE&quot; </span><br></pre></td></tr></table></figure>\n\n<p>尽管这个问题可以通过把 FILE 重命名成<code>Favorite-Things.txt</code>来解决，但是，假如这个值来自某个环境变量，来自一个位置参数，或者来自其它命令（<code>find</code>, <code>cat</code>, 等等）呢。因此，如果输入 <em>可能</em> 包含空格，务必要用引号把表达式包起来。</p>\n<h2 id=\"10-流和重定向\"><a href=\"#10-流和重定向\" class=\"headerlink\" title=\"10. 流和重定向\"></a>10. 流和重定向</h2><p>Bash 有很强大的工具来处理程序之间的协同工作。使用流，我们能将一个程序的输出发送到另一个程序或文件，因此，我们能方便地记录日志或做一些其它我们想做的事。</p>\n<p>管道给了我们创建传送带的机会，控制程序的执行成为可能。</p>\n<p>学习如何使用这些强大的、高级的工具是非常非常重要的。</p>\n<h3 id=\"10-1-输入、输出流\"><a href=\"#10-1-输入、输出流\" class=\"headerlink\" title=\"10.1. 输入、输出流\"></a>10.1. 输入、输出流</h3><p>Bash 接收输入，并以字符序列或 <strong>字符流</strong> 的形式产生输出。这些流能被重定向到文件或另一个流中。</p>\n<p>有三个文件描述符：</p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>描述符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>0</code></td>\n<td><code>stdin</code></td>\n<td>标准输入</td>\n</tr>\n<tr>\n<td><code>1</code></td>\n<td><code>stdout</code></td>\n<td>标准输出</td>\n</tr>\n<tr>\n<td><code>2</code></td>\n<td><code>stderr</code></td>\n<td>标准错误输出</td>\n</tr>\n</tbody></table>\n<h3 id=\"10-2-重定向\"><a href=\"#10-2-重定向\" class=\"headerlink\" title=\"10.2. 重定向\"></a>10.2. 重定向</h3><p>重定向让我们可以控制一个命令的输入来自哪里，输出结果到什么地方。这些运算符在控制流的重定向时会被用到：</p>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&gt;</code></td>\n<td>重定向输出</td>\n</tr>\n<tr>\n<td><code>&amp;&gt;</code></td>\n<td>重定向输出和错误输出</td>\n</tr>\n<tr>\n<td><code>&amp;&gt;&gt;</code></td>\n<td>以附加的形式重定向输出和错误输出</td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>重定向输入</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td><a href=\"http://tldp.org/LDP/abs/html/here-docs.html\">Here 文档</a> 语法</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;&lt;</code></td>\n<td><a href=\"http://www.tldp.org/LDP/abs/html/x17837.html\">Here 字符串</a></td>\n</tr>\n</tbody></table>\n<p>以下是一些使用重定向的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ls -l &gt; list.txt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ls -a &gt;&gt; list.txt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">grep da * 2&gt; errors.txt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">less &lt; errors.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-3-dev-null-文件\"><a href=\"#10-3-dev-null-文件\" class=\"headerlink\" title=\"10.3. /dev/null 文件\"></a>10.3. <code>/dev/null</code> 文件</h3><p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 &#x2F;dev&#x2F;null：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ command &gt; /dev/null</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;dev&#x2F;null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 &#x2F;dev&#x2F;null 文件非常有用，将命令的输出重定向到它，会起到 “禁止输出” 的效果。</p>\n<p>如果希望屏蔽 stdout 和 stderr，可以这样写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ command &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-Debug\"><a href=\"#11-Debug\" class=\"headerlink\" title=\"11. Debug\"></a>11. Debug</h2><p>shell 提供了用于 debug 脚本的工具。</p>\n<p>如果想采用 debug 模式运行某脚本，可以在其 shebang 中使用一个特殊的选项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash options</span><br></pre></td></tr></table></figure>\n\n<p>options 是一些可以改变 shell 行为的选项。下表是一些可能对你有用的选项：</p>\n<table>\n<thead>\n<tr>\n<th>Short</th>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-f</code></td>\n<td>noglob</td>\n<td>禁止文件名展开（globbing）</td>\n</tr>\n<tr>\n<td><code>-i</code></td>\n<td>interactive</td>\n<td>让脚本以 <em>交互</em> 模式运行</td>\n</tr>\n<tr>\n<td><code>-n</code></td>\n<td>noexec</td>\n<td>读取命令，但不执行（语法检查）</td>\n</tr>\n<tr>\n<td><code>-t</code></td>\n<td>—</td>\n<td>执行完第一条命令后退出</td>\n</tr>\n<tr>\n<td><code>-v</code></td>\n<td>verbose</td>\n<td>在执行每条命令前，向<code>stderr</code>输出该命令</td>\n</tr>\n<tr>\n<td><code>-x</code></td>\n<td>xtrace</td>\n<td>在执行每条命令前，向<code>stderr</code>输出该命令以及该命令的扩展参数</td>\n</tr>\n</tbody></table>\n<p>举个例子，如果我们在脚本中指定了<code>-x</code>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash -x</span><br><span class=\"line\"></span><br><span class=\"line\">for (( i = 0; i &lt; 3; i++ )); do</span><br><span class=\"line\">  echo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>这会向<code>stdout</code>打印出变量的值和一些其它有用的信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./my_script</span><br><span class=\"line\">+ (( i = 0 ))</span><br><span class=\"line\">+ (( i &lt; 3 ))</span><br><span class=\"line\">+ echo 0</span><br><span class=\"line\">0</span><br><span class=\"line\">+ (( i++  ))</span><br><span class=\"line\">+ (( i &lt; 3 ))</span><br><span class=\"line\">+ echo 1</span><br><span class=\"line\">1</span><br><span class=\"line\">+ (( i++  ))</span><br><span class=\"line\">+ (( i &lt; 3 ))</span><br><span class=\"line\">+ echo 2</span><br><span class=\"line\">2</span><br><span class=\"line\">+ (( i++  ))</span><br><span class=\"line\">+ (( i &lt; 3 ))</span><br></pre></td></tr></table></figure>\n\n<p>有时我们值需要 debug 脚本的一部分。这种情况下，使用<code>set</code>命令会很方便。这个命令可以启用或禁用选项。使用<code>-</code>启用选项，<code>+</code>禁用选项：</p>\n<p><strong>⌨️ 『示例源码』</strong> <a href=\"https://github.com/dunwu/os-tutorial/blob/master/codes/shell/demos/debug-demo.sh\">debug-demo.sh</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -x</span><br><span class=\"line\"><span class=\"keyword\">for</span> (( i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span> <span class=\"variable\">$&#123;i&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> +x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..5&#125;; <span class=\"keyword\">do</span> <span class=\"built_in\">printf</span> <span class=\"variable\">$&#123;i&#125;</span>; <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> <a href=\"https://www.cnblogs.com/jingmoxukong/p/7867397.html\">https://www.cnblogs.com/jingmoxukong/p/7867397.html</a></p>\n","text":"shell 语言 1. 简介 1.1. 什么是 shell 1.2. 什么是 shell 脚本 1.3. Shell 环境 1.4. 模式 2. 基本语法 2....","permalink":"/post/LINUX/shell 语言","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"23 mins."},"categories":[{"name":"shell","slug":"shell","count":2,"path":"api/categories/shell.json"},{"name":"LINUX","slug":"shell/LINUX","count":2,"path":"api/categories/shell/LINUX.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"demo","slug":"demo","count":1,"path":"api/tags/demo.json"},{"name":"true","slug":"true","count":2,"path":"api/tags/true.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#shell-%E8%AF%AD%E8%A8%80\"><span class=\"toc-text\">shell 语言</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1. 简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E4%BB%80%E4%B9%88%E6%98%AF-shell\"><span class=\"toc-text\">1.1. 什么是 shell</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E4%BB%80%E4%B9%88%E6%98%AF-shell-%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">1.2. 什么是 shell 脚本</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-Shell-%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">1.3. Shell 环境</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%87%E5%AE%9A%E8%84%9A%E6%9C%AC%E8%A7%A3%E9%87%8A%E5%99%A8\"><span class=\"toc-text\">指定脚本解释器</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">1.4. 模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">交互模式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">非交互模式</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">2. 基本语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E8%A7%A3%E9%87%8A%E5%99%A8\"><span class=\"toc-text\">2.1. 解释器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">2.2. 注释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-echo\"><span class=\"toc-text\">2.3. echo</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-printf\"><span class=\"toc-text\">2.4. printf</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#printf-%E7%9A%84%E8%BD%AC%E4%B9%89%E7%AC%A6\"><span class=\"toc-text\">printf 的转义符</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3. 变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">3.1. 变量命名原则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.2. 声明变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E5%8F%AA%E8%AF%BB%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.3. 只读变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-%E5%88%A0%E9%99%A4%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.4. 删除变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3.5. 变量类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-%E5%8F%98%E9%87%8F%E7%A4%BA%E4%BE%8B%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">3.6. 变量示例源码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">4. 字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E5%8D%95%E5%BC%95%E5%8F%B7%E5%92%8C%E5%8F%8C%E5%BC%95%E5%8F%B7\"><span class=\"toc-text\">4.1. 单引号和双引号</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E6%8B%BC%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">4.2. 拼接字符串</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6\"><span class=\"toc-text\">4.3. 获取字符串长度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-%E6%88%AA%E5%8F%96%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">4.4. 截取子字符串</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-%E6%9F%A5%E6%89%BE%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">4.5. 查找子字符串</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%A4%BA%E4%BE%8B%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">4.6. 字符串示例源码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">5. 数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">5.1. 创建数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E8%AE%BF%E9%97%AE%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">5.2. 访问数组元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-%E8%AE%BF%E9%97%AE%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6\"><span class=\"toc-text\">5.3. 访问数组长度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-%E5%90%91%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">5.4. 向数组中添加元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-5-%E4%BB%8E%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">5.5. 从数组中删除元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-6-%E6%95%B0%E7%BB%84%E7%A4%BA%E4%BE%8B%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">5.6. 数组示例源码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">6. 运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">6.1. 算术运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">6.2. 关系运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-3-%E5%B8%83%E5%B0%94%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">6.3. 布尔运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-4-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">6.4. 逻辑运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-5-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">6.5. 字符串运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-6-%E6%96%87%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">6.6. 文件测试运算符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">7. 控制语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">7.1. 条件语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#if\"><span class=\"toc-text\">if</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#case\"><span class=\"toc-text\">case</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-2-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">7.2. 循环语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#for%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">for循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#while%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">while循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#until%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">until循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#select%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">select循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#break-%E5%92%8C-continue\"><span class=\"toc-text\">break 和 continue</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">8. 函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-1-%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">8.1. 位置参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-%E5%87%BD%E6%95%B0%E5%A4%84%E7%90%86%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">8.2. 函数处理参数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-Shell-%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">9. Shell 扩展</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E6%8B%AC%E5%8F%B7%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">大括号扩展</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4%E7%BD%AE%E6%8D%A2\"><span class=\"toc-text\">命令置换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%95%B0%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">算数扩展</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%BC%95%E5%8F%B7%E5%92%8C%E5%8F%8C%E5%BC%95%E5%8F%B7\"><span class=\"toc-text\">单引号和双引号</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-%E6%B5%81%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91\"><span class=\"toc-text\">10. 流和重定向</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-1-%E8%BE%93%E5%85%A5%E3%80%81%E8%BE%93%E5%87%BA%E6%B5%81\"><span class=\"toc-text\">10.1. 输入、输出流</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-2-%E9%87%8D%E5%AE%9A%E5%90%91\"><span class=\"toc-text\">10.2. 重定向</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-3-dev-null-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">10.3. &#x2F;dev&#x2F;null 文件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-Debug\"><span class=\"toc-text\">11. Debug</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"软中断导致 CPU 使用率过高的案例","uid":"f8276dfd473ae590df0c6e191d789800","slug":"LINUX/软中断导致 CPU 使用率过高的案例","date":"2022-02-02T19:25:37.000Z","updated":"2025-09-30T03:26:43.880Z","comments":true,"path":"api/articles/LINUX/软中断导致 CPU 使用率过高的案例.json","keywords":"XuGuangSheng","cover":"/covers/cpu.jpg","text":"软中断导致 CPU 使用率过高的案例前言软中断基本原理，可参考这篇博客：https://www.cnblogs.com/poloyy/p/13435519.ht...","permalink":"/post/LINUX/软中断导致 CPU 使用率过高的案例","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"CPU","slug":"CPU","count":5,"path":"api/categories/CPU.json"},{"name":"LINUX","slug":"CPU/LINUX","count":4,"path":"api/categories/CPU/LINUX.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"通过","slug":"通过","count":2,"path":"api/tags/通过.json"},{"name":"SYN","slug":"SYN","count":1,"path":"api/tags/SYN.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Zookeeper开源客户端ZKClient和Curator简介","uid":"83a96f58bfaa8c716d7a61d4a063cd85","slug":"JAVA/Zookeeper开源客户端ZKClient和Curator简介","date":"2022-01-20T22:39:09.000Z","updated":"2025-09-30T03:26:22.386Z","comments":true,"path":"api/articles/JAVA/Zookeeper开源客户端ZKClient和Curator简介.json","keywords":"XuGuangSheng","cover":"/covers/zookeeperzkclientcurator.jpg","text":"Zookeeper开源客户端ZKClient和Curator简介Zookeeper 客户端提供了基本的操作，比如，创建会话、创建节点、读取节点、更新数据、删除节...","permalink":"/post/JAVA/Zookeeper开源客户端ZKClient和Curator简介","photos":[],"count_time":{"symbolsCount":930,"symbolsTime":"1 mins."},"categories":[{"name":"Zookeeper","slug":"Zookeeper","count":2,"path":"api/categories/Zookeeper.json"},{"name":"JAVA","slug":"Zookeeper/JAVA","count":2,"path":"api/categories/Zookeeper/JAVA.json"}],"tags":[{"name":"Curator","slug":"Curator","count":2,"path":"api/tags/Curator.json"},{"name":"API","slug":"API","count":1,"path":"api/tags/API.json"},{"name":"ZkClient","slug":"ZkClient","count":1,"path":"api/tags/ZkClient.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}