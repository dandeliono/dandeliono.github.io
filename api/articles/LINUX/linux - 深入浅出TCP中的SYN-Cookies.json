{"title":"linux - 深入浅出TCP中的SYN-Cookies","uid":"ba2c98fe76e98638ad19f6c9f02b695c","slug":"LINUX/linux - 深入浅出TCP中的SYN-Cookies","date":"2024-04-03T10:36:59.000Z","updated":"2025-09-30T03:26:37.420Z","comments":true,"path":"api/articles/LINUX/linux - 深入浅出TCP中的SYN-Cookies.json","keywords":"XuGuangSheng","cover":"/covers/linux-tcpsyn-cookies.jpg","content":"<h1 id=\"linux-深入浅出TCP中的SYN-Cookies\"><a href=\"#linux-深入浅出TCP中的SYN-Cookies\" class=\"headerlink\" title=\"linux - 深入浅出TCP中的SYN-Cookies\"></a>linux - 深入浅出TCP中的SYN-Cookies</h1><p><img src=\"https://segmentfault.com/img/bVbs6Wu?w=688&h=302\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文渐进地介绍<code>TCP</code>中的<code>syn-cookie</code>技术，包括其由来、原理、实例测试。</p></blockquote>\n<h3 id=\"SYN-Flood-攻击\"><a href=\"#SYN-Flood-攻击\" class=\"headerlink\" title=\"SYN Flood 攻击\"></a>SYN Flood 攻击</h3><p><code>TCP</code>连接建立时，客户端通过发送<code>SYN</code>报文发起向处于监听状态的服务器发起连接，服务器为该连接分配一定的资源，并发送<code>SYN+ACK</code>报文。对服务器来说，此时该连接的状态称为<code>半连接</code>(<code>Half-Open</code>)，而当其之后收到客户端回复的<code>ACK</code>报文后，连接才算建立完成。在这个过程中，如果服务器一直没有收到<code>ACK</code>报文(比如在链路中丢失了)，服务器会在超时后重传<code>SYN+ACK</code>。<br><img src=\"https://segmentfault.com/img/bVbs6WF?w=566&h=273\"></p>\n<p>如果经过多次超时重传后，还没有收到, 那么服务器会回收资源并关闭<code>半连接</code>，仿佛之前最初的<code>SYN</code>报文从来没到过一样！</p>\n<p><img src=\"https://segmentfault.com/img/bVbs6V5?w=474&h=331\"></p>\n<p>这看上一切正常，但是如果有坏人<strong>故意</strong>大量不断发送伪造的<code>SYN</code>报文，那么服务器就会分配大量注定无用的资源，并且从<a href=\"https://segmentfault.com/a/1190000019252960\">backlog的意义</a> 中可知，服务器能保存的半连接的数量是有限的！所以当服务器受到大量攻击报文时，它就不能再接收正常的连接了。换句话说，它的服务不再可用了！这就是<code>SYN Flood</code>攻击的原理，它是一种典型的<code>DDoS</code>攻击。</p>\n<h3 id=\"连接请求的关键信息\"><a href=\"#连接请求的关键信息\" class=\"headerlink\" title=\"连接请求的关键信息\"></a>连接请求的关键信息</h3><p><code>Syn-Flood</code>攻击成立的关键在于服务器资源是有限的，而服务器收到请求会分配资源。通常来说，服务器用这些资源保存此次请求的关键信息，包括请求的来源和目(五元组)，以及<code>TCP</code>选项，如最大报文段长度<code>MSS</code>、时间戳<code>timestamp</code>、选择应答使能<code>Sack</code>、窗口缩放因子<code>Wscale</code>等等。当后续的<code>ACK</code>报文到达，三次握手完成，新的连接创建，这些信息可以会被复制到连接结构中，用来指导后续的报文收发。</p>\n<p>那么现在的问题就是服务器如何在<strong>不分配</strong>资源的情况下</p>\n<ol>\n<li>验证之后可能到达的<code>ACK</code>的有效性，保证这是一次完整的握手</li>\n<li>获得<code>SYN</code>报文中携带的<code>TCP</code>选项信息</li>\n</ol>\n<h3 id=\"SYN-cookies-算法\"><a href=\"#SYN-cookies-算法\" class=\"headerlink\" title=\"SYN cookies 算法\"></a>SYN cookies 算法</h3><p><code>SYN Cookies</code>算法<a href=\"https://link.segmentfault.com/?enc=qKxs6G4sM391cy8bOLoLfw==.z6J0WiG4vArCD879dilHVzsG/BshK7X06E1AVZ4MfJYFVxnNirG41nciarHCFJHt\">wiki</a>可以解决上面的第<code>1</code>个问题以及第<code>2</code>个问题的一部分</p>\n<p>我们知道，<code>TCP</code>连接建立时，双方的起始报文序号是可以<strong>任意</strong>的。<code>SYN cookies</code>利用这一点，按照以下规则构造初始序列号：</p>\n<ul>\n<li>设<code>t</code>为一个缓慢增长的时间戳(典型实现是每64s递增一次)</li>\n<li>设<code>m</code>为客户端发送的<code>SYN</code>报文中的<code>MSS</code>选项值</li>\n<li>设<code>s</code>是连接的元组信息(源IP,目的IP,源端口，目的端口)和<code>t</code>经过密码学运算后的<code>Hash</code>值，即<code>s = hash(sip,dip,sport,dport,t)</code>，<code>s</code>的结果取低 <strong>24</strong> 位</li>\n</ul>\n<p>则初始序列号<code>n</code>为：</p>\n<ul>\n<li>高 <strong>5</strong> 位为<code>t mod 32</code></li>\n<li>接下来<strong>3</strong>位为<code>m</code>的编码值</li>\n<li>低 <strong>24</strong> 位为<code>s</code></li>\n</ul>\n<p>当客户端收到此<code>SYN+ACK</code>报文后，根据<code>TCP</code>标准，它会回复<code>ACK</code>报文，且报文中<code>ack = n + 1</code>，那么在服务器收到它时，将<code>ack - 1</code>就可以拿回当初发送的<code>SYN+ACK</code>报文中的序号了！服务器巧妙地通过这种方式间接保存了一部分<code>SYN</code>报文的信息。</p>\n<p>接下来，服务器需要对<code>ack - 1</code>这个序号进行检查：</p>\n<ul>\n<li>将高 <strong>5</strong> 位表示的<code>t</code>与当前之间比较，看其到达地时间是否能接受。</li>\n<li>根据<code>t</code>和连接元组重新计算<code>s</code>，看是否和低 <strong>24</strong> 一致，若不一致，说明这个报文是被伪造的。</li>\n<li>解码序号中隐藏的<code>mss</code>信息</li>\n</ul>\n<p>到此，连接就可以顺利建立了。</p>\n<h4 id=\"SYN-Cookies-缺点\"><a href=\"#SYN-Cookies-缺点\" class=\"headerlink\" title=\"SYN Cookies 缺点\"></a>SYN Cookies 缺点</h4><p>既然<code>SYN Cookies</code>可以减小资源分配环节，那为什么没有被纳入<code>TCP</code>标准呢？原因是<code>SYN Cookies</code>也是有代价的：</p>\n<ol>\n<li><code>MSS</code>的编码只有<strong>3</strong>位，因此最多只能使用 <strong>8</strong> 种<code>MSS</code>值</li>\n<li>服务器必须拒绝客户端<code>SYN</code>报文中的其他只在<code>SYN</code>和<code>SYN+ACK</code>中协商的选项，原因是服务器没有地方可以保存这些选项，比如<code>Wscale</code>和<code>SACK</code></li>\n<li>增加了密码学运算</li>\n</ol>\n<h4 id=\"Linux-中的-SYN-Cookies\"><a href=\"#Linux-中的-SYN-Cookies\" class=\"headerlink\" title=\"Linux 中的 SYN Cookies\"></a>Linux 中的 SYN Cookies</h4><p><code>Linux</code>上的<code>SYN Cookies</code>实现与<code>wiki</code>中描述的算法在序号生成上有一些区别，其<code>SYN+ACK</code>的序号通过下面的公式进行计算：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>内核编译需要打开 <strong>CONFIG_SYN_COOKIES</strong></p></blockquote>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">seq</span> = hash(saddr, daddr, sport, dport, <span class=\"number\">0</span>, <span class=\"number\">0</span>) \\+ req.th.seq + t &lt;&lt; <span class=\"number\">24</span> \\+ (hash(saddr, daddr, sport, dport, t, <span class=\"number\">1</span>) \\+ mss_ind) &amp; <span class=\"number\">0</span>x00FFFFFF</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>req.th.seq</code>表示客户端的<code>SYN</code>报文中的序号，<code>mss_ind</code>是客户端通告的<code>MSS</code>值得编码，它的取值在比较新的内核中有 <strong>4</strong> 种(老的内核有 <strong>8</strong> 种), 分别对应以下 <strong>4</strong> 种值</p>\n<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static __u16 const msstab\\[\\] = &#123;</span><br><span class=\"line\"><span class=\"built_in\"> 536,</span></span><br><span class=\"line\"><span class=\"built_in\"> 1300,</span></span><br><span class=\"line\"><span class=\"built_in\"> 1440,</span>    </span><br><span class=\"line\"><span class=\"built_in\"> 1460,</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>感兴趣的可以顺着以下轨迹浏览调用顺序</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp\\<span class=\"variable\">_conn</span>\\<span class=\"variable\">_request</span></span><br><span class=\"line\">  |\\-\\- cookie\\<span class=\"variable\">_init</span>\\<span class=\"variable\">_sequence</span></span><br><span class=\"line\">     |\\-\\- cookie\\<span class=\"variable\">_v4</span>\\<span class=\"variable\">_init_sequence</span></span><br><span class=\"line\">        |\\-\\- \\_\\<span class=\"variable\">_cookie</span>\\<span class=\"variable\">_v4</span>\\<span class=\"variable\">_init</span>\\<span class=\"variable\">_sequence</span></span><br><span class=\"line\">           |\\-\\- secure\\<span class=\"variable\">_tcp</span>\\<span class=\"variable\">_syn_cookie</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SYN-Cookies-与时间戳\"><a href=\"#SYN-Cookies-与时间戳\" class=\"headerlink\" title=\"SYN Cookies 与时间戳\"></a>SYN Cookies 与时间戳</h4><p>如果服务器和客户端<strong>都</strong>打开了时间戳选项，那么服务器可以将客户端在<code>SYN</code>报文中携带了<code>TCP</code>选项的使能情况暂时保存在时间戳中。当前使用了低 <strong>6</strong> 位，分别保存<code>Wscale</code>、<code>SACK</code>和<code>ECN</code>。</p>\n<p><img src=\"https://segmentfault.com/img/bVbs6Km?w=776&h=195\"></p>\n<p>客户端会在<code>ACK</code>的<code>TSecr</code>字段，把这些值带回来。</p>\n<h3 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>Linux</strong>中的<code>/proc/sys/net/ipv4/tcp_syncookies</code>是内核中的<code>SYN Cookies</code>开关,<code>0</code>表示关闭<code>SYN Cookies</code>；<code>1</code>表示在新连接压力比较大时启用<code>SYN Cookies</code>,<code>2</code>表示始终使用<code>SYN Cookies</code>。</p></blockquote>\n<p>本实验是在<code>4.4.0</code>内核运行的，服务端监听<code>50001</code>端口，<code>backlog</code>参数为<code>3</code>(<a href=\"https://segmentfault.com/a/1190000019252960\">该参数意义</a>)。同时，模拟不同的客户端注入<code>SYN</code>报文。</p>\n<p><a href=\"https://segmentfault.com/n/1330000019292093\">测试代码</a></p>\n<h4 id=\"不开启-SYN-Cookies\"><a href=\"#不开启-SYN-Cookies\" class=\"headerlink\" title=\"不开启 SYN Cookies\"></a>不开启 SYN Cookies</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 0 \\&gt; /proc/sys/net/ipv4/tcp_syncookies</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，在收到<code>3</code>个<code>SYN</code>报文后，服务器不再响应新的连接请求了，这也就是<code>SYN-Flood</code>的攻击方式。<br><img src=\"https://segmentfault.com/img/bVbs6Uu?w=1456&h=242\"></p>\n<h4 id=\"有条件使用-SYN-Cookies\"><a href=\"#有条件使用-SYN-Cookies\" class=\"headerlink\" title=\"有条件使用 SYN Cookies\"></a>有条件使用 SYN Cookies</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 1 \\&gt; /proc/sys/net/ipv4/tcp_syncookies</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://segmentfault.com/img/bVbs6PD?w=1419&h=346\"></p>\n<p>由于服务器的<code>backlog</code>参数为<code>3</code>，因此图中的从第<code>4</code>个<code>SYN+ACK</code>(<strong>#8</strong>报文)开始使用<code>SYN Cookies</code>。</p>\n<p>从时间戳可以看出，**#8**报文(44167748)比 <strong>#6</strong>号报文(44167796)还要小。</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">44167748 </span>= <span class=\"number\">0</span>x2A1F244 ,最后低<span class=\"number\">6</span>位是 <span class=\"number\">0</span>b000100 ,与SYN报文中 wscale = <span class=\"number\">4</span> 是相符的</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><code>SYN Cookie</code>技术可以让服务器在收到客户端的<code>SYN</code>报文时，不分配资源保存客户端信息，而是将这些信息保存在<code>SYN+ACK</code>的初始序号和时间戳中。对正常的连接，这些信息会随着<code>ACK</code>报文被带回来。</p>\n","text":"linux - 深入浅出TCP中的SYN-Cookies 本文渐进地介绍TCP中的syn-cookie技术，包括其由来、原理、实例测试。 SYN Flood 攻...","permalink":"/post/LINUX/linux - 深入浅出TCP中的SYN-Cookies","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"SYN","slug":"SYN","count":1,"path":"api/categories/SYN.json"},{"name":"LINUX","slug":"SYN/LINUX","count":1,"path":"api/categories/SYN/LINUX.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"Cookies","slug":"Cookies","count":1,"path":"api/tags/Cookies.json"},{"name":"ACK","slug":"ACK","count":2,"path":"api/tags/ACK.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#linux-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATCP%E4%B8%AD%E7%9A%84SYN-Cookies\"><span class=\"toc-text\">linux - 深入浅出TCP中的SYN-Cookies</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SYN-Flood-%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">SYN Flood 攻击</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E8%AF%B7%E6%B1%82%E7%9A%84%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">连接请求的关键信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SYN-cookies-%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">SYN cookies 算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SYN-Cookies-%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">SYN Cookies 缺点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Linux-%E4%B8%AD%E7%9A%84-SYN-Cookies\"><span class=\"toc-text\">Linux 中的 SYN Cookies</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SYN-Cookies-%E4%B8%8E%E6%97%B6%E9%97%B4%E6%88%B3\"><span class=\"toc-text\">SYN Cookies 与时间戳</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C\"><span class=\"toc-text\">实验</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%BC%80%E5%90%AF-SYN-Cookies\"><span class=\"toc-text\">不开启 SYN Cookies</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%89%E6%9D%A1%E4%BB%B6%E4%BD%BF%E7%94%A8-SYN-Cookies\"><span class=\"toc-text\">有条件使用 SYN Cookies</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"一次完整的JVM堆外内存泄漏故障排查记录","uid":"d1455563815fa1914c63f89b230d2e22","slug":"JAVA/一次完整的JVM堆外内存泄漏故障排查记录","date":"2024-04-03T11:02:02.000Z","updated":"2025-09-30T03:26:23.837Z","comments":true,"path":"api/articles/JAVA/一次完整的JVM堆外内存泄漏故障排查记录.json","keywords":"XuGuangSheng","cover":"/covers/jvm.jpg","text":"一次完整的JVM堆外内存泄漏故障排查记录前言记录一次线上JVM堆外内存泄漏问题的排查过程与思路，其中夹带一些JVM内存分配机制以及常用的JVM问题排查指令和工具...","permalink":"/post/JAVA/一次完整的JVM堆外内存泄漏故障排查记录","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"https","slug":"https","count":12,"path":"api/categories/https.json"},{"name":"JAVA","slug":"https/JAVA","count":5,"path":"api/categories/https/JAVA.json"}],"tags":[{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"JVM","slug":"JVM","count":6,"path":"api/tags/JVM.json"},{"name":"gitee","slug":"gitee","count":1,"path":"api/tags/gitee.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"深入理解堆外内存 Metaspace","uid":"5d97a4bdf6449b8cb573c2f758d846ee","slug":"JAVA/深入理解堆外内存 Metaspace","date":"2024-04-03T10:36:07.000Z","updated":"2025-09-30T03:26:27.900Z","comments":true,"path":"api/articles/JAVA/深入理解堆外内存 Metaspace.json","keywords":"XuGuangSheng","cover":"/covers/metaspace.jpg","text":"深入理解堆外内存 Metaspace在之前介绍的分代垃圾回收算法中，我们一直有一个永久代存在，叫 PermGen，内存上它是挨着堆的。为了垃圾回收方便，HotS...","permalink":"/post/JAVA/深入理解堆外内存 Metaspace","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Metaspace","slug":"Metaspace","count":1,"path":"api/categories/Metaspace.json"},{"name":"JAVA","slug":"Metaspace/JAVA","count":1,"path":"api/categories/Metaspace/JAVA.json"}],"tags":[{"name":"Class","slug":"Class","count":1,"path":"api/tags/Class.json"},{"name":"Space","slug":"Space","count":1,"path":"api/tags/Space.json"},{"name":"metaspace","slug":"metaspace","count":1,"path":"api/tags/metaspace.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}