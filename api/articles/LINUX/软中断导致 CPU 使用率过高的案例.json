{"title":"软中断导致 CPU 使用率过高的案例","uid":"f8276dfd473ae590df0c6e191d789800","slug":"LINUX/软中断导致 CPU 使用率过高的案例","date":"2022-02-02T19:25:37.000Z","updated":"2025-09-30T03:26:43.880Z","comments":true,"path":"api/articles/LINUX/软中断导致 CPU 使用率过高的案例.json","keywords":"XuGuangSheng","cover":"/covers/cpu.jpg","content":"<h1 id=\"软中断导致-CPU-使用率过高的案例\"><a href=\"#软中断导致-CPU-使用率过高的案例\" class=\"headerlink\" title=\"软中断导致 CPU 使用率过高的案例\"></a>软中断导致 CPU 使用率过高的案例</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>软中断基本原理，可参考这篇博客：<a href=\"https://www.cnblogs.com/poloyy/p/13435519.html\">https://www.cnblogs.com/poloyy/p/13435519.html</a></p>\n<h4 id=\"中断\"><a href=\"#中断\" class=\"headerlink\" title=\"中断\"></a>中断</h4><ul>\n<li>一种异步的事件处理机制，用来提供系统的并发处理能力</li>\n<li>当中断事件发生，会触发执行中断处理程序</li>\n<li>中断处理程序分为上半部和下半部</li>\n<li><strong>上半部：</strong> 硬中断，快速处理中断</li>\n<li><strong>下半部：</strong> 软中断，用来异步处理上半部未完成的工作</li>\n</ul>\n<h4 id=\"软中断\"><a href=\"#软中断\" class=\"headerlink\" title=\"软中断\"></a>软中断</h4><ul>\n<li>每个 CPU 都对应一个软中断内核线程，名字是 ksoftirqd&#x2F;CPU 编号</li>\n<li>当软中断事件的频率过高时，内核线程也会因为 CPU 使用率过高而导致软中断处理不及时，进而引发网络收发延迟，调度缓慢等性能问题</li>\n</ul>\n<h2 id=\"软中断频率过高案例\"><a href=\"#软中断频率过高案例\" class=\"headerlink\" title=\"软中断频率过高案例\"></a>软中断频率过高案例</h2><h3 id=\"系统配置\"><a href=\"#系统配置\" class=\"headerlink\" title=\"系统配置\"></a>系统配置</h3><p>Ubuntu 18.04， 2 CPU，2GB 内存，共两台虚拟机</p>\n<h4 id=\"三个工具\"><a href=\"#三个工具\" class=\"headerlink\" title=\"三个工具\"></a>三个工具</h4><ul>\n<li>sar：是一个<strong>系统活动报告工具</strong>，既可以实时查看系统的当前活动，又可以配置保存和报告 历史统计数据。</li>\n<li>hping3：是一个可以<strong>构造 TCP&#x2F;IP 协议数据包的工具</strong>，可以对系统进行安全审计、防火墙 测试等。</li>\n<li>tcpdump：是一个常用的<strong>网络抓包工具</strong>，常用来分析各种网络问题</li>\n</ul>\n<h4 id=\"虚拟机关系\"><a href=\"#虚拟机关系\" class=\"headerlink\" title=\"虚拟机关系\"></a>虚拟机关系</h4><p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/e40cee4067a2ae9f5375942ea3491609.png\"></p>\n<h3 id=\"通过-docker-运行案例\"><a href=\"#通过-docker-运行案例\" class=\"headerlink\" title=\"通过 docker 运行案例\"></a>通过 docker 运行案例</h3><p>在 VM1 中执行命令</p>\n<pre><code>docker run \\-itd \\--name\\=nginx \\-p 80:80 nginx\n</code></pre>\n<h3 id=\"通过-curl-确认-Nginx-正常启动\"><a href=\"#通过-curl-确认-Nginx-正常启动\" class=\"headerlink\" title=\"通过 curl 确认 Nginx 正常启动\"></a>通过 curl 确认 Nginx 正常启动</h3><p>在 VM2 中执行命令</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">curl</span> http://172.20.72.58/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过-hping3-模拟-Nginx-的客户端请求\"><a href=\"#通过-hping3-模拟-Nginx-的客户端请求\" class=\"headerlink\" title=\"通过 hping3 模拟 Nginx 的客户端请求\"></a>通过 hping3 模拟 Nginx 的客户端请求</h3><p>在 VM2 中执行命令</p>\n<pre><code>hping3 \\-S \\-p 80 \\-i u100 172.20.72.58\n</code></pre>\n<ul>\n<li><strong>-S：</strong> 参数表示设置 TCP 协议的 SYN（同步序列号）</li>\n<li><strong>-p：</strong> 表示目的端口为 80</li>\n<li><strong>-i：</strong> u100 表示每隔 100 微秒发送一个网络帧</li>\n</ul>\n<h4 id=\"回到-VM1\"><a href=\"#回到-VM1\" class=\"headerlink\" title=\"回到 VM1\"></a>回到 VM1</h4><p>感觉系统响应明显变慢了，即便只 是在终端中敲几个回车，都得很久才能得到响应</p>\n<h3 id=\"分析系统为什么会响应变慢\"><a href=\"#分析系统为什么会响应变慢\" class=\"headerlink\" title=\"分析系统为什么会响应变慢\"></a>分析系统为什么会响应变慢</h3><p>以下命令均在 VM1 中执行</p>\n<h3 id=\"通过-top-命令查看系统资源使用情况\"><a href=\"#通过-top-命令查看系统资源使用情况\" class=\"headerlink\" title=\"通过 top 命令查看系统资源使用情况\"></a>通过 top 命令查看系统资源使用情况</h3><p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/8b57b3093b69251539f3a5ae60873202.png\"></p>\n<ol>\n<li>系统 CPU 使用率（用户态 us 和内核态 sy ）并不高</li>\n<li>平均负载适中，只有 2 个 R 状态的进程，无僵尸进程</li>\n<li>但是软中断进程 1 号（ksoftirqd&#x2F;1）的 CPU 使用率偏高，而且处理软中断的 CPU 占比已达到 94</li>\n<li>此外，并无其他异常进程</li>\n<li>可以猜测，软中断就是罪魁祸首</li>\n</ol>\n<h3 id=\"确认是什么类型的软中断\"><a href=\"#确认是什么类型的软中断\" class=\"headerlink\" title=\"确认是什么类型的软中断\"></a>确认是什么类型的软中断</h3><p>观察 &#x2F;proc&#x2F;softirqs 文件的内容，就能知道各种<strong>软中断类型的次数</strong></p>\n<h4 id=\"这里的各类软中断次数，又是什么时间段里的次数呢？\"><a href=\"#这里的各类软中断次数，又是什么时间段里的次数呢？\" class=\"headerlink\" title=\"这里的各类软中断次数，又是什么时间段里的次数呢？\"></a>这里的各类软中断次数，又是什么时间段里的次数呢？</h4><ul>\n<li>它是系统运行以来的<strong>累积中断次数</strong></li>\n<li>所以直接查看文件内容，得到的只是累积中断次数，对这里的问题并没有直接参考意义</li>\n<li><strong>中断次数的变化速率</strong>才是我们需要关注的</li>\n</ul>\n<h3 id=\"通过-watch-动态查看命令输出结果\"><a href=\"#通过-watch-动态查看命令输出结果\" class=\"headerlink\" title=\"通过 watch 动态查看命令输出结果\"></a>通过 watch 动态查看命令输出结果</h3><p>因为我的机器是两核，如果直接读取 &#x2F;proc&#x2F;softirqs 会打印 128 核的信息，但对于我来说，只要看前面两核的信息足以，所以需要写提取关键数据</p>\n<pre><code>watch \\-d &quot;/bin/cat /proc/softirqs | /usr/bin/awk &#39;NR == 1&#123;printf \\\\&quot;%-15s %-15s %-15s\\\\n\\\\&quot;,\\\\&quot; \\\\&quot;,\\\\$1,\\\\$2&#125;; NR &gt; 1&#123;printf \\\\&quot;%-15s %-15s %-15s\\\\n\\\\&quot;,\\\\$1,\\\\$2,\\\\$3&#125;&#39;&quot;\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/ce68121788ed31f8033a5df1f2891a68.png\"></p>\n<h4 id=\"结果分析\"><a href=\"#结果分析\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h4><ul>\n<li>TIMER（定时中断）、 NET_RX（网络接收）、SCHED（内核调度）、RCU（RCU 锁）等这几个软中断都在不停变化</li>\n<li>而 <strong>NET_RX</strong>，就是网络数据包<strong>接收软中断</strong>的<strong>变化速率最快</strong></li>\n<li>其他几种类型的软中断，是保证 Linux 调度、时钟、临界区保护这些正常工作所必需的，所以有变化时正常的</li>\n</ul>\n<h3 id=\"通过-sar-查看系统的网络收发情况\"><a href=\"#通过-sar-查看系统的网络收发情况\" class=\"headerlink\" title=\"通过 sar 查看系统的网络收发情况\"></a>通过 sar 查看系统的网络收发情况</h3><p>上面确认了从网络接收的软中断入手，所以第一步应该要看下系统的网络接收情况</p>\n<h4 id=\"sar-的好处\"><a href=\"#sar-的好处\" class=\"headerlink\" title=\"sar 的好处\"></a>sar 的好处</h4><ul>\n<li>不仅可以观察网络收发的吞吐量（BPS，每秒收发的字节数）</li>\n<li>还可以观察网络收发的 PPS（每秒收发的网络帧数）</li>\n</ul>\n<h4 id=\"执行-sar-命令\"><a href=\"#执行-sar-命令\" class=\"headerlink\" title=\"执行 sar 命令\"></a>执行 sar 命令</h4><pre><code>sar \\-n DEV 1\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/1df3a32424e39160c72b67e29572077d.png\"></p>\n<ul>\n<li>第二列：IFACE 表示网卡</li>\n<li>第三、四列：rxpck&#x2F;s 和 txpck&#x2F;s 分别表示每秒接收、发送的网络帧数<strong>【PPS】</strong> </li>\n<li>第五、六列：rxkB&#x2F;s 和 txkB&#x2F;s 分别表示每秒接收、发送的千字节数<strong>【BPS】</strong></li>\n</ul>\n<h4 id=\"结果分析-1\"><a href=\"#结果分析-1\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h4><p>对网卡 <strong>ens33</strong> 来说</p>\n<ul>\n<li>每秒接收的网络帧数比较大，几乎达到 8w，而发送的网络帧数较小，只有接近 4w</li>\n<li>每秒接收的千字节数只有 4611 KB，发送的千字节数更小，只有 2314 KB</li>\n</ul>\n<p><strong>docker0</strong> 和 <strong>veth04076e3</strong></p>\n<ul>\n<li>数据跟 ens33 基本一致只是发送和接收相反，发送的数据较大而接收的数据较小</li>\n<li>这是 <strong>Linux 内部网桥转发</strong>导致的，暂且不用深究，只要知道这是系统把 ens33 收到的包转发给 Nginx 服务即可</li>\n</ul>\n<h4 id=\"异常点\"><a href=\"#异常点\" class=\"headerlink\" title=\"异常点\"></a>异常点</h4><ul>\n<li>前面说到是网络数据包接收软中断的问题，那就重点看 ens33</li>\n<li>接收的 PPS 达到 8w，但接收的 BPS 只有 5k 不到，<strong>网络帧</strong>看起来是比较小的</li>\n<li>4611 * 1024 &#x2F; 78694 &#x3D; 64 字节，说明平均每个网络帧只有 60 字节，这显然是很小的网络帧，也就是常说的<strong>小包问题</strong></li>\n</ul>\n<h4 id=\"灵魂拷问\"><a href=\"#灵魂拷问\" class=\"headerlink\" title=\"灵魂拷问\"></a>灵魂拷问</h4><p>如何知道这是一个什么样的网络帧，它又是从哪里发过来的呢？</p>\n<h3 id=\"通过-tcpdump-抓取网络包\"><a href=\"#通过-tcpdump-抓取网络包\" class=\"headerlink\" title=\"通过 tcpdump 抓取网络包\"></a>通过 tcpdump 抓取网络包</h3><h4 id=\"已知条件\"><a href=\"#已知条件\" class=\"headerlink\" title=\"已知条件\"></a>已知条件</h4><p>Nginx 监听在 <strong>80</strong> 端口， 它所提供的 HTTP 服务是基于 <strong>TCP</strong> 协议的</p>\n<h4 id=\"执行-tcpdump-命令\"><a href=\"#执行-tcpdump-命令\" class=\"headerlink\" title=\"执行 tcpdump 命令\"></a>执行 tcpdump 命令</h4><pre><code>tcpdump \\-i ens33 \\-n tcp port 80\n</code></pre>\n<ul>\n<li><strong>-i ens33：</strong> 只抓取 ens33 网卡</li>\n<li><strong>-n：</strong> 不解析协议名和主机名</li>\n<li><strong>tcp port 80：</strong> 表示只抓取 tcp 协议并且端口号为 80 的网络帧</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/614d90fef2c2c26301a5250ff2c480f6.png\"></p>\n<h4 id=\"172-20-72-59-52195-gt-172-20-72-58-80\"><a href=\"#172-20-72-59-52195-gt-172-20-72-58-80\" class=\"headerlink\" title=\"172.20.72.59.52195 &gt; 172.20.72.58.80\"></a>172.20.72.59.52195 &gt; 172.20.72.58.80</h4><ul>\n<li>表示网络帧从 172.20.72.59 的 52195 端口发 送到 172.20.72.58 的 80 端口</li>\n<li>也就是从运行 hping3 机器的 52195 端口发送网络帧， 目的为 Nginx 所在机器的 80 端口</li>\n</ul>\n<h4 id=\"Flags-S\"><a href=\"#Flags-S\" class=\"headerlink\" title=\"Flags [S]\"></a>Flags [S]</h4><p>表示这是一个 SYN 包</p>\n<h3 id=\"性能分析结果\"><a href=\"#性能分析结果\" class=\"headerlink\" title=\"性能分析结果\"></a>性能分析结果</h3><p>结合 <strong>sar</strong> 命令发现的 PPS 接近 4w 的现象，可以认为这就是从 172.20.72.59 这个地址发送过来的 <strong>SYN FLOOD 攻击</strong></p>\n<h4 id=\"解决-SYN-FLOOD-问题\"><a href=\"#解决-SYN-FLOOD-问题\" class=\"headerlink\" title=\"解决 SYN FLOOD 问题\"></a>解决 SYN FLOOD 问题</h4><p>从交换机或者硬件防火墙中<strong>封掉来源 IP</strong>，这样 SYN FLOOD 网络帧就不会发送到服务器中</p>\n<h3 id=\"后续的期待\"><a href=\"#后续的期待\" class=\"headerlink\" title=\"后续的期待\"></a>后续的期待</h3><p>至于 SYN FLOOD 的原理和更多解决思路在后面会讲到哦</p>\n<h2 id=\"分析的整体思路\"><a href=\"#分析的整体思路\" class=\"headerlink\" title=\"分析的整体思路\"></a>分析的整体思路</h2><ol>\n<li>系统出现卡顿，执行命令，响应也会变慢</li>\n<li>通过 <strong>top</strong> 查看系统资源情况</li>\n<li>发现 CPU 使用率<strong>（us 和 sy）</strong>均不高，平均负载适中，没有超 CPU 核数的运行状态的进程，也没有僵尸进程</li>\n<li>但是发现处理软中断的 CPU 占比<strong>（si）</strong>较高，在进程列表也可以看到软中断进程 CPU 使用率偏高，猜测是软中断导致系统变卡顿的主要原因</li>\n<li>通过 <strong>&#x2F;proc&#x2F;sorfirqs</strong> 查看软中断类型和变化频率，发现直接 cat 的话会打印 128 个核的信息，但只想要两个核的信息</li>\n<li>所以结合 <strong>awk</strong> 进行过滤，再通过 <strong>watch</strong> 命令可以动态输出查看结果</li>\n<li>发现有多个软中断类型在变化，重点是 <strong>NET_RX</strong> 变化频率超高，而且幅度也很大，它是<strong>网络数据包接收软中断</strong>，暂且认为它是问题根源</li>\n<li>既然跟网络有关系，可以先通过 <strong>sar</strong> 命令查看系统网络接收和发送的整体情况</li>\n<li>然后可以看到接收的 PPS 会比接收的 BPS 大很多，做下运算，发现网络帧会非常小，也就是常说的<strong>小包</strong>问题</li>\n<li>接下来，通过 <strong>tcpdump</strong> 抓取 80 端口的 tcp 协议网络包，会发现大量来自 VM2 发送的 SYN 包，结合 sar 命令，确认是 SYN FLOOD 攻击<br><a href=\"https://cloud.tencent.com/developer/article/1678685\">https://cloud.tencent.com/developer/article/1678685</a></li>\n</ol>\n","text":"软中断导致 CPU 使用率过高的案例前言软中断基本原理，可参考这篇博客：https://www.cnblogs.com/poloyy/p/13435519.ht...","permalink":"/post/LINUX/软中断导致 CPU 使用率过高的案例","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"CPU","slug":"CPU","count":5,"path":"api/categories/CPU.json"},{"name":"LINUX","slug":"CPU/LINUX","count":4,"path":"api/categories/CPU/LINUX.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"通过","slug":"通过","count":2,"path":"api/tags/通过.json"},{"name":"SYN","slug":"SYN","count":1,"path":"api/tags/SYN.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E4%B8%AD%E6%96%AD%E5%AF%BC%E8%87%B4-CPU-%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E7%9A%84%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">软中断导致 CPU 使用率过高的案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">中断</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">软中断</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E4%B8%AD%E6%96%AD%E9%A2%91%E7%8E%87%E8%BF%87%E9%AB%98%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">软中断频率过高案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">系统配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E4%B8%AA%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">三个工具</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">虚拟机关系</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87-docker-%E8%BF%90%E8%A1%8C%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">通过 docker 运行案例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87-curl-%E7%A1%AE%E8%AE%A4-Nginx-%E6%AD%A3%E5%B8%B8%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">通过 curl 确认 Nginx 正常启动</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87-hping3-%E6%A8%A1%E6%8B%9F-Nginx-%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">通过 hping3 模拟 Nginx 的客户端请求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E5%88%B0-VM1\"><span class=\"toc-text\">回到 VM1</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%93%8D%E5%BA%94%E5%8F%98%E6%85%A2\"><span class=\"toc-text\">分析系统为什么会响应变慢</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87-top-%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5\"><span class=\"toc-text\">通过 top 命令查看系统资源使用情况</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A1%AE%E8%AE%A4%E6%98%AF%E4%BB%80%E4%B9%88%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AF%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">确认是什么类型的软中断</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%99%E9%87%8C%E7%9A%84%E5%90%84%E7%B1%BB%E8%BD%AF%E4%B8%AD%E6%96%AD%E6%AC%A1%E6%95%B0%EF%BC%8C%E5%8F%88%E6%98%AF%E4%BB%80%E4%B9%88%E6%97%B6%E9%97%B4%E6%AE%B5%E9%87%8C%E7%9A%84%E6%AC%A1%E6%95%B0%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\">这里的各类软中断次数，又是什么时间段里的次数呢？</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87-watch-%E5%8A%A8%E6%80%81%E6%9F%A5%E7%9C%8B%E5%91%BD%E4%BB%A4%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">通过 watch 动态查看命令输出结果</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90\"><span class=\"toc-text\">结果分析</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87-sar-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BD%91%E7%BB%9C%E6%94%B6%E5%8F%91%E6%83%85%E5%86%B5\"><span class=\"toc-text\">通过 sar 查看系统的网络收发情况</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#sar-%E7%9A%84%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">sar 的好处</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C-sar-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">执行 sar 命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90-1\"><span class=\"toc-text\">结果分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E7%82%B9\"><span class=\"toc-text\">异常点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%81%B5%E9%AD%82%E6%8B%B7%E9%97%AE\"><span class=\"toc-text\">灵魂拷问</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87-tcpdump-%E6%8A%93%E5%8F%96%E7%BD%91%E7%BB%9C%E5%8C%85\"><span class=\"toc-text\">通过 tcpdump 抓取网络包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B7%B2%E7%9F%A5%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">已知条件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C-tcpdump-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">执行 tcpdump 命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#172-20-72-59-52195-gt-172-20-72-58-80\"><span class=\"toc-text\">172.20.72.59.52195 &gt; 172.20.72.58.80</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Flags-S\"><span class=\"toc-text\">Flags [S]</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">性能分析结果</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3-SYN-FLOOD-%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">解决 SYN FLOOD 问题</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%8E%E7%BB%AD%E7%9A%84%E6%9C%9F%E5%BE%85\"><span class=\"toc-text\">后续的期待</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90%E7%9A%84%E6%95%B4%E4%BD%93%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">分析的整体思路</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"深入理解“软中断”","uid":"f4563b96f26978111a4862bba321db8f","slug":"LINUX/深入理解“软中断”","date":"2022-02-02T19:27:00.000Z","updated":"2025-09-30T03:26:43.649Z","comments":true,"path":"api/articles/LINUX/深入理解“软中断”.json","keywords":"XuGuangSheng","cover":"/covers/bce1619d1231.jpg","text":"深入理解“软中断”前言 软中断（softirq）导致 CPU 使用率升高也是最常见的一种性能问题 所以软中断这个硬骨头必须啃下去！ 回忆下什么是中断 中断是系统...","permalink":"/post/LINUX/深入理解“软中断”","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"CPU","slug":"CPU","count":5,"path":"api/categories/CPU.json"},{"name":"LINUX","slug":"CPU/LINUX","count":4,"path":"api/categories/CPU/LINUX.json"}],"tags":[{"name":"软中断","slug":"软中断","count":1,"path":"api/tags/软中断.json"},{"name":"也就是","slug":"也就是","count":1,"path":"api/tags/也就是.json"},{"name":"上半部","slug":"上半部","count":1,"path":"api/tags/上半部.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"shell 语言","uid":"443ea60f9d53e9e33f4d61c5af59c5dc","slug":"LINUX/shell 语言","date":"2022-01-26T18:01:10.000Z","updated":"2025-09-30T03:26:37.714Z","comments":true,"path":"api/articles/LINUX/shell 语言.json","keywords":"XuGuangSheng","cover":"/covers/shell.jpg","text":"shell 语言 1. 简介 1.1. 什么是 shell 1.2. 什么是 shell 脚本 1.3. Shell 环境 1.4. 模式 2. 基本语法 2....","permalink":"/post/LINUX/shell 语言","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"23 mins."},"categories":[{"name":"shell","slug":"shell","count":2,"path":"api/categories/shell.json"},{"name":"LINUX","slug":"shell/LINUX","count":2,"path":"api/categories/shell/LINUX.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"demo","slug":"demo","count":1,"path":"api/tags/demo.json"},{"name":"true","slug":"true","count":2,"path":"api/tags/true.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}