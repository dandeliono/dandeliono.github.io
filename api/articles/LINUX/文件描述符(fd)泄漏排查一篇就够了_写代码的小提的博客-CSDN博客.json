{"title":"文件描述符(fd)泄漏排查一篇就够了_写代码的小提的博客-CSDN博客","uid":"fb884516282f9be59505de88d795cde5","slug":"LINUX/文件描述符(fd)泄漏排查一篇就够了_写代码的小提的博客-CSDN博客","date":"2022-12-01T11:42:30.000Z","updated":"2025-09-30T03:26:43.405Z","comments":true,"path":"api/articles/LINUX/文件描述符(fd)泄漏排查一篇就够了_写代码的小提的博客-CSDN博客.json","keywords":"XuGuangSheng","cover":"/covers/fd-csdn.jpg","content":"<h1 id=\"文件描述符-fd-泄漏排查一篇就够了-写代码的小提的博客-CSDN博客\"><a href=\"#文件描述符-fd-泄漏排查一篇就够了-写代码的小提的博客-CSDN博客\" class=\"headerlink\" title=\"文件描述符(fd)泄漏排查一篇就够了_写代码的小提的博客-CSDN博客\"></a>文件描述符(fd)泄漏排查一篇就够了_写代码的小提的博客-CSDN博客</h1><p>生产多次遇到<a href=\"https://so.csdn.net/so/search?q=%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6&spm=1001.2101.3001.7020\">文件描述符</a>（fd）泄露相关的问题， 文件描述符泄漏一般引起<br>的现象是文件句柄数（封面图）&#x2F;tcp alloc（上图）增长。文章分为两部分介绍文件描述符相关内容，第一部分介绍文件描述基础知识，第二部分通过实际案例进行剖析。<br><img src=\"https://img-blog.csdnimg.cn/20190913185327257.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0E5NjE4MjEx,size_16,color_FFFFFF,t_70\"></p>\n<p>一. 文件描述符相关基础知识</p>\n<ol>\n<li>什么是文件描述符？<br>内核利用文件描述符来访问文件, 打开现存文件或新建文件（建立）时，内核会<br>返回一个文件描述符，读写文件也需要使用文件描述符来指定待读写的文件。所有<br>执行I&#x2F;O操作(包括网络socket操作)的系统调用都通过文件描述符<br>​</li>\n<li>最大文件描述符介绍<ol>\n<li>系统最大文件描述符限制<br>sysctl -a | grep fs.file-max （查看系统最大描述符）<br>echo “fs.file-max&#x3D;1610270” &gt;&gt; &#x2F;etc&#x2F;sysctl.conf（修改最大描述符）<br>sysctl -p（立即生效）</li>\n<li>用户级最大文件描述限制<br>ulimit -n （查看用户最大描述符）<br>echo “* hard nofile 65535” &gt;&gt; &#x2F;etc&#x2F;security&#x2F;limits.conf<br>echo “* soft nofile 65535” &gt;&gt; &#x2F;etc&#x2F;security&#x2F;limits.conf<br>_代表所有用户，支持具体用户（优先级高，不受_影响）。文件修改即生效，退出<br>或打开新终端执行ulimit -n即看到修改效果</li>\n<li>具体某个进程（PID）最大描述符<br>通过cat &#x2F;proc&#x2F;PID&#x2F;limits | grep “Max open files”<br>Limit Soft Limit Hard Limit Units<br>Max open files 65536 65536 files<br>进程最大描述符受限与系统／用户级，以及进程本身相关代码程序限制，比如下面<br>Golang代码将进程打开的最大描述符限制为10<br>var rLimit syscall.Rlimit<br>rLimit.Cur &#x3D; 10<br>if err :&#x3D; syscall.Setrlimit(syscall.RLIMIT_NOFILE, &amp;rLimit); err !&#x3D; nil {<br>panic(err)<br>}</li>\n</ol>\n</li>\n</ol>\n<p>二. 文件描述符泄漏的实际案例</p>\n<p>某个周末，ops同学在运维群反馈某核心业务应用文件描述符以及tcp alloc非常高，导致服务不可用（这块监控不到位）。业务架构同学为了排查相关问题具体原因保留了一台问题服务，当然咯，闲着无事，参与线上故障排查。从监控图看到文件描述符不断&#x2F;tcp alloc 不断增长</p>\n<ol>\n<li>首先考虑是否由于Socket连接建立以后未close导致，这类也是最容易排查，netstat显示的tcp连接数正常</li>\n</ol>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -<span class=\"built_in\">tan</span>|awk <span class=\"string\">&#x27;$1~/tcp/&#123;print $NF&#125;&#x27;</span>|<span class=\"built_in\">sort</span>|uniq -c|<span class=\"built_in\">sort</span> -nr</span><br><span class=\"line\"><span class=\"number\">156</span>  TIME_WAIT</span><br><span class=\"line\"><span class=\"number\">141</span>  FIN_WAIT2</span><br><span class=\"line\"><span class=\"number\">80</span>  ESTABLISHED</span><br><span class=\"line\"><span class=\"number\">10</span>  LISTEN</span><br><span class=\"line\"><span class=\"number\">3</span> CLOSE_WAIT</span><br><span class=\"line\"><span class=\"number\">2</span> LAST_ACK</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>ss -s 查看大量处于closed 状态</p>\n</li>\n<li><p>通过lsof 查看tomcat 进程（进程4730）打开的文件描述符相关详细信息，lsof -p 4730。大量Prtocol：TCP异常描述符如下图所示：<br><img src=\"https://img-blog.csdnimg.cn/20190913185816971.png\"></p>\n</li>\n<li><p>通过lsof 相关信息我们找不出具体由于某原因导致的，我们通过strace查看系统调用， 查看fd泄漏的具体原因 （抓取5分钟）<br>strace -f -p 4730 -T -tt -o &#x2F;home&#x2F;futi&#x2F;strace_4730.log<br>-tt 在每行输出的前面，显示毫秒级别的时间<br>-T 显示每次系统调用所花费的时间<br>-v 对于某些相关调用，把完整的环境变量，文件stat结构等打出来。<br>-f 跟踪目标进程，以及目标进程创建的所有子进程<br>-e 控制要跟踪的事件和跟踪行为,比如指定要跟踪的系统调用名称<br>-o 把strace的输出单独写到指定的文件<br>-s 当系统调用的某个参数是字符串时，最多输出指定长度的内容，默认是32个字节<br>-p 指定要跟踪的进程pid, 要同时跟踪多个pid, 重复多次-p选项即可。<br>tomcate多线程应用，我们需要追踪子进程运行情况，所以-f，其它参数大家看<br>解析应该可以理解</p>\n</li>\n<li><p>&#x2F;home&#x2F;futi&#x2F;strace_4730.log，找到strace抓取这段时间内最近泄漏的fd进行分析，通过lsof -d 49959 ，可以看到出现Prtocol：TCP异常情况。下面截一小部分内容前面有大量对fd为49959打开，关闭等操作。但从4783线程操作这个fd以后strace抓取的内容未有再使用49959这个fd，且fd 不断增大，有使用大于49959的fd，所以我们可以断定是这个fd 在这块出了问题。<br><img src=\"https://img-blog.csdnimg.cn/20190913190054481.png\"></p>\n</li>\n<li><p>从上面似乎我们找不到根本原因，《Linux环境编程：从应用到内核》有这么一段：在多线程下，可能会在fcntl调用前，就已经fork出子进程。从这点出发我们查看tomcat线程ID为4783在执行fcntl前做了哪些操作，可以看出4783线程写入了一条ERROR日志<br><img src=\"https://img-blog.csdnimg.cn/20190913185433568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0E5NjE4MjEx,size_16,color_FFFFFF,t_70\"><br>7. lsof -d 369 可以找到fd为369对应打开的文件：&#x2F;data&#x2F;applogs&#x2F;cat&#x2F;cat_20190722.log查看具体log 如下，由于连接Cat失败导致fd泄漏（由于cat上线很久了，忽略了查看cat 日志）</p>\n<p><code>[07-21 23:13:21.204] [ERROR] [ChannelManager] Error when try connecting to /host:2280</code><img src=\"https://img-blog.csdnimg.cn/20190913185636797.png\"></p>\n<p>strace + lsof 能解决大部分fd泄漏的问题, 感兴趣可以公众号，定期更新后端技术<br><img src=\"https://img-blog.csdnimg.cn/20190913190155379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0E5NjE4MjEx,size_16,color_FFFFFF,t_70\"></p>\n</li>\n</ol>\n","text":"文件描述符(fd)泄漏排查一篇就够了_写代码的小提的博客-CSDN博客生产多次遇到文件描述符（fd）泄露相关的问题， 文件描述符泄漏一般引起的现象是文件句柄数（...","permalink":"/post/LINUX/文件描述符(fd)泄漏排查一篇就够了_写代码的小提的博客-CSDN博客","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"tcp","slug":"tcp","count":1,"path":"api/categories/tcp.json"},{"name":"LINUX","slug":"tcp/LINUX","count":1,"path":"api/categories/tcp/LINUX.json"}],"tags":[{"name":"strace","slug":"strace","count":2,"path":"api/tags/strace.json"},{"name":"lsof","slug":"lsof","count":1,"path":"api/tags/lsof.json"},{"name":"alloc","slug":"alloc","count":1,"path":"api/tags/alloc.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6-fd-%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86-%E5%86%99%E4%BB%A3%E7%A0%81%E7%9A%84%E5%B0%8F%E6%8F%90%E7%9A%84%E5%8D%9A%E5%AE%A2-CSDN%E5%8D%9A%E5%AE%A2\"><span class=\"toc-text\">文件描述符(fd)泄漏排查一篇就够了_写代码的小提的博客-CSDN博客</span></a></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"strace 常用操作","uid":"a9faca4b916382c99b92d1b36024956a","slug":"LINUX/strace 常用操作","date":"2022-12-07T00:21:02.000Z","updated":"2025-09-30T03:26:38.852Z","comments":true,"path":"api/articles/LINUX/strace 常用操作.json","keywords":"XuGuangSheng","cover":"/covers/strace.jpg","text":"strace 常用操作2019-03-30 前言¶strace 可以用来查看/记录程序运行过程中调用的 系统调用 以及接收到的进程信号（signal）， 对于我...","permalink":"/post/LINUX/strace 常用操作","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"trace","slug":"trace","count":1,"path":"api/categories/trace.json"},{"name":"LINUX","slug":"trace/LINUX","count":1,"path":"api/categories/trace/LINUX.json"}],"tags":[{"name":"strace","slug":"strace","count":2,"path":"api/tags/strace.json"},{"name":"man","slug":"man","count":1,"path":"api/tags/man.json"},{"name":"signal","slug":"signal","count":1,"path":"api/tags/signal.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Spring-SpringBoot-MyBatis","uid":"bffbc184e1f43c5ae0809f3a56168a65","slug":"JAVA/Spring-SpringBoot-MyBatis","date":"2022-11-23T10:41:09.000Z","updated":"2025-09-30T03:26:20.311Z","comments":true,"path":"api/articles/JAVA/Spring-SpringBoot-MyBatis.json","keywords":"XuGuangSheng","cover":"/covers/spring-springboot-mybatis.jpg","text":"Spring-SpringBoot-MyBatis本文将全局介绍 MyBatis 的整体架构。 参考：《MyBatis技术内幕》 MyBatis整体架构 基础支...","permalink":"/post/JAVA/Spring-SpringBoot-MyBatis","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"24 mins."},"categories":[{"name":"Spring","slug":"Spring","count":4,"path":"api/categories/Spring.json"},{"name":"JAVA","slug":"Spring/JAVA","count":4,"path":"api/categories/Spring/JAVA.json"}],"tags":[{"name":"MyBatis","slug":"MyBatis","count":1,"path":"api/tags/MyBatis.json"},{"name":"SpringBoot","slug":"SpringBoot","count":1,"path":"api/tags/SpringBoot.json"},{"name":"spring","slug":"spring","count":4,"path":"api/tags/spring.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}