{"title":"如何优雅地记录操作日志？","uid":"bec62911910e4566d1eb24b159beea23","slug":"LINUX/如何优雅地记录操作日志？","date":"2021-11-03T14:13:48.000Z","updated":"2025-09-30T03:26:41.976Z","comments":true,"path":"api/articles/LINUX/如何优雅地记录操作日志？.json","keywords":"XuGuangSheng","cover":"/covers/8566a8fc21ff.jpg","content":"<h1 id=\"如何优雅地记录操作日志？\"><a href=\"#如何优雅地记录操作日志？\" class=\"headerlink\" title=\"如何优雅地记录操作日志？\"></a>如何优雅地记录操作日志？</h1><p>操作日志几乎存在于每个系统中，而这些系统都有记录操作日志的一套 API。操作日志和系统日志不一样，操作日志必须要做到简单易懂。所以如何让操作日志不和业务逻辑耦合，如何让操作日志的内容易于理解，让操作日志的接入更加简单？上面这些都是本文要回答的问题，主要围绕着如何 “优雅” 地记录操作日志展开描述。</p>\n<h2 id=\"1-操作日志的使用场景\"><a href=\"#1-操作日志的使用场景\" class=\"headerlink\" title=\"1. 操作日志的使用场景\"></a>1. 操作日志的使用场景</h2><p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/19e2c8c94f379833b38b41ca4d759bdb.png\"></p>\n<p>例子</p>\n<p><strong>系统日志和操作日志的区别</strong></p>\n<p><strong>系统日志</strong>：系统日志主要是为开发排查问题提供依据，一般打印在日志文件中；系统日志的可读性要求没那么高，日志中会包含代码的信息，比如在某个类的某一行打印了一个日志。</p>\n<p><strong>操作日志</strong>：主要是对某个对象进行新增操作或者修改操作后记录下这个新增或者修改，操作日志要求可读性比较强，因为它主要是给用户看的，比如订单的物流信息，用户需要知道在什么时间发生了什么事情。再比如，客服对工单的处理记录信息。</p>\n<p>操作日志的记录格式大概分为下面几种： * 单纯的文字记录，比如：2021-09-16 10:00 订单创建。 * 简单的动态的文本记录，比如：2021-09-16 10:00 订单创建，订单号：NO.11089999，其中涉及变量订单号 “NO.11089999”。 * 修改类型的文本，包含修改前和修改后的值，比如：2021-09-16 10:00 用户小明修改了订单的配送地址：从 “金灿灿小区” 修改到 “银盏盏小区” ，其中涉及变量配送的原地址“金灿灿小区” 和新地址“银盏盏小区”。 * 修改表单，一次会修改多个字段。</p>\n<h2 id=\"2-实现方式\"><a href=\"#2-实现方式\" class=\"headerlink\" title=\"2. 实现方式\"></a>2. 实现方式</h2><h3 id=\"2-1-使用-Canal-监听数据库记录操作日志\"><a href=\"#2-1-使用-Canal-监听数据库记录操作日志\" class=\"headerlink\" title=\"2.1 使用 Canal 监听数据库记录操作日志\"></a>2.1 使用 Canal 监听数据库记录操作日志</h3><p>Canal 是一款基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费的开源组件，通过采用监听数据库 Binlog 的方式，这样可以从底层知道是哪些数据做了修改，然后根据更改的数据记录操作日志。</p>\n<p>这种方式的优点是和业务逻辑完全分离。缺点也很明显，局限性太高，只能针对数据库的更改做操作日志记录，如果修改涉及到其他团队的 RPC 的调用，就没办法监听数据库了，举个例子：给用户发送通知，通知服务一般都是公司内部的公共组件，这时候只能在调用 RPC 的时候手工记录发送通知的操作日志了。</p>\n<h3 id=\"2-2-通过日志文件的方式记录\"><a href=\"#2-2-通过日志文件的方式记录\" class=\"headerlink\" title=\"2.2 通过日志文件的方式记录\"></a>2.2 通过日志文件的方式记录</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log.info(&quot;订单创建&quot;)</span><br><span class=\"line\">log.info(&quot;订单已经创建，订单编号:&#123;&#125;&quot;, orderNo)</span><br><span class=\"line\">log.info(&quot;修改了订单的配送地址：从“&#123;&#125;”修改到“&#123;&#125;”， &quot;金灿灿小区&quot;, &quot;银盏盏小区&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>这种方式的操作记录需要解决三个问题。</p>\n<p><strong>问题一：操作人如何记录</strong></p>\n<p>借助 SLF4J 中的 MDC 工具类，把操作人放在日志中，然后在日志中统一打印出来。首先在用户的拦截器中把用户的标识 Put 到 MDC 中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class UserInterceptor extends HandlerInterceptorAdapter &#123;</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    String userNo = getUserNo(request);</span><br><span class=\"line\">    </span><br><span class=\"line\">    MDC.put(&quot;userId&quot;, userNo);</span><br><span class=\"line\">    return super.preHandle(request, response, handler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private String getUserNo(HttpServletRequest request) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return null;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其次，把 userId 格式化到日志中，使用 %X{userId} 可以取到 MDC 中用户标识。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pattern&gt;&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %t %-5level %X&#123;userId&#125; %logger&#123;30&#125;.%method:%L - %msg%n&quot;&lt;/pattern&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题二：操作日志如何和系统日志区分开</strong></p>\n<p>通过配置 Log 的配置文件，把有关操作日志的 Log 单独放到一日志文件中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不同业务日志记录到不同的文件</span><br><span class=\"line\">&lt;appender name=&quot;businessLogAppender&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class=\"line\">    &lt;File&gt;logs/business.log&lt;/File&gt;</span><br><span class=\"line\">    &lt;append&gt;true&lt;/append&gt;</span><br><span class=\"line\">    &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class=\"line\">        &lt;level&gt;INFO&lt;/level&gt;</span><br><span class=\"line\">        &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class=\"line\">        &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\">    &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class=\"line\">        &lt;fileNamePattern&gt;logs/业务A.%d.%i.log&lt;/fileNamePattern&gt;</span><br><span class=\"line\">        &lt;maxHistory&gt;90&lt;/maxHistory&gt;</span><br><span class=\"line\">        &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class=\"line\">            &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;</span><br><span class=\"line\">        &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class=\"line\">    &lt;/rollingPolicy&gt;</span><br><span class=\"line\">    &lt;encoder&gt;</span><br><span class=\"line\">        &lt;pattern&gt;&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %t %-5level %X&#123;userId&#125; %logger&#123;30&#125;.%method:%L - %msg%n&quot;&lt;/pattern&gt;</span><br><span class=\"line\">        &lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class=\"line\">    &lt;/encoder&gt;</span><br><span class=\"line\">&lt;/appender&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">&lt;logger name=&quot;businessLog&quot; additivity=&quot;false&quot; level=&quot;INFO&quot;&gt;</span><br><span class=\"line\">    &lt;appender-ref ref=&quot;businessLogAppender&quot;/&gt;</span><br><span class=\"line\">&lt;/logger&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后在 Java 代码中单独的记录业务日志。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">private final Logger businessLog = LoggerFactory.getLogger(&quot;businessLog&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">businessLog.info(&quot;修改了配送地址&quot;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>问题三：如何生成可读懂的日志文案</strong></p>\n<p>可以采用 LogUtil 的方式，也可以采用切面的方式生成日志模板，后续内容将会进行介绍。这样就可以把日志单独保存在一个文件中，然后通过日志收集可以把日志保存在 Elasticsearch 或者数据库中，接下来看下如何生成可读的操作日志。</p>\n<h3 id=\"2-3-通过-LogUtil-的方式记录日志\"><a href=\"#2-3-通过-LogUtil-的方式记录日志\" class=\"headerlink\" title=\"2.3 通过 LogUtil 的方式记录日志\"></a>2.3 通过 LogUtil 的方式记录日志</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LogUtil.log(orderNo, &quot;订单创建&quot;, &quot;小明&quot;)模板</span><br><span class=\"line\">LogUtil.log(orderNo, &quot;订单创建，订单号&quot;+&quot;NO.11089999&quot;,  &quot;小明&quot;)</span><br><span class=\"line\">String template = &quot;用户%s修改了订单的配送地址：从“%s”修改到“%s”&quot;</span><br><span class=\"line\">LogUtil.log(orderNo, String.format(tempalte, &quot;小明&quot;, &quot;金灿灿小区&quot;, &quot;银盏盏小区&quot;),  &quot;小明&quot;)</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这里解释下为什么记录操作日志的时候都绑定了一个 OrderNo，因为操作日志记录的是：某一个 “时间”“谁” 对“什么”做了什么 “事情”。当查询业务的操作日志的时候，会查询针对这个订单的的所有操作，所以代码中加上了 OrderNo，记录操作日志的时候需要记录下操作人，所以传了操作人“小明” 进来。</p></blockquote>\n<p>上面看起来问题并不大，在修改地址的业务逻辑方法中使用一行代码记录了操作日志，接下来再看一个更复杂的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private OnesIssueDO updateAddress(updateDeliveryRequest request) &#123;</span><br><span class=\"line\">    DeliveryOrder deliveryOrder = deliveryQueryService.queryOldAddress(request.getDeliveryOrderNo());</span><br><span class=\"line\">    </span><br><span class=\"line\">    doUpdate(request);</span><br><span class=\"line\">    String logContent = getLogContent(request, deliveryOrder);</span><br><span class=\"line\">    LogUtils.logRecord(request.getOrderNo(), logContent, request.getOperator);</span><br><span class=\"line\">    return onesIssueDO;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private String getLogContent(updateDeliveryRequest request, DeliveryOrder deliveryOrder) &#123;</span><br><span class=\"line\">    String template = &quot;用户%s修改了订单的配送地址：从“%s”修改到“%s”&quot;;</span><br><span class=\"line\">    return String.format(tempalte, request.getUserName(), deliveryOrder.getAddress(), request.getAddress);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到上面的例子使用了两个方法代码，外加一个 getLogContent 的函数实现了操作日志的记录。当业务变得复杂后，记录操作日志放在业务代码中会导致业务的逻辑比较繁杂，最后导致 LogUtils.logRecord() 方法的调用存在于很多业务的代码中，而且类似 getLogContent() 这样的方法也散落在各个业务类中，对于代码的可读性和可维护性来说是一个灾难。下面介绍下如何避免这个灾难。</p>\n<h3 id=\"2-4-方法注解实现操作日志\"><a href=\"#2-4-方法注解实现操作日志\" class=\"headerlink\" title=\"2.4 方法注解实现操作日志\"></a>2.4 方法注解实现操作日志</h3><p>为了解决上面问题，一般采用 AOP 的方式记录日志，让操作日志和业务逻辑解耦，接下来看一个简单的 AOP 日志的例子。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@LogRecord(content=&quot;修改了配送地址&quot;)</span><br><span class=\"line\">public void modifyAddress(updateDeliveryRequest request)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    doUpdate(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以在注解的操作日志上记录固定文案，这样业务逻辑和业务代码可以做到解耦，让我们的业务代码变得纯净起来。可能有同学注意到，上面的方式虽然解耦了操作日志的代码，但是记录的文案并不符合我们的预期，文案是静态的，没有包含动态的文案，因为我们需要记录的操作日志是： 用户 %s 修改了订单的配送地址，从 “%s” 修改到“%s”。接下来，我们介绍一下如何优雅地使用 AOP 生成动态的操作日志。</p>\n<h2 id=\"3-优雅地支持-AOP-生成动态的操作日志\"><a href=\"#3-优雅地支持-AOP-生成动态的操作日志\" class=\"headerlink\" title=\"3. 优雅地支持 AOP 生成动态的操作日志\"></a>3. 优雅地支持 AOP 生成动态的操作日志</h2><h3 id=\"3-1-动态模板\"><a href=\"#3-1-动态模板\" class=\"headerlink\" title=\"3.1 动态模板\"></a>3.1 动态模板</h3><p>一提到动态模板，就会涉及到让变量通过占位符的方式解析模板，从而达到通过注解记录操作日志的目的。模板解析的方式有很多种，这里使用了 SpEL（Spring Expression Language，Spring 表达式语言）来实现。我们可以先写下期望的记录日志的方式，然后再看下能否实现这样的功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@LogRecord(content = &quot;修改了订单的配送地址：从“#oldAddress”, 修改到“#request.address”&quot;)</span><br><span class=\"line\">public void modifyAddress(updateDeliveryRequest request, String oldAddress)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    doUpdate(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过 SpEL 表达式引用方法上的参数，可以让变量填充到模板中达到动态的操作日志文本内容。 但是现在还有几个问题需要解决： * 操作日志需要知道是哪个操作人修改的订单配送地址。 * 修改订单配送地址的操作日志需要绑定在配送的订单上，从而可以根据配送订单号查询出对这个配送订单的所有操作。 * 为了在注解上记录之前的配送地址是什么，在方法签名上添加了一个和业务无关的 oldAddress 的变量，这样就不优雅了。</p>\n<p>为了解决前两个问题，我们需要把期望的操作日志使用形式改成下面的方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@LogRecord(</span><br><span class=\"line\">     content = &quot;修改了订单的配送地址：从“#oldAddress”, 修改到“#request.address”&quot;,</span><br><span class=\"line\">     operator = &quot;#request.userName&quot;, bizNo=&quot;#request.deliveryOrderNo&quot;)</span><br><span class=\"line\">public void modifyAddress(updateDeliveryRequest request, String oldAddress)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    doUpdate(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改后的代码在注解上添加两个参数，一个是操作人，一个是操作日志需要绑定的对象。但是，在普通的 Web 应用中用户信息都是保存在一个线程上下文的静态方法中，所以 operator 一般是这样的写法（假定获取当前登陆用户的方式是 UserContext.getCurrentUser()）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">operator = &quot;#&#123;T(com.meituan.user.UserContext).getCurrentUser()&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话，每个 @LogRecord 的注解上的操作人都是这么长一串。为了避免过多的重复代码，我们可以把注解上的 operator 参数设置为非必填，这样用户可以填写操作人。但是，如果用户不填写我们就取 UserContext 的 user（下文会介绍如何取 user ）。最后，最简单的日志变成了下面的形式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@LogRecord(content = &quot;修改了订单的配送地址：从“#oldAddress”, 修改到“#request.address”&quot;, </span><br><span class=\"line\">           bizNo=&quot;#request.deliveryOrderNo&quot;)</span><br><span class=\"line\">public void modifyAddress(updateDeliveryRequest request, String oldAddress)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    doUpdate(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们需要解决第三个问题：为了记录业务操作记录添加了一个 oldAddress 变量，不管怎么样这都不是一个好的实现方式，所以接下来，我们需要把 oldAddress 变量从修改地址的方法签名上去掉。但是操作日志确实需要 oldAddress 变量，怎么办呢？</p>\n<p>要么和产品经理 PK 一下，让产品经理把文案从 “修改了订单的配送地址：从 xx 修改到 yy” 改为 “修改了订单的配送地址为：yy”。但是从用户体验上来看，第一种文案更人性化一些，显然我们不会 PK 成功的。那么我们就必须要把这个 oldAddress 查询出来然后供操作日志使用了。还有一种解决办法是：把这个参数放到操作日志的线程上下文中，供注解上的模板使用。我们按照这个思路再改下操作日志的实现代码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@LogRecord(content = &quot;修改了订单的配送地址：从“#oldAddress”, 修改到“#request.address”&quot;,</span><br><span class=\"line\">        bizNo=&quot;#request.deliveryOrderNo&quot;)</span><br><span class=\"line\">public void modifyAddress(updateDeliveryRequest request)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    LogRecordContext.putVariable(&quot;oldAddress&quot;, DeliveryService.queryOldAddress(request.getDeliveryOrderNo()));</span><br><span class=\"line\">    </span><br><span class=\"line\">    doUpdate(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候可以看到，LogRecordContext 解决了操作日志模板上使用方法参数以外变量的问题，同时避免了为了记录操作日志修改方法签名的设计。虽然已经比之前的代码好了些，但是依然需要在业务代码里面加了一行业务逻辑无关的代码，如果有 “强迫症” 的同学还可以继续往下看，接下来我们会讲解自定义函数的解决方案。下面再看另一个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@LogRecord(content = &quot;修改了订单的配送员：从“#oldDeliveryUserId”, 修改到“#request.userId”&quot;,</span><br><span class=\"line\">        bizNo=&quot;#request.deliveryOrderNo&quot;)</span><br><span class=\"line\">public void modifyAddress(updateDeliveryRequest request)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    LogRecordContext.putVariable(&quot;oldDeliveryUserId&quot;, DeliveryService.queryOldDeliveryUserId(request.getDeliveryOrderNo()));</span><br><span class=\"line\">    </span><br><span class=\"line\">    doUpdate(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个操作日志的模板最后记录的内容是这样的格式：修改了订单的配送员：从 “10090”，修改到 “10099”，显然用户看到这样的操作日志是不明白的。用户对于用户 ID 是 10090 还是 10099 并不了解，用户期望看到的是：修改了订单的配送员：从 “张三（18910008888）”，修改到 “小明（13910006666）”。用户关心的是配送员的姓名和电话。但是我们方法中传递的参数只有配送员的 ID，没有配送员的姓名可电话。我们可以通过上面的方法，把用户的姓名和电话查询出来，然后通过 LogRecordContext 实现。</p>\n<p>但是，“强迫症” 是不期望操作日志的代码嵌入在业务逻辑中的。接下来，我们考虑另一种实现方式：自定义函数。如果我们可以通过自定义函数把用户 ID 转换为用户姓名和电话，那么就能解决这一问题，按照这个思路，我们把模板修改为下面的形式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@LogRecord(content = &quot;修改了订单的配送员：从“&#123;deliveryUser&#123;#oldDeliveryUserId&#125;&#125;”, 修改到“&#123;deveryUser&#123;#request.userId&#125;&#125;”&quot;,</span><br><span class=\"line\">        bizNo=&quot;#request.deliveryOrderNo&quot;)</span><br><span class=\"line\">public void modifyAddress(updateDeliveryRequest request)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    LogRecordContext.putVariable(&quot;oldDeliveryUserId&quot;, DeliveryService.queryOldDeliveryUserId(request.getDeliveryOrderNo()));</span><br><span class=\"line\">    </span><br><span class=\"line\">    doUpdate(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中 deliveryUser 是自定义函数，使用大括号把 Spring 的 SpEL 表达式包裹起来，这样做的好处：一是把 SpEL（Spring Expression Language，Spring 表达式语言）和自定义函数区分开便于解析；二是如果模板中不需要 SpEL 表达式解析可以容易的识别出来，减少 SpEL 的解析提高性能。这时候我们发现上面代码还可以优化成下面的形式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@LogRecord(content = &quot;修改了订单的配送员：从“&#123;queryOldUser&#123;#request.deliveryOrderNo()&#125;&#125;”, 修改到“&#123;deveryUser&#123;#request.userId&#125;&#125;”&quot;,</span><br><span class=\"line\">        bizNo=&quot;#request.deliveryOrderNo&quot;)</span><br><span class=\"line\">public void modifyAddress(updateDeliveryRequest request)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    doUpdate(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就不需要在 modifyAddress 方法中通过 LogRecordContext.putVariable() 设置老的快递员了，通过直接新加一个自定义函数 queryOldUser() 参数把派送订单传递进去，就能查到之前的配送人了，只需要让方法的解析在 modifyAddress() 方法执行之前运行。这样的话，我们让业务代码又变得纯净了起来，同时也让 “强迫症” 不再感到难受了。</p>\n<h2 id=\"4-代码实现解析\"><a href=\"#4-代码实现解析\" class=\"headerlink\" title=\"4. 代码实现解析\"></a>4. 代码实现解析</h2><h3 id=\"4-1-代码结构\"><a href=\"#4-1-代码结构\" class=\"headerlink\" title=\"4.1 代码结构\"></a>4.1 代码结构</h3><p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/79d10e58ddf22fd865bd7ffa2fd24dab.png\"></p>\n<p>上面的操作日志主要是通过一个 AOP 拦截器实现的，整体主要分为 AOP 模块、日志解析模块、日志保存模块、Starter 模块；组件提供了 4 个扩展点，分别是：自定义函数、默认处理人、业务保存和查询；业务可以根据自己的业务特性定制符合自己业务的逻辑。</p>\n<h3 id=\"4-2-模块介绍\"><a href=\"#4-2-模块介绍\" class=\"headerlink\" title=\"4.2 模块介绍\"></a>4.2 模块介绍</h3><p>有了上面的分析，已经得出一种我们期望的操作日志记录的方式，那么接下来看看如何实现上面的逻辑。实现主要分为下面几个步骤： * AOP 拦截逻辑 * 解析逻辑 * 模板解析 * LogContext 逻辑 * 默认的 operator 逻辑 * 自定义函数逻辑 * 默认的日志持久化逻辑 * Starter 封装逻辑</p>\n<h4 id=\"4-2-1-AOP-拦截逻辑\"><a href=\"#4-2-1-AOP-拦截逻辑\" class=\"headerlink\" title=\"4.2.1 AOP 拦截逻辑\"></a>4.2.1 AOP 拦截逻辑</h4><p>这块逻辑主要是一个拦截器，针对 @LogRecord 注解分析出需要记录的操作日志，然后把操作日志持久化，这里把注解命名为 @LogRecordAnnotation。接下来，我们看下注解的定义：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Inherited</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">public @interface LogRecordAnnotation &#123;</span><br><span class=\"line\">    String success();</span><br><span class=\"line\"></span><br><span class=\"line\">    String fail() default &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String operator() default &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String bizNo();</span><br><span class=\"line\"></span><br><span class=\"line\">    String category() default &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String detail() default &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String condition() default &quot;&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注解中除了上面提到参数外，还增加了 fail、category、detail、condition 等参数，这几个参数是为了满足特定的场景，后面还会给出具体的例子。</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>描述</th>\n<th>是否必填</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>success</td>\n<td>操作日志的文本模板</td>\n<td>是</td>\n</tr>\n<tr>\n<td>fail</td>\n<td>操作日志失败的文本版本</td>\n<td>否</td>\n</tr>\n<tr>\n<td>operator</td>\n<td>操作日志的执行人</td>\n<td>否</td>\n</tr>\n<tr>\n<td>bizNo</td>\n<td>操作日志绑定的业务对象标识</td>\n<td>是</td>\n</tr>\n<tr>\n<td>category</td>\n<td>操作日志的种类</td>\n<td>否</td>\n</tr>\n<tr>\n<td>detail</td>\n<td>扩展参数，记录操作日志的修改详情</td>\n<td>否</td>\n</tr>\n<tr>\n<td>condition</td>\n<td>记录日志的条件</td>\n<td>否</td>\n</tr>\n</tbody></table>\n<p>为了保持简单，组件的必填参数就两个。业务中的 AOP 逻辑大部分是使用 @Aspect 注解实现的，但是基于注解的 AOP 在 Spring boot 1.5 中兼容性是有问题的，组件为了兼容 Spring boot1.5 的版本我们手工实现 Spring 的 AOP 逻辑。</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/9f7fac70f0ac066f4669b481f77b6026.png\"></p>\n<p>切面选择 <code>AbstractBeanFactoryPointcutAdvisor</code> 实现，切点是通过 <code>StaticMethodMatcherPointcut</code> 匹配包含 <code>LogRecordAnnotation</code> 注解的方法。通过实现 <code>MethodInterceptor</code> 接口实现操作日志的增强逻辑。</p>\n<p>下面是拦截器的切点逻辑：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LogRecordPointcut extends StaticMethodMatcherPointcut implements Serializable &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private LogRecordOperationSource logRecordOperationSource;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean matches(@NonNull Method method, @NonNull Class&lt;?&gt; targetClass) &#123;</span><br><span class=\"line\">          </span><br><span class=\"line\">        return !CollectionUtils.isEmpty(logRecordOperationSource.computeLogRecordOperations(method, targetClass));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    void setLogRecordOperationSource(LogRecordOperationSource logRecordOperationSource) &#123;</span><br><span class=\"line\">        this.logRecordOperationSource = logRecordOperationSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>切面的增强逻辑主要代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public Object invoke(MethodInvocation invocation) throws Throwable &#123;</span><br><span class=\"line\">    Method method = invocation.getMethod();</span><br><span class=\"line\">    </span><br><span class=\"line\">    return execute(invocation, invocation.getThis(), method, invocation.getArguments());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private Object execute(MethodInvocation invoker, Object target, Method method, Object[] args) throws Throwable &#123;</span><br><span class=\"line\">    Class&lt;?&gt; targetClass = getTargetClass(target);</span><br><span class=\"line\">    Object ret = null;</span><br><span class=\"line\">    MethodExecuteResult methodExecuteResult = new MethodExecuteResult(true, null, &quot;&quot;);</span><br><span class=\"line\">    LogRecordContext.putEmptySpan();</span><br><span class=\"line\">    Collection&lt;LogRecordOps&gt; operations = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    Map&lt;String, String&gt; functionNameAndReturnMap = new HashMap&lt;&gt;();</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        operations = logRecordOperationSource.computeLogRecordOperations(method, targetClass);</span><br><span class=\"line\">        List&lt;String&gt; spElTemplates = getBeforeExecuteFunctionTemplate(operations);</span><br><span class=\"line\">        </span><br><span class=\"line\">        functionNameAndReturnMap = processBeforeExecuteFunctionTemplate(spElTemplates, targetClass, method, args);</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        log.error(&quot;log record parse before function exception&quot;, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        ret = invoker.proceed();</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        methodExecuteResult = new MethodExecuteResult(false, e, e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        if (!CollectionUtils.isEmpty(operations)) &#123;</span><br><span class=\"line\">            recordExecute(ret, method, args, operations, targetClass,</span><br><span class=\"line\">                    methodExecuteResult.isSuccess(), methodExecuteResult.getErrorMsg(), functionNameAndReturnMap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; catch (Exception t) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        log.error(&quot;log record parse exception&quot;, t);</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        LogRecordContext.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (methodExecuteResult.throwable != null) &#123;</span><br><span class=\"line\">        throw methodExecuteResult.throwable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>拦截逻辑的流程：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/ae0219c9892e3c116380dd2c3c4cb305.png\"></p>\n<p>可以看到，操作日志的记录持久化是在方法执行完之后执行的，当方法抛出异常之后会先捕获异常，等操作日志持久化完成后再抛出异常。在业务的方法执行之前，会对提前解析的自定义函数求值，解决了前面提到的需要查询修改之前的内容。</p>\n<h4 id=\"4-2-2-解析逻辑\"><a href=\"#4-2-2-解析逻辑\" class=\"headerlink\" title=\"4.2.2 解析逻辑\"></a>4.2.2 解析逻辑</h4><p><strong>模板解析</strong></p>\n<p>Spring 3 提供了一个非常强大的功能：Spring EL，SpEL 在 Spring 产品中是作为表达式求值的核心基础模块，它本身是可以脱离 Spring 独立使用的。举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpelExpressionParser parser = new SpelExpressionParser();</span><br><span class=\"line\">        Expression expression = parser.parseExpression(&quot;#root.purchaseName&quot;);</span><br><span class=\"line\">        Order order = new Order();</span><br><span class=\"line\">        order.setPurchaseName(&quot;张三&quot;);</span><br><span class=\"line\">        System.out.println(expression.getValue(order));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法将打印 “张三”。LogRecord 解析的类图如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/f47607240d12db5dfe67334243465e8e.png\"></p>\n<p><strong>解析核心类</strong>：<code>LogRecordValueParser</code> 里面封装了自定义函数和 SpEL 解析类 <code>LogRecordExpressionEvaluator</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LogRecordExpressionEvaluator extends CachedExpressionEvaluator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Map&lt;ExpressionKey, Expression&gt; expressionCache = new ConcurrentHashMap&lt;&gt;(64);</span><br><span class=\"line\"></span><br><span class=\"line\">    private final Map&lt;AnnotatedElementKey, Method&gt; targetMethodCache = new ConcurrentHashMap&lt;&gt;(64);</span><br><span class=\"line\"></span><br><span class=\"line\">    public String parseExpression(String conditionExpression, AnnotatedElementKey methodKey, EvaluationContext evalContext) &#123;</span><br><span class=\"line\">        return getExpression(this.expressionCache, methodKey, conditionExpression).getValue(evalContext, String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>LogRecordExpressionEvaluator</code> 继承自 <code>CachedExpressionEvaluator</code> 类，这个类里面有两个 Map，一个是 expressionCache 一个是 targetMethodCache。在上面的例子中可以看到，SpEL 会解析成一个 Expression 表达式，然后根据传入的 Object 获取到对应的值，所以 expressionCache 是为了缓存方法、表达式和 SpEL 的 Expression 的对应关系，让方法注解上添加的 SpEL 表达式只解析一次。 下面的 targetMethodCache 是为了缓存传入到 Expression 表达式的 Object。核心的解析逻辑是上面最后一行代码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getExpression(this.expressionCache, methodKey, conditionExpression).getValue(evalContext, String.class);</span><br></pre></td></tr></table></figure>\n\n<p><code>getExpression</code> 方法会从 expressionCache 中获取到 @LogRecordAnnotation 注解上的表达式的解析 Expression 的实例，然后调用 <code>getValue</code> 方法，<code>getValue</code> 传入一个 evalContext 就是类似上面例子中的 order 对象。其中 Context 的实现将会在下文介绍。</p>\n<p><strong>日志上下文实现</strong></p>\n<p>下面的例子把变量放到了 LogRecordContext 中，然后 SpEL 表达式就可以顺利的解析方法上不存在的参数了，通过上面的 SpEL 的例子可以看出，要把方法的参数和 LogRecordContext 中的变量都放到 SpEL 的 <code>getValue</code> 方法的 Object 中才可以顺利的解析表达式的值。下面看下如何实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@LogRecord(content = &quot;修改了订单的配送员：从“&#123;deveryUser&#123;#oldDeliveryUserId&#125;&#125;”, 修改到“&#123;deveryUser&#123;#request.getUserId()&#125;&#125;”&quot;,</span><br><span class=\"line\">            bizNo=&quot;#request.getDeliveryOrderNo()&quot;)</span><br><span class=\"line\">public void modifyAddress(updateDeliveryRequest request)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    LogRecordContext.putVariable(&quot;oldDeliveryUserId&quot;, DeliveryService.queryOldDeliveryUserId(request.getDeliveryOrderNo()));</span><br><span class=\"line\">    </span><br><span class=\"line\">    doUpdate(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 LogRecordValueParser 中创建了一个 EvaluationContext，用来给 SpEL 解析方法参数和 Context 中的变量。相关代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">EvaluationContext evaluationContext = expressionEvaluator.createEvaluationContext(method, args, targetClass, ret, errorMsg, beanFactory);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在解析的时候调用 <code>getValue</code> 方法传入的参数 evalContext，就是上面这个 EvaluationContext 对象。下面是 LogRecordEvaluationContext 对象的继承体系：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/bf2dd980ab0fc1737676196fa029e77d.png\"></p>\n<p>LogRecordEvaluationContext 做了三个事情： * 把方法的参数都放到 SpEL 解析的 RootObject 中。 * 把 LogRecordContext 中的变量都放到 RootObject 中。 * 把方法的返回值和 ErrorMsg 都放到 RootObject 中。</p>\n<p>LogRecordEvaluationContext 的代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LogRecordEvaluationContext extends MethodBasedEvaluationContext &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public LogRecordEvaluationContext(Object rootObject, Method method, Object[] arguments,</span><br><span class=\"line\">                                      ParameterNameDiscoverer parameterNameDiscoverer, Object ret, String errorMsg) &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">       super(rootObject, method, arguments, parameterNameDiscoverer);</span><br><span class=\"line\">       </span><br><span class=\"line\">        Map&lt;String, Object&gt; variables = LogRecordContext.getVariables();</span><br><span class=\"line\">        if (variables != null &amp;&amp; variables.size() &gt; 0) &#123;</span><br><span class=\"line\">            for (Map.Entry&lt;String, Object&gt; entry : variables.entrySet()) &#123;</span><br><span class=\"line\">                setVariable(entry.getKey(), entry.getValue());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        setVariable(&quot;_ret&quot;, ret);</span><br><span class=\"line\">        setVariable(&quot;_errorMsg&quot;, errorMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是 LogRecordContext 的实现，这个类里面通过一个 ThreadLocal 变量保持了一个栈，栈里面是个 Map，Map 对应了变量的名称和变量的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LogRecordContext &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final InheritableThreadLocal&lt;Stack&lt;Map&lt;String, Object&gt;&gt;&gt; variableMapStack = new InheritableThreadLocal&lt;&gt;();</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面使用了 InheritableThreadLocal，所以在线程池的场景下使用 LogRecordContext 会出现问题，如果支持线程池可以使用阿里巴巴开源的 TTL 框架。那这里为什么不直接设置一个 ThreadLocal&gt; 对象，而是要设置一个 Stack 结构呢？我们看一下这么做的原因是什么。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@LogRecord(content = &quot;修改了订单的配送员：从“&#123;deveryUser&#123;#oldDeliveryUserId&#125;&#125;”, 修改到“&#123;deveryUser&#123;#request.getUserId()&#125;&#125;”&quot;,</span><br><span class=\"line\">        bizNo=&quot;#request.getDeliveryOrderNo()&quot;)</span><br><span class=\"line\">public void modifyAddress(updateDeliveryRequest request)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    LogRecordContext.putVariable(&quot;oldDeliveryUserId&quot;, DeliveryService.queryOldDeliveryUserId(request.getDeliveryOrderNo()));</span><br><span class=\"line\">    </span><br><span class=\"line\">    doUpdate(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码的执行流程如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/bfb13b96fc1bb1feb1aae3a833965678.png\"></p>\n<p>看起来没有什么问题，但是使用 LogRecordAnnotation 的方法里面嵌套了另一个使用 LogRecordAnnotation 方法的时候，流程就变成下面的形式：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/279274af416fa37384d75c909c8c8cfc.png\"></p>\n<p>可以看到，当方法二执行了释放变量后，继续执行方法一的 logRecord 逻辑，此时解析的时候 ThreadLocal&gt;的 Map 已经被释放掉，所以方法一就获取不到对应的变量了。方法一和方法二共用一个变量 Map 还有个问题是：如果方法二设置了和方法一相同的变量两个方法的变量就会被相互覆盖。所以最终 LogRecordContext 的变量的生命周期需要是下面的形式：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/4aacb45b5728ed404a4c52e2ee1cdab9.png\"></p>\n<p>LogRecordContext 每执行一个方法都会压栈一个 Map，方法执行完之后会 Pop 掉这个 Map，从而避免变量共享和覆盖问题。</p>\n<p><strong>默认操作人逻辑</strong></p>\n<p>在 LogRecordInterceptor 中 IOperatorGetService 接口，这个接口可以获取到当前的用户。下面是接口的定义：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IOperatorGetService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    Operator getUser();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面给出了从用户上下文中获取用户的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DefaultOperatorGetServiceImpl implements IOperatorGetService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Operator getUser() &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">         return Optional.ofNullable(UserUtils.getUser())</span><br><span class=\"line\">                        .map(a -&gt; new Operator(a.getName(), a.getLogin()))</span><br><span class=\"line\">                        .orElseThrow(()-&gt;new IllegalArgumentException(&quot;user is null&quot;));</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>组件在解析 operator 的时候，就判断注解上的 operator 是否是空，如果注解上没有指定，我们就从 IOperatorGetService 的 getUser 方法获取了。如果都获取不到，就会报错。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String realOperatorId = &quot;&quot;;</span><br><span class=\"line\">if (StringUtils.isEmpty(operatorId)) &#123;</span><br><span class=\"line\">    if (operatorGetService.getUser() == null || StringUtils.isEmpty(operatorGetService.getUser().getOperatorId())) &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;user is null&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    realOperatorId = operatorGetService.getUser().getOperatorId();</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    spElTemplates = Lists.newArrayList(bizKey, bizNo, action, operatorId, detail);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>自定义函数逻辑</strong></p>\n<p>自定义函数的类图如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/dandeliono/img/main/resource/682a3e3c63227cee5a976b9be2fb31dc.png\"></p>\n<p>下面是 IParseFunction 的接口定义：<code>executeBefore</code> 函数代表了自定义函数是否在业务代码执行之前解析，上面提到的查询修改之前的内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IParseFunction &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  default boolean executeBefore()&#123;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  String functionName();</span><br><span class=\"line\"></span><br><span class=\"line\">  String apply(String value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ParseFunctionFactory 的代码比较简单，它的功能是把所有的 IParseFunction 注入到函数工厂中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ParseFunctionFactory &#123;</span><br><span class=\"line\">  private Map&lt;String, IParseFunction&gt; allFunctionMap;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ParseFunctionFactory(List&lt;IParseFunction&gt; parseFunctions) &#123;</span><br><span class=\"line\">    if (CollectionUtils.isEmpty(parseFunctions)) &#123;</span><br><span class=\"line\">      return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    allFunctionMap = new HashMap&lt;&gt;();</span><br><span class=\"line\">    for (IParseFunction parseFunction : parseFunctions) &#123;</span><br><span class=\"line\">      if (StringUtils.isEmpty(parseFunction.functionName())) &#123;</span><br><span class=\"line\">        continue;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      allFunctionMap.put(parseFunction.functionName(), parseFunction);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public IParseFunction getFunction(String functionName) &#123;</span><br><span class=\"line\">    return allFunctionMap.get(functionName);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public boolean isBeforeFunction(String functionName) &#123;</span><br><span class=\"line\">    return allFunctionMap.get(functionName) != null &amp;&amp; allFunctionMap.get(functionName).executeBefore();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>DefaultFunctionServiceImpl 的逻辑就是根据传入的函数名称 functionName 找到对应的 IParseFunction，然后把参数传入到 IParseFunction 的 <code>apply</code> 方法上最后返回函数的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DefaultFunctionServiceImpl implements IFunctionService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private final ParseFunctionFactory parseFunctionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">  public DefaultFunctionServiceImpl(ParseFunctionFactory parseFunctionFactory) &#123;</span><br><span class=\"line\">    this.parseFunctionFactory = parseFunctionFactory;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public String apply(String functionName, String value) &#123;</span><br><span class=\"line\">    IParseFunction function = parseFunctionFactory.getFunction(functionName);</span><br><span class=\"line\">    if (function == null) &#123;</span><br><span class=\"line\">      return value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return function.apply(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public boolean beforeFunction(String functionName) &#123;</span><br><span class=\"line\">    return parseFunctionFactory.isBeforeFunction(functionName);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-3-日志持久化逻辑\"><a href=\"#4-2-3-日志持久化逻辑\" class=\"headerlink\" title=\"4.2.3 日志持久化逻辑\"></a>4.2.3 日志持久化逻辑</h4><p>同样在 LogRecordInterceptor 的代码中引用了 ILogRecordService，这个 Service 主要包含了日志记录的接口。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ILogRecordService &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    void record(LogRecord logRecord);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务可以实现这个保存接口，然后把日志保存在任何存储介质上。这里给了一个 2.2 节介绍的通过 log.info 保存在日志文件中的例子，业务可以把保存设置成异步或者同步，可以和业务放在一个事务中保证操作日志和业务的一致性，也可以新开辟一个事务，保证日志的错误不影响业务的事务。业务可以保存在 Elasticsearch、数据库或者文件中，用户可以根据日志结构和日志的存储实现相应的查询逻辑。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class DefaultLogRecordServiceImpl implements ILogRecordService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\"></span><br><span class=\"line\">    public void record(LogRecord logRecord) &#123;</span><br><span class=\"line\">        log.info(&quot;【logRecord】log=&#123;&#125;&quot;, logRecord);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-4-Starter-逻辑封装\"><a href=\"#4-2-4-Starter-逻辑封装\" class=\"headerlink\" title=\"4.2.4 Starter 逻辑封装\"></a>4.2.4 Starter 逻辑封装</h4><p>上面逻辑代码已经介绍完毕，那么接下来需要把这些组件组装起来，然后让用户去使用。在使用这个组件的时候只需要在 Springboot 的入口上添加一个注解 @EnableLogRecord(tenant &#x3D; “com.mzt.test”)。其中 tenant 代表租户，是为了多租户使用的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><br><span class=\"line\">@EnableTransactionManagement</span><br><span class=\"line\">@EnableLogRecord(tenant = &quot;com.mzt.test&quot;)</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(Main.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>再看下 EnableLogRecord 的代码，代码中 Import 了 <code>LogRecordConfigureSelector.class</code>，在 <code>LogRecordConfigureSelector</code> 类中暴露了 <code>LogRecordProxyAutoConfiguration</code> 类。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(ElementType.TYPE)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">@Import(LogRecordConfigureSelector.class)</span><br><span class=\"line\">public @interface EnableLogRecord &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String tenant();</span><br><span class=\"line\">    </span><br><span class=\"line\">    AdviceMode mode() default AdviceMode.PROXY;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>LogRecordProxyAutoConfiguration</code> 就是装配上面组件的核心类了，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public class LogRecordProxyAutoConfiguration implements ImportAware &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private AnnotationAttributes enableLogRecord;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  @Bean</span><br><span class=\"line\">  @Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class=\"line\">  public LogRecordOperationSource logRecordOperationSource() &#123;</span><br><span class=\"line\">    return new LogRecordOperationSource();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Bean</span><br><span class=\"line\">  @ConditionalOnMissingBean(IFunctionService.class)</span><br><span class=\"line\">  public IFunctionService functionService(ParseFunctionFactory parseFunctionFactory) &#123;</span><br><span class=\"line\">    return new DefaultFunctionServiceImpl(parseFunctionFactory);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Bean</span><br><span class=\"line\">  public ParseFunctionFactory parseFunctionFactory(@Autowired List&lt;IParseFunction&gt; parseFunctions) &#123;</span><br><span class=\"line\">    return new ParseFunctionFactory(parseFunctions);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Bean</span><br><span class=\"line\">  @ConditionalOnMissingBean(IParseFunction.class)</span><br><span class=\"line\">  public DefaultParseFunction parseFunction() &#123;</span><br><span class=\"line\">    return new DefaultParseFunction();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  @Bean</span><br><span class=\"line\">  @Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class=\"line\">  public BeanFactoryLogRecordAdvisor logRecordAdvisor(IFunctionService functionService) &#123;</span><br><span class=\"line\">    BeanFactoryLogRecordAdvisor advisor =</span><br><span class=\"line\">            new BeanFactoryLogRecordAdvisor();</span><br><span class=\"line\">    advisor.setLogRecordOperationSource(logRecordOperationSource());</span><br><span class=\"line\">    advisor.setAdvice(logRecordInterceptor(functionService));</span><br><span class=\"line\">    return advisor;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Bean</span><br><span class=\"line\">  @Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class=\"line\">  public LogRecordInterceptor logRecordInterceptor(IFunctionService functionService) &#123;</span><br><span class=\"line\">    LogRecordInterceptor interceptor = new LogRecordInterceptor();</span><br><span class=\"line\">    interceptor.setLogRecordOperationSource(logRecordOperationSource());</span><br><span class=\"line\">    interceptor.setTenant(enableLogRecord.getString(&quot;tenant&quot;));</span><br><span class=\"line\">    interceptor.setFunctionService(functionService);</span><br><span class=\"line\">    return interceptor;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Bean</span><br><span class=\"line\">  @ConditionalOnMissingBean(IOperatorGetService.class)</span><br><span class=\"line\">  @Role(BeanDefinition.ROLE_APPLICATION)</span><br><span class=\"line\">  public IOperatorGetService operatorGetService() &#123;</span><br><span class=\"line\">    return new DefaultOperatorGetServiceImpl();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Bean</span><br><span class=\"line\">  @ConditionalOnMissingBean(ILogRecordService.class)</span><br><span class=\"line\">  @Role(BeanDefinition.ROLE_APPLICATION)</span><br><span class=\"line\">  public ILogRecordService recordService() &#123;</span><br><span class=\"line\">    return new DefaultLogRecordServiceImpl();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public void setImportMetadata(AnnotationMetadata importMetadata) &#123;</span><br><span class=\"line\">    this.enableLogRecord = AnnotationAttributes.fromMap(</span><br><span class=\"line\">            importMetadata.getAnnotationAttributes(EnableLogRecord.class.getName(), false));</span><br><span class=\"line\">    if (this.enableLogRecord == null) &#123;</span><br><span class=\"line\">      log.info(&quot;@EnableCaching is not present on importing class&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个类继承 ImportAware 是为了拿到 EnableLogRecord 上的租户属性，这个类使用变量 logRecordAdvisor 和 logRecordInterceptor 装配了 AOP，同时把自定义函数注入到了 logRecordAdvisor 中。</p>\n<p><strong>对外扩展类</strong>：分别是<code>IOperatorGetService</code>、<code>ILogRecordService</code>、<code>IParseFunction</code>。业务可以自己实现相应的接口，因为配置了 @ConditionalOnMissingBean，所以用户的实现类会覆盖组件内的默认实现。<br> <a href=\"https://tech.meituan.com/2021/09/16/operational-logbook.html\">https://tech.meituan.com/2021/09/16/operational-logbook.html</a></p>\n","text":"如何优雅地记录操作日志？操作日志几乎存在于每个系统中，而这些系统都有记录操作日志的一套 API。操作日志和系统日志不一样，操作日志必须要做到简单易懂。所以如何让...","permalink":"/post/LINUX/如何优雅地记录操作日志？","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"24 mins."},"categories":[{"name":"SpEL","slug":"SpEL","count":1,"path":"api/categories/SpEL.json"},{"name":"LINUX","slug":"SpEL/LINUX","count":1,"path":"api/categories/SpEL/LINUX.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"AOP","slug":"AOP","count":1,"path":"api/tags/AOP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E8%AE%B0%E5%BD%95%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%EF%BC%9F\"><span class=\"toc-text\">如何优雅地记录操作日志？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">1. 操作日志的使用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2. 实现方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E4%BD%BF%E7%94%A8-Canal-%E7%9B%91%E5%90%AC%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%B0%E5%BD%95%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">2.1 使用 Canal 监听数据库记录操作日志</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E9%80%9A%E8%BF%87%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95\"><span class=\"toc-text\">2.2 通过日志文件的方式记录</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E9%80%9A%E8%BF%87-LogUtil-%E7%9A%84%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">2.3 通过 LogUtil 的方式记录日志</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E6%96%B9%E6%B3%95%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">2.4 方法注解实现操作日志</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E4%BC%98%E9%9B%85%E5%9C%B0%E6%94%AF%E6%8C%81-AOP-%E7%94%9F%E6%88%90%E5%8A%A8%E6%80%81%E7%9A%84%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">3. 优雅地支持 AOP 生成动态的操作日志</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E5%8A%A8%E6%80%81%E6%A8%A1%E6%9D%BF\"><span class=\"toc-text\">3.1 动态模板</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">4. 代码实现解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">4.1 代码结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E6%A8%A1%E5%9D%97%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">4.2 模块介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-1-AOP-%E6%8B%A6%E6%88%AA%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">4.2.1 AOP 拦截逻辑</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-2-%E8%A7%A3%E6%9E%90%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">4.2.2 解析逻辑</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-3-%E6%97%A5%E5%BF%97%E6%8C%81%E4%B9%85%E5%8C%96%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">4.2.3 日志持久化逻辑</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-4-Starter-%E9%80%BB%E8%BE%91%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">4.2.4 Starter 逻辑封装</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"docker-compose部署flink集群","uid":"96cd93f7633628e16d6fdcc58320aac4","slug":"OCI/docker-compose部署flink集群","date":"2021-11-13T11:41:36.000Z","updated":"2025-09-30T03:26:57.483Z","comments":true,"path":"api/articles/OCI/docker-compose部署flink集群.json","keywords":"XuGuangSheng","cover":"/covers/docker-composeflink.jpg","text":"docker-compose部署flink集群flink 集群部署 拉取 flink 镜像 12docker pull flink 自定义创建目录（例如 / u...","permalink":"/post/OCI/docker-compose部署flink集群","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"flink","slug":"flink","count":2,"path":"api/categories/flink.json"},{"name":"OCI","slug":"flink/OCI","count":1,"path":"api/categories/flink/OCI.json"}],"tags":[{"name":"docker","slug":"docker","count":4,"path":"api/tags/docker.json"},{"name":"compose","slug":"compose","count":1,"path":"api/tags/compose.json"},{"name":"集群","slug":"集群","count":1,"path":"api/tags/集群.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"虚拟机深层系列「GC本质底层机制」SafePoint的深入分析和底层原理探究指南","uid":"6302f7b0274d5a479bc686d3d275831e","slug":"JAVA/虚拟机深层系列「GC本质底层机制」SafePoint的深入分析和底层原理探究指南","date":"2021-10-24T13:41:42.000Z","updated":"2025-09-30T03:26:28.408Z","comments":true,"path":"api/articles/JAVA/虚拟机深层系列「GC本质底层机制」SafePoint的深入分析和底层原理探究指南.json","keywords":"XuGuangSheng","cover":"/covers/gcsafepoint.jpg","text":"虚拟机深层系列「GC本质底层机制」SafePoint的深入分析和底层原理探究指南SafePoint 前提介绍在高度优化的现代 JVM 里，Safepoint 有...","permalink":"/post/JAVA/虚拟机深层系列「GC本质底层机制」SafePoint的深入分析和底层原理探究指南","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"safepoint","slug":"safepoint","count":1,"path":"api/categories/safepoint.json"},{"name":"JAVA","slug":"safepoint/JAVA","count":1,"path":"api/categories/safepoint/JAVA.json"}],"tags":[{"name":"JVM","slug":"JVM","count":6,"path":"api/tags/JVM.json"},{"name":"mutator","slug":"mutator","count":1,"path":"api/tags/mutator.json"},{"name":"safe","slug":"safe","count":1,"path":"api/tags/safe.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}