{"title":"问题排查利器：Linux 原生跟踪工具 Ftrace 必知必会","uid":"90ecd18311a9fc88b1f7131b4ce334a3","slug":"LINUX/问题排查利器：Linux 原生跟踪工具 Ftrace 必知必会","date":"2024-05-29T09:19:10.000Z","updated":"2025-09-30T03:26:44.157Z","comments":true,"path":"api/articles/LINUX/问题排查利器：Linux 原生跟踪工具 Ftrace 必知必会.json","keywords":"XuGuangSheng","cover":"/covers/linux-ftrace.jpg","content":"<h1 id=\"问题排查利器：Linux-原生跟踪工具-Ftrace-必知必会\"><a href=\"#问题排查利器：Linux-原生跟踪工具-Ftrace-必知必会\" class=\"headerlink\" title=\"问题排查利器：Linux 原生跟踪工具 Ftrace 必知必会\"></a>问题排查利器：Linux 原生跟踪工具 Ftrace 必知必会</h1><p>本文地址：<a href=\"https://www.ebpf.top/post/ftrace_tools\">https://www.ebpf.top/post/ftrace_tools</a></p>\n<p>TLDR，建议收藏，需要时查阅。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果你只是需要快速使用工具来进行问题排查，包括但不限于函数调用栈跟踪、函数调用子函数流程、函数返回结果，那么推荐你直接使用 <a href=\"https://github.com/iovisor/bcc/blob/master/tools/trace_example.txt\">BCC trace</a> 或 <a href=\"https://github.com/brendangregg\">Brendan Gregg</a> 封装的 <a href=\"https://github.com/brendangregg/perf-tools\">perf-tools</a> 工具即可，本文尝试从手工操作 Ftrace 跟踪工具的方式展示在底层是如何通过 tracefs 实现这些能力的。如果你对某个跟踪主题感兴趣，建议直接跳转到相关的主题查看。</p></blockquote>\n<p>快速说明：</p>\n<ul>\n<li>kprobe 为内核中提供的动态跟踪机制，<code>/proc/kallsyms</code> 中的函数几乎都可以用于跟踪，但是内核函数可能随着版本演进而发生变化，为非稳定的跟踪机制，数量比较多。</li>\n<li>uprobe 为用户空间提供的动态机制；</li>\n<li>tracepoint 是内核提供的静态跟踪点，为稳定的跟踪点，需要研发人员代码编写，数量有限；</li>\n<li>usdt 为用户空间提供的静态跟踪点 【本次暂不涉及】</li>\n</ul>\n<p>Ftrace 是 Linux 官方提供的跟踪工具，在 Linux 2.6.27 版本中引入。Ftrace 可在不引入任何前端工具的情况下使用，让其可以适合在任何系统环境中使用。</p>\n<p>Ftrace 可用来快速排查以下相关问题：</p>\n<ul>\n<li>特定内核函数调用的频次 （function）</li>\n<li>内核函数在被调用的过程中流程（调用栈） （function + stack）</li>\n<li>内核函数调用的子函数流程（子调用栈）（function graph）</li>\n<li>由于抢占导致的高延时路径等</li>\n</ul>\n<p>Ftrace 跟踪工具由性能分析器（profiler）和跟踪器（tracer）两部分组成：</p>\n<ul>\n<li><strong>性能分析器</strong>，用来提供统计和直方图数据（需要 CONFIG_ FUNCTION_PROFILER&#x3D;y）<ul>\n<li>函数性能分析</li>\n<li>直方图</li>\n</ul>\n</li>\n<li><strong>跟踪器</strong>，提供跟踪事件的详情：<ul>\n<li>函数跟踪（function）</li>\n<li>跟踪点（tracepoint）</li>\n<li>kprobe</li>\n<li>uprobe</li>\n<li>函数调用关系（function_graph）</li>\n<li>hwlat 等</li>\n</ul>\n</li>\n</ul>\n<p>除了操作原始的文件接口外，也有一些基于 Ftrace 的前端工具，比如 perf-tools 和 trace-cmd （界面 KernelShark）等。整体跟踪及前端工具架构图如下：</p>\n<p><img src=\"https://www.ebpf.top/post/ftrace_tools/imgs/ftrace_arch.png\"></p>\n<p>图片来自于 《Systems Performance Enterprise and the Cloud 2nd Edition》 14.1 P706</p>\n<p>Ftrace 的使用的接口为 tracefs 文件系统，需要保证该文件系统进行加载：</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl -q kernel.ftrace_enabled=1</span><br><span class=\"line\">$ mount -t tracefs tracefs /sys/kernel/tracing</span><br><span class=\"line\"></span><br><span class=\"line\">$ mount -t debugfs,tracefs</span><br><span class=\"line\">tracefs on /sys/kernel/tracing <span class=\"built_in\">type</span> tracefs (rw,nosuid,nodev,noexec,relatime)</span><br><span class=\"line\">debugfs on /sys/kernel/debug <span class=\"built_in\">type</span> debugfs (rw,nosuid,nodev,noexec,relatime)</span><br><span class=\"line\">tracefs on /sys/kernel/debug/tracing <span class=\"built_in\">type</span> tracefs (rw,nosuid,nodev,noexec,relatime)</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">ls</span> -F /sys/kernel/debug/tracing  <span class=\"comment\"># 完整目录如下图</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p><img src=\"https://www.ebpf.top/post/ftrace_tools/imgs/ftrace_files.png\"></p>\n<p>tracing 目录下核心文件介绍如下表格，当前可仅关注黑体加粗的项，其他项可在需要的时候再进行回顾：</p>\n<table>\n<thead>\n<tr>\n<th>文件</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>available_tracers</strong></td>\n<td>可用跟踪器，hwlat blk function_graph wakeup_dl wakeup_rt wakeup function nop，nop 表示不使用跟踪器</td>\n</tr>\n<tr>\n<td><strong>current_tracer</strong></td>\n<td>当前使用的跟踪器</td>\n</tr>\n<tr>\n<td>function_profile_enabled</td>\n<td>启用函数性能分析器</td>\n</tr>\n<tr>\n<td>available_filter_functions</td>\n<td>可跟踪的完整函数列表</td>\n</tr>\n<tr>\n<td><strong>set_ftrace_filter</strong></td>\n<td>选择跟踪函数的列表，支持批量设置，例如 *tcp、tcp* 和 *tcp* 等</td>\n</tr>\n<tr>\n<td>set_ftrace_notrace</td>\n<td>设置不跟踪的函数列表</td>\n</tr>\n<tr>\n<td><strong>set_event_pid</strong></td>\n<td>设置跟踪的 PID，表示仅跟踪 PID 程序的函数或者其他跟踪</td>\n</tr>\n<tr>\n<td><strong>tracing_on</strong></td>\n<td>是否启用跟踪，1 启用跟踪 0 关闭跟踪</td>\n</tr>\n<tr>\n<td>trace_options</td>\n<td>设置跟踪的选项</td>\n</tr>\n<tr>\n<td>trace_stat（目录）</td>\n<td>函数性能分析的输出目录</td>\n</tr>\n<tr>\n<td>kprobe_events</td>\n<td>启用 kprobe 的配置</td>\n</tr>\n<tr>\n<td>uprobe_events</td>\n<td>启用 uprobe 的配置</td>\n</tr>\n<tr>\n<td>events ( 目录 )</td>\n<td>事件（Event）跟踪器的控制文件： tracepoint、kprobe、uprobe</td>\n</tr>\n<tr>\n<td><strong>trace</strong></td>\n<td>跟踪的输出 （Ring Buffer）</td>\n</tr>\n<tr>\n<td>trace_pipe</td>\n<td>跟踪的输出；提供持续不断的数据流，适用于程序进行读取</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>perf_tools 包含了一个复位所有 ftrace 选型的工具脚本，在跟踪不符合预期的情况下，建议先使用 <a href=\"https://github.com/brendangregg/perf-tools/blob/master/tools/reset-ftrace\">reset-ftrace</a> 进行复位，然后再进行测试。</p></blockquote>\n<h2 id=\"1-内核函数调用跟踪\"><a href=\"#1-内核函数调用跟踪\" class=\"headerlink\" title=\"1. 内核函数调用跟踪\"></a>1. 内核函数调用跟踪</h2><p>基于 Ftrace 的内核函数调用跟踪整体架构如下所示：</p>\n<p><img src=\"https://www.ebpf.top/post/ftrace_tools/imgs/ftrace_function_arch.png\"></p>\n<p>图片来自于 《Systems Performance Enterprise and the Cloud 2nd Edition》 14.4 P713</p>\n<p>这里我们尝试对于内核中的系统调用函数 <code>__arm64_sys_openat</code> 进行跟踪（前面两个下划线），需要注意的是 <code>__arm64_sys_openat</code> 是在 arm64 结构体系下 <code>sys_openat</code> 系统调用的包装，如果在 x86_64 架构下则为 <code>__x64_sys_openat()</code> ，由于我们本地的电脑是 M1 芯片，所以演示的样例以 arm64 为主。</p>\n<p>在不同的体系结构下，可以在 <code>/proc/kallsym</code> 文件中搜索确认。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>后续的目录，如无特殊说明，都默认位于 <code>/sys/kernel/debug/tracing/</code> 根目录。</p></blockquote>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1</span><br><span class=\"line\"> 2</span><br><span class=\"line\"> 3</span><br><span class=\"line\"> 4</span><br><span class=\"line\"> 5</span><br><span class=\"line\"> 6</span><br><span class=\"line\"> 7</span><br><span class=\"line\"> 8</span><br><span class=\"line\"> 9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 function 跟踪器，并将其设置到 current_tracer</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> <span class=\"keyword\">function</span> &gt; current_tracer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将跟踪函数 __arm64_sys_openat 设置到 set_ftrace_filter 文件中</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> __arm64_sys_openat &gt; set_ftrace_filter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启全局的跟踪使能</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> 1 &gt; tracing_on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行 ls 命令触发 sys_openat 系统调用，新的内核版本中直接调用 sys_openat</span></span><br><span class=\"line\">$ <span class=\"built_in\">ls</span> -hl </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> 0 &gt; tracing_on</span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> nop &gt; current_tracer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要主要这里的 echo 后面有一个空格，即 “echo+ 空格&gt;&quot; </span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span>  &gt; set_ftrace_filter </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过 cat trace 文件进行查看</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">cat</span> trace</span><br><span class=\"line\"><span class=\"comment\"># tracer: function</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># entries-in-buffer/entries-written: 224/224   #P:4</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#                                _-----=&gt; irqs-off</span></span><br><span class=\"line\"><span class=\"comment\">#                               / _----=&gt; need-resched</span></span><br><span class=\"line\"><span class=\"comment\">#                              | / _---=&gt; hardirq/softirq</span></span><br><span class=\"line\"><span class=\"comment\">#                              || / _--=&gt; preempt-depth</span></span><br><span class=\"line\"><span class=\"comment\">#                              ||| /     delay</span></span><br><span class=\"line\"><span class=\"comment\">#           TASK-PID     CPU#  ||||   TIMESTAMP  FUNCTION</span></span><br><span class=\"line\"><span class=\"comment\">#              | |         |   ||||      |         |</span></span><br><span class=\"line\">            sudo-15099   [002] .... 29469.444400: __arm64_sys_openat &lt;-invoke_syscall</span><br><span class=\"line\">            sudo-15099   [002] .... 29469.444594: __arm64_sys_openat &lt;-invoke_syscall</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p>我们可以看到上述的结果表明了函数调用的任务名称、PID、CPU、标记位、时间戳及函数名字。</p>\n<p>在 <a href=\"https://github.com/brendangregg/perf-tools\">perf_tools</a> 工具集中的前端封装工具为 <a href=\"https://github.com/brendangregg/perf-tools/blob/master/kernel/functrace\">functrace</a> ，需要注意的是该工具默认不会设置 tracing_on 为 1， 需要在启动前进行设置，即 ”echo 1 &gt; tracing_on“。</p>\n<p><a href=\"https://github.com/brendangregg/perf-tools\">perf_tools</a> 工具集中 <a href=\"https://github.com/brendangregg/perf-tools/blob/master/kernel/kprobe\">kprobe</a> 也可以实现类似的效果，底层基于 kprobe 机制实现，ftrace 机制中的 kprobe 在后续章节会详细介绍。</p>\n<h2 id=\"2-函数被调用流程（栈）\"><a href=\"#2-函数被调用流程（栈）\" class=\"headerlink\" title=\"2. 函数被调用流程（栈）\"></a>2. 函数被调用流程（栈）</h2><p>在第 1 部分我们获得了内核函数的调用，但是有些场景我们更可能希望获取调用该内核函数的流程（即该函数是在何处被调用），这需要通过设置 <code>options/func_stack_trace</code> 选项实现。</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1</span><br><span class=\"line\"> 2</span><br><span class=\"line\"> 3</span><br><span class=\"line\"> 4</span><br><span class=\"line\"> 5</span><br><span class=\"line\"> 6</span><br><span class=\"line\"> 7</span><br><span class=\"line\"> 8</span><br><span class=\"line\"> 9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> <span class=\"keyword\">function</span> &gt; current_tracer</span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> __arm64_sys_openat &gt; set_ftrace_filter</span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> 1 &gt; options/func_stack_trace <span class=\"comment\"># 设置调用栈选项</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> 1 &gt; tracing_on</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">ls</span> -hl </span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> 0 &gt; tracing_on</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo <span class=\"built_in\">cat</span> trace</span><br><span class=\"line\"><span class=\"comment\"># tracer: function</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># entries-in-buffer/entries-written: 292/448   #P:4</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#                                _-----=&gt; irqs-off</span></span><br><span class=\"line\"><span class=\"comment\">#                               / _----=&gt; need-resched</span></span><br><span class=\"line\"><span class=\"comment\">#                              | / _---=&gt; hardirq/softirq</span></span><br><span class=\"line\"><span class=\"comment\">#                              || / _--=&gt; preempt-depth</span></span><br><span class=\"line\"><span class=\"comment\">#                              ||| /     delay</span></span><br><span class=\"line\"><span class=\"comment\">#           TASK-PID     CPU#  ||||   TIMESTAMP  FUNCTION</span></span><br><span class=\"line\"><span class=\"comment\">#              | |         |   ||||      |         |</span></span><br><span class=\"line\">            sudo-15134   [000] .... 29626.670430: __arm64_sys_openat &lt;-invoke_syscall</span><br><span class=\"line\">            sudo-15134   [000] .... 29626.670431: &lt;stack trace&gt;</span><br><span class=\"line\"> =&gt; __arm64_sys_openat</span><br><span class=\"line\"> =&gt; invoke_syscall</span><br><span class=\"line\"> =&gt; el0_svc_common.constprop.0</span><br><span class=\"line\"> =&gt; do_el0_svc</span><br><span class=\"line\"> =&gt; el0_svc</span><br><span class=\"line\"> =&gt; el0_sync_handler</span><br><span class=\"line\"> =&gt; el0_sync</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> nop &gt; current_tracer</span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span>  &gt; set_ftrace_filter </span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> 0 &gt; options/func_stack_trace</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p>通过上述跟踪记录，我们可以发现记录同时展示了函数调用的记录和被调用的函数流程，<code>__arm64_sys_openat</code> 的被调用栈如下：</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=&gt; __arm64_sys_openat</span><br><span class=\"line\"> =&gt; invoke_syscall</span><br><span class=\"line\"> =&gt; el0_svc_common.constprop.0</span><br><span class=\"line\"> =&gt; do_el0_svc</span><br><span class=\"line\"> =&gt; el0_svc</span><br><span class=\"line\"> =&gt; el0_sync_handler</span><br><span class=\"line\"> =&gt; el0_sync</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p><a href=\"https://github.com/brendangregg/perf-tools\">perf_tools</a> 工具集中 <a href=\"https://github.com/brendangregg/perf-tools/blob/master/kernel/kprobe\">kprobe</a> 通过添加 ”-s“ 参数实现同样的功能，运行的命令如下：</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./kprobe -s <span class=\"string\">&#x27;p:__arm64_sys_openat&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<h2 id=\"3-函数调用子流程跟踪（栈）\"><a href=\"#3-函数调用子流程跟踪（栈）\" class=\"headerlink\" title=\"3. 函数调用子流程跟踪（栈）\"></a>3. 函数调用子流程跟踪（栈）</h2><p>如果想要分析内核函数调用的子流程（即本函数调用了哪些子函数，处理的流程如何），这时需要用到 <code>function_graph</code> 跟踪器，从字面意思就可看出这是函数调用关系跟踪。</p>\n<p>基于 <code>__arm64_sys_openat</code> 子流程调用关系的跟踪的完整设置过程如下：</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1</span><br><span class=\"line\"> 2</span><br><span class=\"line\"> 3</span><br><span class=\"line\"> 4</span><br><span class=\"line\"> 5</span><br><span class=\"line\"> 6</span><br><span class=\"line\"> 7</span><br><span class=\"line\"> 8</span><br><span class=\"line\"> 9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将当前 current_tracer 设置为 function_graph</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> function_graph &gt; current_tracer</span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> __arm64_sys_openat &gt; set_graph_function</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置跟踪子函数的最大层级数</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> 3 &gt; max_graph_depth  <span class=\"comment\"># 设置最大层级</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> 1 &gt; tracing_on</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">ls</span> -hl</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> 0 &gt; tracing_on</span><br><span class=\"line\"><span class=\"comment\">#$ echo nop &gt; set_graph_function</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">cat</span> trace</span><br><span class=\"line\"><span class=\"comment\"># tracer: function_graph</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># CPU  DURATION                  FUNCTION CALLS</span></span><br><span class=\"line\"><span class=\"comment\"># |     |   |                     |   |   |   |</span></span><br><span class=\"line\"> 1)               |  <span class=\"function\"><span class=\"title\">__arm64_sys_openat</span></span>() &#123;</span><br><span class=\"line\"> 1)               |    <span class=\"function\"><span class=\"title\">do_sys_openat2</span></span>() &#123;</span><br><span class=\"line\"> 1)   0.875 us    |      getname();</span><br><span class=\"line\"> 1)   0.125 us    |      get_unused_fd_flags();</span><br><span class=\"line\"> 1)   2.375 us    |      do_filp_open();</span><br><span class=\"line\"> 1)   0.084 us    |      put_unused_fd();</span><br><span class=\"line\"> 1)   0.125 us    |      putname();</span><br><span class=\"line\"> 1)   4.083 us    |    &#125;</span><br><span class=\"line\"> 1)   4.250 us    |  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p>在本样例中 <code>__arm64_sys_openat</code> 函数的调用子流程仅包括 <code>do_sys_openat2()</code> 子函数，而 <code>do_sys_openat2()</code> 函数又调用了 <code>getname()/get_unused_fd_flags()</code> 等子函数。</p>\n<p>这种完整的子函数调用关系，对于我们学习内核源码和分析线上的问题都提供了便利，排查问题时则可以顺藤摸瓜逐步缩小需要分析的范围。</p>\n<p>在 <a href=\"https://github.com/brendangregg/perf-tools\">perf_tools</a> 工具集的前端工具为 <a href=\"https://github.com/brendangregg/perf-tools/blob/master/kernel/funcgraph\">funcgraph</a> ，使用 funcgraph 启动命令如下所示：</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$./funcgraph -m 3 __arm64_sys_openat</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p>如果函数调用栈比较多，直接查看跟踪记录则非常不方便，基于此社区补丁 <a href=\"https://lore.kernel.org/lkml/20090806145701.GB7661@feather/\">[PATCH] ftrace: Add vim script to enable folding for function_graph traces</a> 提供了一个基于 vim 的配置，可通过树状关系来折叠和展开函数调用的最终记录，vim 设置完整如下：</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1</span><br><span class=\"line\"> 2</span><br><span class=\"line\"> 3</span><br><span class=\"line\"> 4</span><br><span class=\"line\"> 5</span><br><span class=\"line\"> 6</span><br><span class=\"line\"> 7</span><br><span class=\"line\"> 8</span><br><span class=\"line\"> 9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot; Enable folding for ftrace function_graph traces.</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot; To use, :source this file while viewing a function_graph trace, or use vim&#x27;s</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> -S option to load from the command-line together with a trace.  You can <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"string\">&quot; use the usual vim fold commands, such as &quot;</span>za<span class=\"string\">&quot;, to open and close nested</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> <span class=\"built_in\">functions</span>.  While closed, a <span class=\"built_in\">fold</span> will show the total time taken <span class=\"keyword\">for</span> a call,</span><br><span class=\"line\"><span class=\"string\">&quot; as would normally appear on the line with the closing brace.  Folded</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> <span class=\"built_in\">functions</span> will not include finish_task_switch(), so folding should remain</span><br><span class=\"line\"><span class=\"string\">&quot; relatively sane even through a context switch.</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot; Note that this will almost certainly only work well with a</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> single-CPU trace (e.g. trace-cmd report --cpu 1).</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span>! FunctionGraphFoldExpr(lnum)</span><br><span class=\"line\">  <span class=\"built_in\">let</span> line = getline(a:lnum)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> line[-1:] == <span class=\"string\">&#x27;&#123;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> line =~ <span class=\"string\">&#x27;finish_task_switch() &#123;$&#x27;</span></span><br><span class=\"line\">      <span class=\"built_in\">return</span> <span class=\"string\">&#x27;&gt;1&#x27;</span></span><br><span class=\"line\">    endif</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"string\">&#x27;a1&#x27;</span></span><br><span class=\"line\">  elseif line[-1:] == <span class=\"string\">&#x27;&#125;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"string\">&#x27;s1&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"string\">&#x27;=&#x27;</span></span><br><span class=\"line\">  endif</span><br><span class=\"line\">endfunction</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span>! FunctionGraphFoldText()</span><br><span class=\"line\">  <span class=\"built_in\">let</span> s = <span class=\"built_in\">split</span>(getline(v:foldstart), <span class=\"string\">&#x27;|&#x27;</span>, 1)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> getline(v:foldend+1) =~ <span class=\"string\">&#x27;finish_task_switch() &#123;$&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">let</span> s[2] = <span class=\"string\">&#x27; task switch  &#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">let</span> e = <span class=\"built_in\">split</span>(getline(v:foldend), <span class=\"string\">&#x27;|&#x27;</span>, 1)</span><br><span class=\"line\">    <span class=\"built_in\">let</span> s[2] = e[2]</span><br><span class=\"line\">  endif</span><br><span class=\"line\">  <span class=\"built_in\">return</span> <span class=\"built_in\">join</span>(s, <span class=\"string\">&#x27;|&#x27;</span>)</span><br><span class=\"line\">endfunction</span><br><span class=\"line\"></span><br><span class=\"line\">setlocal foldexpr=FunctionGraphFoldExpr(v:lnum)</span><br><span class=\"line\">setlocal foldtext=FunctionGraphFoldText()</span><br><span class=\"line\">setlocal foldcolumn=12</span><br><span class=\"line\">setlocal foldmethod=<span class=\"built_in\">expr</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p>将上述指令保存为 function-graph-fold.vim 文件，在 vim 使用时通过 -S 参数指定上述配置，就可实现按照层级展示跟踪记录。在 vim 中，可通过 za 展开，zc 折叠跟踪记录。（通过文件分析，我们需要在 <code>cat trace</code> 文件时候重定向到文件）。</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim -S function-graph-fold.vim trace.log</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<h2 id=\"4-内核跟踪点（tracepoint）跟踪\"><a href=\"#4-内核跟踪点（tracepoint）跟踪\" class=\"headerlink\" title=\"4. 内核跟踪点（tracepoint）跟踪\"></a>4. 内核跟踪点（tracepoint）跟踪</h2><p>可基于 ftrace 跟踪内核静态跟踪点，可跟踪的完整列表可通过 available_events 查看。events 目录下查看到各分类的子目录，详见下图：</p>\n<p><img src=\"https://www.ebpf.top/post/ftrace_tools/imgs/event_tp_files.png\"></p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1</span><br><span class=\"line\"> 2</span><br><span class=\"line\"> 3</span><br><span class=\"line\"> 4</span><br><span class=\"line\"> 5</span><br><span class=\"line\"> 6</span><br><span class=\"line\"> 7</span><br><span class=\"line\"> 8</span><br><span class=\"line\"> 9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># available_events 文件中包括全部可用于跟踪的静态跟踪点</span></span><br><span class=\"line\">$ sudo grep openat available_events</span><br><span class=\"line\">syscalls:sys_exit_openat2</span><br><span class=\"line\">syscalls:sys_enter_openat2</span><br><span class=\"line\">syscalls:sys_exit_openat</span><br><span class=\"line\">syscalls:sys_enter_openat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我们可以在 events/syscalls/sys_enter_openat 中查看该跟踪点相关的选项</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">ls</span> -hl events/syscalls/sys_enter_openat</span><br><span class=\"line\">total 0</span><br><span class=\"line\">-rw-r----- 1 root root 0 Jan  1  1970 <span class=\"built_in\">enable</span>  <span class=\"comment\"># 是否启用跟踪 1 启用</span></span><br><span class=\"line\">-rw-r----- 1 root root 0 Jan  1  1970 filter  <span class=\"comment\"># 跟踪过滤</span></span><br><span class=\"line\">-r--r----- 1 root root 0 Jan  1  1970 format  <span class=\"comment\"># 跟踪点格式</span></span><br><span class=\"line\">-r--r----- 1 root root 0 Jan  1  1970 hist</span><br><span class=\"line\">-r--r----- 1 root root 0 Jan  1  1970 <span class=\"built_in\">id</span></span><br><span class=\"line\">--w------- 1 root root 0 Jan  1  1970 inject</span><br><span class=\"line\">-rw-r----- 1 root root 0 Jan  1  1970 trigger</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo <span class=\"built_in\">cat</span> events/syscalls/sys_enter_openat/format</span><br><span class=\"line\">name: sys_enter_openat</span><br><span class=\"line\">ID: 555</span><br><span class=\"line\">format:</span><br><span class=\"line\">\tfield:unsigned short common_type;\toffset:0;\tsize:2;\tsigned:0;</span><br><span class=\"line\">\tfield:unsigned char common_flags;\toffset:2;\tsize:1;\tsigned:0;</span><br><span class=\"line\">\tfield:unsigned char common_preempt_count;\toffset:3;\tsize:1;\tsigned:0;</span><br><span class=\"line\">\tfield:int common_pid;\toffset:4;\tsize:4;\tsigned:1;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfield:int __syscall_nr;\toffset:8;\tsize:4;\tsigned:1;</span><br><span class=\"line\">\tfield:int dfd;\toffset:16;\tsize:8;\tsigned:0;</span><br><span class=\"line\">\tfield:const char * filename;\toffset:24;\tsize:8;\tsigned:0;</span><br><span class=\"line\">\tfield:int flags;\toffset:32;\tsize:8;\tsigned:0;</span><br><span class=\"line\">\tfield:umode_t mode;\toffset:40;\tsize:8;\tsigned:0;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">fmt</span>: <span class=\"string\">&quot;dfd: 0x%08lx, filename: 0x%08lx, flags: 0x%08lx, mode: 0x%08lx&quot;</span>, ((unsigned long)(REC-&gt;dfd)), ((unsigned long)(REC-&gt;filename)), ((unsigned long)(REC-&gt;flags)), ((unsigned long)(REC-&gt;mode))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p>这里直接使用 tracepoint 跟踪 <code>sys_openat</code> 系统调用，设置如下：</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1</span><br><span class=\"line\"> 2</span><br><span class=\"line\"> 3</span><br><span class=\"line\"> 4</span><br><span class=\"line\"> 5</span><br><span class=\"line\"> 6</span><br><span class=\"line\"> 7</span><br><span class=\"line\"> 8</span><br><span class=\"line\"> 9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> 1 &gt; events/syscalls/sys_enter_openat/enable</span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> 1 &gt; tracing_on</span><br><span class=\"line\">$ sudo <span class=\"built_in\">cat</span> trace</span><br><span class=\"line\"><span class=\"comment\"># tracer: nop</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># entries-in-buffer/entries-written: 19/19   #P:4</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#                                _-----=&gt; irqs-off</span></span><br><span class=\"line\"><span class=\"comment\">#                               / _----=&gt; need-resched</span></span><br><span class=\"line\"><span class=\"comment\">#                              | / _---=&gt; hardirq/softirq</span></span><br><span class=\"line\"><span class=\"comment\">#                              || / _--=&gt; preempt-depth</span></span><br><span class=\"line\"><span class=\"comment\">#                              ||| /     delay</span></span><br><span class=\"line\"><span class=\"comment\">#           TASK-PID     CPU#  ||||   TIMESTAMP  FUNCTION</span></span><br><span class=\"line\"><span class=\"comment\">#              | |         |   ||||      |         |</span></span><br><span class=\"line\">             cat-16961   [003] .... 47683.934082: sys_openat(dfd: ffffffffffffff9c, filename: ffff9abf20f0, flags: 80000, mode: 0)</span><br><span class=\"line\">             cat-16961   [003] .... 47683.934326: sys_openat(dfd: ffffffffffffff9c, filename: ffff9ac09f20, flags: 80000, mode: 0)</span><br><span class=\"line\">             cat-16961   [003] .... 47683.935468: sys_openat(dfd: ffffffffffffff9c, filename: ffff9ab75150, flags: 80000, mode: 0)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> 0 &gt; events/syscalls/sys_enter_openat/enable</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p>我们通过设置 <code>sys_enter_openat/enable</code> 开启对于 <code>sys_enter_openat</code> 的跟踪，trace 文件中的跟踪记录格式与 <code>sys_enter_openat/format</code> 中的 print 章节的格式一致。</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">fmt</span>: <span class=\"string\">&quot;dfd: 0x%08lx, filename: 0x%08lx, flags: 0x%08lx, mode: 0x%08lx&quot;</span> ...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p><strong>Filter 跟踪记录条件过滤</strong></p>\n<p>关于 <code>sys_enter_openat/filter</code> 文件为跟踪记录的过滤条件设置，格式如下：</p>\n<p>其中：</p>\n<ul>\n<li>field 为 <code>sys_enter_openat/format</code> 中的字段。</li>\n<li>operator 为比较符<ul>\n<li>整数支持：&#x3D;&#x3D;，!&#x3D;，&lt;&#x2F;、，&lt;&#x3D;，&gt;&#x3D; 和 &amp; ，</li>\n<li>字符串支持 &#x3D;&#x3D;，!&#x3D;，~ 等，其中 ~ 支持 shell 脚本中通配符 *，？，[] 等操作。</li>\n<li>不同的条件也支持 &amp;&amp; 和 || 进行组合。</li>\n</ul>\n</li>\n</ul>\n<p>如需要通过 format 格式中的 mode 字段过滤：</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">field:umode_t mode;\toffset:40;\tsize:8;\tsigned:0;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p>只需要将进行如下设置即可：</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;mode != 0&#x27;</span> &gt;  events/syscalls/sys_enter_openat/filter</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p>如果需要清除 filter，直接设置为 0 即可：</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> 0 &gt; events/syscalls/sys_enter_openat/filter</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<h2 id=\"5-kprobe-跟踪\"><a href=\"#5-kprobe-跟踪\" class=\"headerlink\" title=\"5. kprobe 跟踪\"></a>5. kprobe 跟踪</h2><p>kprobe 为内核提供的动态跟踪机制。与第 1 节介绍的函数跟踪类似，但是 kprobe 机制允许我们跟踪函数任意位置，还可用于获取函数参数与结果返回值。使用 kprobe 机制跟踪函数须是 <code>available_filter_functions</code> 列表中的子集。</p>\n<p>kprobe 设置文件和相关文件如下所示，其中部分文件为设置 kprobe 跟踪函数后，Ftrace 自动创建：</p>\n<ul>\n<li><p><code>kprobe_events</code></p>\n<p>设置 kprobe 跟踪的事件属性；</p>\n<p>完整的设置格式如下，其中 GRP 用户可以直接定义，如果不设定默认为 <code>kprobes</code>：</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p[:[GRP/]EVENT] [MOD:]SYM[+offs]|MEMADDR [FETCHARGS] <span class=\"comment\"># 设置 probe 探测点</span></span><br><span class=\"line\">r[:[GRP/]EVENT] [MOD:]SYM[+0] [FETCHARGS] <span class=\"comment\"># 函数地址的返回跟踪</span></span><br><span class=\"line\">-:[GRP/]EVENT <span class=\"comment\"># 删除跟踪</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n</li>\n<li><p><code>kprobes/&lt;GRP&gt;/&lt;EVENT&gt;/enabled</code></p>\n<p>设置后动态生成，用于控制是否启用该内核函数的跟踪；</p>\n</li>\n<li><p><code>kprobes/&lt;GRP&gt;/&lt;EVENT&gt;/filter</code></p>\n<p>设置后动态生成，kprobe 函数跟踪过滤器，与上述的跟踪点 fliter 类似；</p>\n</li>\n<li><p><code>kprobes/&lt;GRP&gt;/&lt;EVENT&gt;/format</code></p>\n<p>设置后动态生成，kprobe 事件显示格式；</p>\n</li>\n<li><p><code>kprobe_profile</code></p>\n<p>kprobe 事件统计性能数据；</p>\n</li>\n</ul>\n<p>Kprobe 跟踪过程可以指定函数参数的显示格式，这里我们先给出 <code>sys_openat</code> 函数原型：</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SYSCALL_DEFINE4(openat, <span class=\"type\">int</span>, dfd, <span class=\"type\">const</span> <span class=\"type\">char</span> __user *, filename, <span class=\"type\">int</span>, flags,</span><br><span class=\"line\">\t\t<span class=\"type\">umode_t</span>, mode);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p><strong>跟踪函数入口参数</strong></p>\n<p>这里仍然以 <code>__arm64_sys_openat</code> 函数为例，演示使用 kpboe 机制进行跟踪：</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1</span><br><span class=\"line\"> 2</span><br><span class=\"line\"> 3</span><br><span class=\"line\"> 4</span><br><span class=\"line\"> 5</span><br><span class=\"line\"> 6</span><br><span class=\"line\"> 7</span><br><span class=\"line\"> 8</span><br><span class=\"line\"> 9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># p[:[GRP/]EVENT] [MOD:]SYM[+offs]|MEMADDR [FETCHARGS]</span></span><br><span class=\"line\"><span class=\"comment\"># GRP=my_grp EVENT=arm64_sys_openat  </span></span><br><span class=\"line\"><span class=\"comment\"># SYM=__arm64_sys_openat</span></span><br><span class=\"line\"><span class=\"comment\"># FETCHARGS = dfd=$arg1 flags=$arg3 mode=$arg4</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;p:my_grp/arm64_sys_openat __arm64_sys_openat dfd=$arg1 flags=$arg3 mode=$arg4&#x27;</span> &gt;&gt; kprobe_events</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo <span class=\"built_in\">cat</span> events/my_grp/arm64_sys_openat/format</span><br><span class=\"line\">name: __arm64_sys_openat</span><br><span class=\"line\">ID: 1475</span><br><span class=\"line\">format:</span><br><span class=\"line\">\tfield:unsigned short common_type;\toffset:0;\tsize:2;\tsigned:0;</span><br><span class=\"line\">\tfield:unsigned char common_flags;\toffset:2;\tsize:1;\tsigned:0;</span><br><span class=\"line\">\tfield:unsigned char common_preempt_count;\toffset:3;\tsize:1;\tsigned:0;</span><br><span class=\"line\">\tfield:int common_pid;\toffset:4;\tsize:4;\tsigned:1;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfield:unsigned long __probe_ip;\toffset:8;\tsize:8;\tsigned:0;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">fmt</span>: <span class=\"string\">&quot;(%lx)&quot;</span>, REC-&gt;__probe_ip</span><br><span class=\"line\"></span><br><span class=\"line\">events/my_grp/arm64_sys_openat/format</span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> 1 &gt; events/my_grp/arm64_sys_openat/enable</span><br><span class=\"line\"><span class=\"comment\"># $ sudo echo 1 &gt; options/stacktrace # 启用栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> trace</span><br><span class=\"line\"><span class=\"comment\"># tracer: nop</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># entries-in-buffer/entries-written: 38/38   #P:4</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#                                _-----=&gt; irqs-off</span></span><br><span class=\"line\"><span class=\"comment\">#                               / _----=&gt; need-resched</span></span><br><span class=\"line\"><span class=\"comment\">#                              | / _---=&gt; hardirq/softirq</span></span><br><span class=\"line\"><span class=\"comment\">#                              || / _--=&gt; preempt-depth</span></span><br><span class=\"line\"><span class=\"comment\">#                              ||| /     delay</span></span><br><span class=\"line\"><span class=\"comment\">#           TASK-PID     CPU#  ||||   TIMESTAMP  FUNCTION</span></span><br><span class=\"line\"><span class=\"comment\">#              | |         |   ||||      |         |</span></span><br><span class=\"line\">             cat-17025   [002] d... 52539.651096: arm64_sys_openat: (__arm64_sys_openat+0x0/0xb4) dfd=0xffff8000141cbeb0 flags=0x1bf mode=0xffff800011141778</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭，注意需要先 echo 0 &gt; enable 停止跟踪</span></span><br><span class=\"line\"><span class=\"comment\"># 然后再使用 &quot;-:my_grp/arm64_sys_openat&quot; 停止，否则会正在使用或者忙的错误</span></span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> 0 &gt; events/my_grp/arm64_sys_openat/enable</span><br><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;-:my_grp/arm64_sys_openat&#x27;</span> &gt;&gt; kprobe_events</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p><strong>跟踪函数返回值</strong></p>\n<p>kprobe 可用于跟踪函数返回值，格式如下：</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r[:[GRP/]EVENT] [MOD:]SYM[+offs]|MEMADDR [FETCHARGS]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p>例如：</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;r:my_grp/arm64_sys_openat __arm64_sys_openat ret=$retval&#x27;</span> &gt;&gt; kprobe_events</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p>变量 <code>$retval</code> 参数表示函数返回值，其他的使用格式与 kprobe 类似。</p>\n<h2 id=\"6-uprobe-跟踪\"><a href=\"#6-uprobe-跟踪\" class=\"headerlink\" title=\"6. uprobe 跟踪\"></a>6. uprobe 跟踪</h2><p>uprobe 为用户空间的动态跟踪机制，格式和使用方式与 kprobe 的方式类似，但是由于是用户态程序跟踪需要指定跟踪的二进制文件和偏移量。</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p[:[GRP/]EVENT]] PATH:OFFSET [FETCHARGS]  <span class=\"comment\"># 跟踪函数入口</span></span><br><span class=\"line\">r[:[GRP/]EVENT]] PATH:OFFSET [FETCHARGS]  <span class=\"comment\"># 跟踪函数返回值</span></span><br><span class=\"line\">-:[GRP/]EVENT]                            <span class=\"comment\"># 删除跟踪点</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p>这里以跟踪 <code>/bin/bash</code> 二进制文件中的 <code>readline()</code> 函数为例：</p>\n<p>| </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1</span><br><span class=\"line\"> 2</span><br><span class=\"line\"> 3</span><br><span class=\"line\"> 4</span><br><span class=\"line\"> 5</span><br><span class=\"line\"> 6</span><br><span class=\"line\"> 7</span><br><span class=\"line\"> 8</span><br><span class=\"line\"> 9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> | </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ readelf -s /bin/bash | grep -w readline</span><br><span class=\"line\">   920: 00000000000d6070   208 FUNC    GLOBAL DEFAULT   13 readline</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;p:my_grp/readline /bin/bash:0xd6070&#x27;</span> &gt;&gt; uprobe_events</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> 1 &gt; events/my_grp/readline/enable  </span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> trace</span><br><span class=\"line\"><span class=\"comment\"># tracer: nop</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># entries-in-buffer/entries-written: 1/1   #P:4</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#                                _-----=&gt; irqs-off</span></span><br><span class=\"line\"><span class=\"comment\">#                               / _----=&gt; need-resched</span></span><br><span class=\"line\"><span class=\"comment\">#                              | / _---=&gt; hardirq/softirq</span></span><br><span class=\"line\"><span class=\"comment\">#                              || / _--=&gt; preempt-depth</span></span><br><span class=\"line\"><span class=\"comment\">#                              ||| /     delay</span></span><br><span class=\"line\"><span class=\"comment\">#           TASK-PID     CPU#  ||||   TIMESTAMP  FUNCTION</span></span><br><span class=\"line\"><span class=\"comment\">#              | |         |   ||||      |         |</span></span><br><span class=\"line\">            bash-14951   [003] .... 54570.055093: readline: (0xaaaab3ce6070)</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> 0 &gt; events/my_grp/readline/enable</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;-:my_grp/readline&#x27;</span> &gt;&gt; uprobe_events</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> |</p>\n<p>uprobe 跟踪是跟踪用户态的函数，因此需要指定二进制文件+符号偏移量才能进行跟踪。不同系统中的二进制版本或者编译方式不同，会导致函数符号表的位置不同，因此需要跟踪前进行确认。</p>\n<h2 id=\"7-总结\"><a href=\"#7-总结\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h2><p>至此，我们完整介绍 Ftrace 的整体应用场景，也通过具体的设置，学习了使用的完整流程。</p>\n<p>实际问题排查中，考虑到效率和易用性，推荐大家这样选择：</p>\n<ul>\n<li>如果排查问题机器上支持 eBPF技术，首选 <a href=\"https://github.com/iovisor/bcc/blob/master/tools/trace_example.txt\">BCC trace</a> 及相关工具；</li>\n<li>否则推荐使用 <a href=\"https://github.com/brendangregg/perf-tools\">perf-tools</a> ；</li>\n<li>最后的招数就是使用本文 Ftrace 的完整流程了。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>但目前基于 eBPF 的工具还未支持 <code>function_graph</code> 跟踪器，特定场景下还需要 ftrace 的 <code>function_graph</code> 跟踪器的配合。</p></blockquote>\n<p>Ftrace 与 eBPF 并非是相互替代，而是相互补充协同关系，在后续的问题排查案例中我们将看到这一点。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://blog.51cto.com/u_15069487/2612548\">高效分析 Linux 内核源码</a> ， 相关代码参见<a href=\"https://github.com/x-lugoo/Anytime-Note/tree/master/trace\">这里</a> 。</li>\n<li><a href=\"https://www.cnblogs.com/arnoldlu/p/9752061.html\">Linux kprobe 调试技术使用</a></li>\n<li><a href=\"https://blog.csdn.net/rikeyone/article/details/95081117\">ftrace 在实际问题中的应用</a></li>\n<li>《Systems Performance Enterprise and the Cloud 2nd Edition》</li>\n</ul>\n","text":"问题排查利器：Linux 原生跟踪工具 Ftrace 必知必会本文地址：https://www.ebpf.top/post/ftrace_tools TLDR，...","permalink":"/post/LINUX/问题排查利器：Linux 原生跟踪工具 Ftrace 必知必会","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[{"name":"tools","slug":"tools","count":1,"path":"api/categories/tools.json"},{"name":"LINUX","slug":"tools/LINUX","count":1,"path":"api/categories/tools/LINUX.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"kprobe","slug":"kprobe","count":1,"path":"api/tags/kprobe.json"},{"name":"ftrace","slug":"ftrace","count":1,"path":"api/tags/ftrace.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%88%A9%E5%99%A8%EF%BC%9ALinux-%E5%8E%9F%E7%94%9F%E8%B7%9F%E8%B8%AA%E5%B7%A5%E5%85%B7-Ftrace-%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A\"><span class=\"toc-text\">问题排查利器：Linux 原生跟踪工具 Ftrace 必知必会</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%86%85%E6%A0%B8%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%B7%9F%E8%B8%AA\"><span class=\"toc-text\">1. 内核函数调用跟踪</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%87%BD%E6%95%B0%E8%A2%AB%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B%EF%BC%88%E6%A0%88%EF%BC%89\"><span class=\"toc-text\">2. 函数被调用流程（栈）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%AD%90%E6%B5%81%E7%A8%8B%E8%B7%9F%E8%B8%AA%EF%BC%88%E6%A0%88%EF%BC%89\"><span class=\"toc-text\">3. 函数调用子流程跟踪（栈）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%86%85%E6%A0%B8%E8%B7%9F%E8%B8%AA%E7%82%B9%EF%BC%88tracepoint%EF%BC%89%E8%B7%9F%E8%B8%AA\"><span class=\"toc-text\">4. 内核跟踪点（tracepoint）跟踪</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-kprobe-%E8%B7%9F%E8%B8%AA\"><span class=\"toc-text\">5. kprobe 跟踪</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-uprobe-%E8%B7%9F%E8%B8%AA\"><span class=\"toc-text\">6. uprobe 跟踪</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">7. 总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"我在 Elasticsearch 集群内应该设置多少个分片？","uid":"0a458e361f4a92244bc682099842a8db","slug":"MIDDLEWARE/我在 Elasticsearch 集群内应该设置多少个分片？","date":"2024-05-29T09:22:31.000Z","updated":"2025-09-30T03:26:54.328Z","comments":true,"path":"api/articles/MIDDLEWARE/我在 Elasticsearch 集群内应该设置多少个分片？.json","keywords":"XuGuangSheng","cover":"/covers/elasticsearch.jpg","text":"我在 Elasticsearch 集群内应该设置多少个分片？我在 Elasticsearch 集群内应该设置多少个分片？ | Elastic Blog Elas...","permalink":"/post/MIDDLEWARE/我在 Elasticsearch 集群内应该设置多少个分片？","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"Elasticsearch","slug":"Elasticsearch","count":1,"path":"api/categories/Elasticsearch.json"},{"name":"MIDDLEWARE","slug":"Elasticsearch/MIDDLEWARE","count":1,"path":"api/categories/Elasticsearch/MIDDLEWARE.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"elastic","slug":"elastic","count":1,"path":"api/tags/elastic.json"},{"name":"guide","slug":"guide","count":1,"path":"api/tags/guide.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"zhcon安装过程记录","uid":"c8fc4014b00b09e3a48ea3095cec49d3","slug":"LINUX/zhcon安装过程记录","date":"2024-05-20T17:35:44.000Z","updated":"2025-09-30T03:26:40.423Z","comments":true,"path":"api/articles/LINUX/zhcon安装过程记录.json","keywords":"XuGuangSheng","cover":"/covers/zhcon.jpg","text":"zhcon安装过程记录参考资料： 1. http://www.linuxdiyf.com/viewarticle.php?id=81796 需要下载的文件有两个...","permalink":"/post/LINUX/zhcon安装过程记录","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"zhcon","slug":"zhcon","count":1,"path":"api/categories/zhcon.json"},{"name":"LINUX","slug":"zhcon/LINUX","count":1,"path":"api/categories/zhcon/LINUX.json"}],"tags":[{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"http","slug":"http","count":6,"path":"api/tags/http.json"},{"name":"include","slug":"include","count":1,"path":"api/tags/include.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}