{"title":"NFQUEUE机制导致DNS请求5秒超时分析","uid":"1bbad1a585c4bcc2381dfee0a793a3ef","slug":"LINUX/NFQUEUE机制导致DNS请求5秒超时分析","date":"2024-08-12T10:01:18.000Z","updated":"2025-09-30T03:26:34.814Z","comments":true,"path":"api/articles/LINUX/NFQUEUE机制导致DNS请求5秒超时分析.json","keywords":"XuGuangSheng","cover":"/covers/nfqueuedns5.jpg","content":"<h1 id=\"NFQUEUE机制导致DNS请求5秒超时分析\"><a href=\"#NFQUEUE机制导致DNS请求5秒超时分析\" class=\"headerlink\" title=\"NFQUEUE机制导致DNS请求5秒超时分析\"></a>NFQUEUE机制导致DNS请求5秒超时分析</h1><p>在一台<code>CentOS 7.0</code>服务器(内核版本号:<code>3.10.0-123.el7.x86_64</code>)上安装我们的安全防护程序后，会出现<code>curl</code>访问网址超时5秒的情况。现象如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]</span><br><span class=\"line\"></span><br><span class=\"line\">real\t0m5.120s</span><br><span class=\"line\">user\t0m0.002s</span><br><span class=\"line\">sys\t0m0.009s</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>strace</code>分析程序调用的过程:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strace -f -tt -o curl.strace curl -s www.baidu.com -o /dev/null</span><br></pre></td></tr></table></figure>\n\n<p>从<code>strace</code>输出可以看到, 第一次<code>curl</code>调用<code>sendmmsg</code>同时发送了两个<code>DNS</code>数据包，分别是<code>A</code>记录和<code>AAAA</code>记录请求，但是只收到了<code>A</code>记录响应包:</p>\n<p><img src=\"https://just4coding.com/images/2021-12-29/1.png\"></p>\n<p>然后等待5秒超时后，依次调用<code>sendto</code>和<code>recvfrom</code>串行处理两个<code>DNS</code>请求, 这次两个<code>DNS</code>响应全部收到后，继续向下执行:</p>\n<p><img src=\"https://just4coding.com/images/2021-12-29/2.png\"></p>\n<p>而从抓包结果分析，<code>tcpdump</code>只能看到第一次同时发送的两个<code>DNS</code>请求中的<code>A</code>记录请求，<code>AAAA</code>记录请求数据包被内核协议栈丢弃了:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">17:04:24.772049 IP 10.10.10.89.57416 &gt; 114.114.114.114.53: 37081+ A? www.baidu.com. (31)</span><br><span class=\"line\">17:04:24.773693 IP 114.114.114.114.53 &gt; 10.10.10.89.57416: 37081 3/0/0 CNAME www.a.shifen.com., A 180.101.49.12, A 180.101.49.11 (90)</span><br><span class=\"line\">17:04:29.776474 IP 10.10.10.89.57416 &gt; 114.114.114.114.53: 37081+ A? www.baidu.com. (31)</span><br><span class=\"line\">17:04:29.778694 IP 114.114.114.114.53 &gt; 10.10.10.89.57416: 37081 3/0/0 CNAME www.a.shifen.com., A 180.101.49.11, A 180.101.49.12 (90)</span><br><span class=\"line\">17:04:29.778925 IP 10.10.10.89.57416 &gt; 114.114.114.114.53: 42471+ AAAA? www.baidu.com. (31)</span><br><span class=\"line\">17:04:29.780523 IP 114.114.114.114.53 &gt; 10.10.10.89.57416: 42471 1/1/0 CNAME www.a.shifen.com. (115)</span><br></pre></td></tr></table></figure>\n\n<p>在<code>Google</code>上搜索<code>DNS 5秒</code>有非常多关于类似现象的文章介绍，但基本都是在<code>Kubernetes</code>环境中发生。我们的环境只是普通的<code>CentOS</code>环境，为何也会发生呢？</p>\n<p><code>weave</code>公司的文章<a href=\"https://www.weave.works/blog/racy-conntrack-and-dns-lookup-timeouts\">Racy conntrack and DNS lookup timeouts</a>介绍了在较旧版本内核的<code>conntrack</code>模块中存在的BUG会导致UDP丢包。其中一种场景是当不同的线程通过相同的<code>socket</code>发送<code>UDP</code>数据包时，存在竞争条件两个数据包都会各自创建一个<code>conntrack</code>条目，但两个条目所包含的<code>tuple</code>信息是一致的，这种情况会导致丢包。</p>\n<p>从现象看，我们的场景丢包根因应该也是由于<code>conntrack</code>模块的BUG导致丢包，但我们的这种场景并不存在多个线程同时使用相同<code>socket</code>进行发送。我们的防护逻辑是内核模块通过<code>NFQUEUE</code>机制将数据包送到用户态，由用户态对数据包进行过滤裁决是否允许放行。因而我们怀疑是由于<code>NFQUEUE</code>机制导致<code>conntrack</code>模块这个已知BUG的触发。</p>\n<p>我们写一个简单的内核模块将<code>DNS</code>请求通过<code>NFQUEUE</code>送到用户态, 用户态程序直接放行, 这样来验证能否复现问题。<br>内核模块代码，<code>nfqdns.c</code>内容:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/module.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/kernel.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/init.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/skbuff.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/ip.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/netfilter.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/netfilter_ipv4.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;net/udp.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">MODULE_LICENSE(<span class=\"string\">&quot;GPL&quot;</span>);</span><br><span class=\"line\">MODULE_DESCRIPTION(<span class=\"string\">&quot;nfqdns&quot;</span>);</span><br><span class=\"line\">MODULE_ALIAS(<span class=\"string\">&quot;module nfqdns netfiler&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> nfqueue_no = <span class=\"number\">0</span>;</span><br><span class=\"line\">MODULE_PARM_DESC(<span class=\"built_in\">queue</span>, <span class=\"string\">&quot;nfquene number&quot;</span>);</span><br><span class=\"line\">module_param(nfqueue_no, <span class=\"type\">int</span>, <span class=\"number\">0600</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">nf_hook_out</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"keyword\">struct</span> nf_hook_ops *ops,</span></span><br><span class=\"line\"><span class=\"params\">                   <span class=\"keyword\">struct</span> sk_buff *sk,</span></span><br><span class=\"line\"><span class=\"params\">                   <span class=\"type\">const</span> <span class=\"keyword\">struct</span> net_device *in,</span></span><br><span class=\"line\"><span class=\"params\">                   <span class=\"type\">const</span> <span class=\"keyword\">struct</span> net_device *out,</span></span><br><span class=\"line\"><span class=\"params\">                   <span class=\"type\">const</span> <span class=\"keyword\">struct</span> nf_hook_state *state)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">udphdr</span> *<span class=\"title\">udph</span> =</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iphdr</span> *<span class=\"title\">iph</span> =</span> ip_hdr(sk);</span><br><span class=\"line\"></span><br><span class=\"line\">    u8 proto = iph-&gt;protocol;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (proto != IPPROTO_UDP) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NF_ACCEPT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    udph = (<span class=\"keyword\">struct</span> udphdr *) skb_transport_header(sk);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (htons(udph-&gt;dest) == <span class=\"number\">53</span>) &#123;</span><br><span class=\"line\">        printk(KERN_INFO <span class=\"string\">&quot;[nfqdns]: %pI4:%d-&gt;%pI4:%d queued in [%d], skb: %p, ct: %p, tid: %d\\n&quot;</span>,</span><br><span class=\"line\">                &amp;iph-&gt;saddr, htons(udph-&gt;source), &amp;iph-&gt;daddr, htons(udph-&gt;dest), nfqueue_no,</span><br><span class=\"line\">                sk, sk-&gt;nfct, htons(*(<span class=\"type\">unsigned</span> <span class=\"type\">short</span>*)(udph + <span class=\"number\">1</span>)));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NF_QUEUE_NR(nfqueue_no);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> NF_ACCEPT;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_hook_ops</span> <span class=\"title\">nfhooks</span>[] =</span> &#123;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    .hook = nf_hook_out,</span><br><span class=\"line\">    .owner = THIS_MODULE,</span><br><span class=\"line\">    .pf = NFPROTO_IPV4,</span><br><span class=\"line\">    .hooknum = NF_INET_POST_ROUTING,</span><br><span class=\"line\">    .priority = NF_IP_PRI_FIRST,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> __init <span class=\"title function_\">nfqdns_init</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    nf_register_hooks(nfhooks, ARRAY_SIZE(nfhooks));</span><br><span class=\"line\"></span><br><span class=\"line\">    printk(KERN_INFO <span class=\"string\">&quot;nfqdns module init\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> __exit <span class=\"title function_\">nfqdns_exit</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    nf_unregister_hooks(nfhooks, ARRAY_SIZE(nfhooks));</span><br><span class=\"line\"></span><br><span class=\"line\">    printk(KERN_INFO <span class=\"string\">&quot;nfqdns module exit\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module_init(nfqdns_init);</span><br><span class=\"line\">module_exit(nfqdns_exit);</span><br></pre></td></tr></table></figure>\n\n<p>用户态程序<code>user.c</code>代码:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/netfilter.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libnetfilter_queue/libnetfilter_queue.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">cb</span><span class=\"params\">(<span class=\"keyword\">struct</span> nfq_q_handle *qh, <span class=\"keyword\">struct</span> nfgenmsg *nfmsg,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">struct</span> nfq_data *nfa, <span class=\"type\">void</span> *data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">u_int32_t</span> id = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nfqnl_msg_packet_hdr</span> *<span class=\"title\">ph</span>;</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span>  m = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ph = nfq_get_msg_packet_hdr(nfa);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ph) &#123;</span><br><span class=\"line\">        id = ntohl(ph-&gt;packet_id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;packet: %u\\n&quot;</span>, id);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nfq_set_verdict(qh, id, NF_ACCEPT, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nfq_handle</span> *<span class=\"title\">h</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nfq_q_handle</span> *<span class=\"title\">qh</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nfnl_handle</span> *<span class=\"title\">nh</span>;</span></span><br><span class=\"line\">    <span class=\"type\">int</span>    fd;</span><br><span class=\"line\">    <span class=\"type\">int</span> rv;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[<span class=\"number\">4096</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    assert((h = nfq_open()) != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    assert(nfq_unbind_pf(h, AF_INET) == <span class=\"number\">0</span>);</span><br><span class=\"line\">    assert(nfq_bind_pf(h, AF_INET) == <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    assert((qh = nfq_create_queue(h, <span class=\"number\">0</span>, &amp;cb, <span class=\"literal\">NULL</span>)) != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    assert(nfq_set_mode(qh, NFQNL_COPY_PACKET, <span class=\"number\">0xffff</span>) == <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    fd = nfq_fd(h);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((rv = recv(fd, buf, <span class=\"keyword\">sizeof</span>(buf), <span class=\"number\">0</span>)) &amp;&amp; rv &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        nfq_handle_packet(h, buf, rv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    nfq_destroy_queue(qh);</span><br><span class=\"line\"></span><br><span class=\"line\">    nfq_close(h);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Makefile</code>内容如下:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj-m += nfqdns.o</span><br><span class=\"line\"><span class=\"section\">all:</span></span><br><span class=\"line\">    make -C /lib/modules/<span class=\"variable\">$(<span class=\"built_in\">shell</span> uname -r)</span>/build M=<span class=\"variable\">$(PWD)</span> modules</span><br><span class=\"line\">    gcc user.c  -l netfilter_queue -o user.out</span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">    make -C /lib/modules/<span class=\"variable\">$(<span class=\"built_in\">shell</span> uname -r)</span>/build M=<span class=\"variable\">$(PWD)</span> clean</span><br></pre></td></tr></table></figure>\n\n<p>因为BUG存在于<code>nf_conntrack</code>模块中，确保加载<code>nf_conntrack</code>和<code>nf_conntrack_ipv4</code>模块，然后加载我们的实验内核模块:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modprobe nf_conntrack nf_conntrack_ipv4</span><br><span class=\"line\">insmod ./nfqdns.ko</span><br></pre></td></tr></table></figure>\n\n<p>接着运行用户态程序:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./user.out</span><br></pre></td></tr></table></figure>\n\n<p>此时执行<code>curl</code>命令依然可以复现<code>DNS</code>超时现象，可以确定和<code>NFQUEUE</code>机制有关系。</p>\n<p>从我们内核模块的日志输出可以看到在执行<code>nf_hook_out</code>时，<code>AAAA</code>记录的请求数据包还没有被丢弃，也可以看到第一次发送的两个<code>DNS</code>请求数据包的<code>conntrack</code>条目确实不同:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[467402.634931] [nfqdns]: 10.10.10.89:56578-&gt;114.114.114.114:53 queued in [0], skb: ffff880067d15d00, ct: ffff8800905ead68, tid: 8725</span><br><span class=\"line\">[467402.634958] [nfqdns]: 10.10.10.89:56578-&gt;114.114.114.114:53 queued in [0], skb: ffff880067d15c00, ct: ffff8800905ea750, tid: 5451</span><br><span class=\"line\">[467407.643516] [nfqdns]: 10.10.10.89:56578-&gt;114.114.114.114:53 queued in [0], skb: ffff8800b37f9f00, ct: ffff8800905ead68, tid: 8725</span><br><span class=\"line\">[467407.645559] [nfqdns]: 10.10.10.89:56578-&gt;114.114.114.114:53 queued in [0], skb: ffff8800b8fe3100, ct: ffff8800905ead68, tid: 5451</span><br></pre></td></tr></table></figure>\n\n<p><code>conntrack</code>上述BUG丢弃数据包是发生在<code>conntrack</code>条目确认阶段的<code>__nf_conntrack_confirm</code>函数中。<code>conntrack</code>的原理和实现可以参考<a href=\"https://arthurchiao.art/blog/conntrack-design-and-implementation-zh/\">这篇文章</a>, 本文不详述。</p>\n<p>我们通过<code>systemtap</code>来验证丢包是否发生在这里。<code>systemtap</code>脚本<code>t.stp</code>内容如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%&#123;</span><br><span class=\"line\">#include &lt;net/udp.h&gt;</span><br><span class=\"line\">%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function read_tid: long (udphdr: long) %&#123;</span><br><span class=\"line\">    struct udphdr *udph = (struct udphdr *)STAP_ARG_udphdr;</span><br><span class=\"line\">    unsigned short tid = htons(*(unsigned short *)(udph + 1));</span><br><span class=\"line\">    STAP_RETVALUE = (long) tid;</span><br><span class=\"line\">%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">probe module(&quot;nf_conntrack&quot;).function(&quot;__nf_conntrack_confirm&quot;) &#123;</span><br><span class=\"line\">    iphdr = __get_skb_iphdr($skb)</span><br><span class=\"line\">    saddr = format_ipaddr(__ip_skb_saddr(iphdr), %&#123; AF_INET %&#125;)</span><br><span class=\"line\">    daddr = format_ipaddr(__ip_skb_daddr(iphdr), %&#123; AF_INET %&#125;)</span><br><span class=\"line\">    protocol = __ip_skb_proto(iphdr)</span><br><span class=\"line\"></span><br><span class=\"line\">    udphdr = __get_skb_udphdr($skb)</span><br><span class=\"line\">    if (protocol == %&#123; IPPROTO_UDP %&#125;) &#123;</span><br><span class=\"line\">        dport = __tcp_skb_dport(udphdr)</span><br><span class=\"line\">        sport = __tcp_skb_sport(udphdr)</span><br><span class=\"line\">        if (dport == 53 || sport == 53) &#123;</span><br><span class=\"line\">            printf(&quot;__nf_conntrack_confirm: %s:%d-&gt;%s:%d TID: %d, ct: %p, ctinfo: %d\\n&quot;, saddr, sport, daddr, dport, read_tid(udphdr), $skb-&gt;nfct, $ctinfo)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">probe module(&quot;nf_conntrack&quot;).function(&quot;__nf_conntrack_confirm&quot;).return &#123;</span><br><span class=\"line\">    printf(&quot;__nf_conntrack_confirm: return %ld\\n&quot;, $return)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从<code>systemtap</code>执行结果可以确定处理第二个<code>DNS</code>请求数据包时，函数<code>__nf_conntrack_confirm</code>函数返回了<code>0(NF_DROP)</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost <span class=\"built_in\">fg</span>]</span><br><span class=\"line\">__nf_conntrack_confirm: 10.10.10.89:58305-&gt;114.114.114.114:53 TID: 16998, ct: 0xffff8800905eb860, ctinfo: 2</span><br><span class=\"line\">__nf_conntrack_confirm: <span class=\"built_in\">return</span> 1</span><br><span class=\"line\">__nf_conntrack_confirm: 10.10.10.89:58305-&gt;114.114.114.114:53 TID: 568, ct: 0xffff8800905eb248, ctinfo: 2</span><br><span class=\"line\">__nf_conntrack_confirm: <span class=\"built_in\">return</span> 0</span><br></pre></td></tr></table></figure>\n\n<p>而查看<code>3.10.0-123.el7.x86_64</code>版本的<code>__nf_conntrack_confirm(net/netfilter/nf_conntrack_core.c</code>)源码如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span></span><br><span class=\"line\">__nf_conntrack_confirm(<span class=\"keyword\">struct</span> sk_buff *skb)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash, repl_hash;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack_tuple_hash</span> *<span class=\"title\">h</span>;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conn</span> *<span class=\"title\">ct</span>;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conn_help</span> *<span class=\"title\">help</span>;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conn_tstamp</span> *<span class=\"title\">tstamp</span>;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hlist_nulls_node</span> *<span class=\"title\">n</span>;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ip_conntrack_info</span> <span class=\"title\">ctinfo</span>;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">net</span> *<span class=\"title\">net</span>;</span></span><br><span class=\"line\">        u16 zone;</span><br><span class=\"line\"></span><br><span class=\"line\">        ct = nf_ct_get(skb, &amp;ctinfo);</span><br><span class=\"line\">        net = nf_ct_net(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CTINFO2DIR(ctinfo) != IP_CT_DIR_ORIGINAL)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> NF_ACCEPT;</span><br><span class=\"line\"></span><br><span class=\"line\">        zone = nf_ct_zone(ct);</span><br><span class=\"line\">        </span><br><span class=\"line\">        hash = *(<span class=\"type\">unsigned</span> <span class=\"type\">long</span> *)&amp;ct-&gt;tuplehash[IP_CT_DIR_REPLY].hnnode.pprev;</span><br><span class=\"line\">        hash = hash_bucket(hash, net);</span><br><span class=\"line\">        repl_hash = hash_conntrack(net, zone,</span><br><span class=\"line\">                                   &amp;ct-&gt;tuplehash[IP_CT_DIR_REPLY].tuple);</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        NF_CT_ASSERT(!nf_ct_is_confirmed(ct));</span><br><span class=\"line\">        pr_debug(<span class=\"string\">&quot;Confirming conntrack %p\\n&quot;</span>, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        spin_lock_bh(&amp;nf_conntrack_lock);</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (unlikely(nf_ct_is_dying(ct))) &#123;</span><br><span class=\"line\">                spin_unlock_bh(&amp;nf_conntrack_lock);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> NF_ACCEPT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        hlist_nulls_for_each_entry(h, n, &amp;net-&gt;ct.hash[hash], hnnode)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nf_ct_tuple_equal(&amp;ct-&gt;tuplehash[IP_CT_DIR_ORIGINAL].tuple,</span><br><span class=\"line\">                                      &amp;h-&gt;tuple) &amp;&amp;</span><br><span class=\"line\">                    zone == nf_ct_zone(nf_ct_tuplehash_to_ctrack(h)))</span><br><span class=\"line\">                        <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">        hlist_nulls_for_each_entry(h, n, &amp;net-&gt;ct.hash[repl_hash], hnnode)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nf_ct_tuple_equal(&amp;ct-&gt;tuplehash[IP_CT_DIR_REPLY].tuple,</span><br><span class=\"line\">                                      &amp;h-&gt;tuple) &amp;&amp;</span><br><span class=\"line\">                    zone == nf_ct_zone(nf_ct_tuplehash_to_ctrack(h)))</span><br><span class=\"line\">                        <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        hlist_nulls_del_rcu(&amp;ct-&gt;tuplehash[IP_CT_DIR_ORIGINAL].hnnode);</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        ct-&gt;timeout.expires += jiffies;</span><br><span class=\"line\">        add_timer(&amp;ct-&gt;timeout);</span><br><span class=\"line\">        <span class=\"type\">atomic_inc</span>(&amp;ct-&gt;ct_general.use);</span><br><span class=\"line\">        ct-&gt;status |= IPS_CONFIRMED;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        tstamp = nf_conn_tstamp_find(ct);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tstamp) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (skb-&gt;tstamp.tv64 == <span class=\"number\">0</span>)</span><br><span class=\"line\">                        __net_timestamp(skb);</span><br><span class=\"line\"></span><br><span class=\"line\">                tstamp-&gt;start = ktime_to_ns(skb-&gt;tstamp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        __nf_conntrack_hash_insert(ct, hash, repl_hash);</span><br><span class=\"line\">        NF_CT_STAT_INC(net, insert);</span><br><span class=\"line\">        spin_unlock_bh(&amp;nf_conntrack_lock);</span><br><span class=\"line\"></span><br><span class=\"line\">        help = nfct_help(ct);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (help &amp;&amp; help-&gt;helper)</span><br><span class=\"line\">                nf_conntrack_event_cache(IPCT_HELPER, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        nf_conntrack_event_cache(master_ct(ct) ?</span><br><span class=\"line\">                                 IPCT_RELATED : IPCT_NEW, ct);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NF_ACCEPT;</span><br><span class=\"line\"></span><br><span class=\"line\">out:</span><br><span class=\"line\">        NF_CT_STAT_INC(net, insert_failed);</span><br><span class=\"line\">        spin_unlock_bh(&amp;nf_conntrack_lock);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NF_DROP;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从代码可以看到，在从<code>conntrack</code>表中找到<code>tuple</code>信息一致的条目时，会跳转到<code>out</code>标签处，返回<code>NF_DROP</code>将数据包丢弃。</p>\n<p>在更高版本的<code>CentOS</code>内核中修复了这个问题, <code>CentOS7.8</code>(内核版本:<code>3.10.0-1127.el7.x86_64</code>)的相同位置增加了冲突处理的逻辑来修复这个问题:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out:</span><br><span class=\"line\">    nf_ct_add_to_dying_list(ct);</span><br><span class=\"line\">    ret = nf_ct_resolve_clash(net, skb, ctinfo, h);</span><br><span class=\"line\">dying:</span><br><span class=\"line\">    nf_conntrack_double_unlock(hash, reply_hash);</span><br><span class=\"line\">    NF_CT_STAT_INC(net, insert_failed);</span><br><span class=\"line\">    local_bh_enable();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br></pre></td></tr></table></figure>\n\n<p>从源码中我们也可以看到当出现这个问题时<code>conntrack</code>模块的<code>insert_failed</code>统计值会增加。我们可以通过<code>conntrack -S</code>命令来查看统计值。通过验证可以看到发生该现象时<code>insert_failed</code>统计值确实增加了:</p>\n<p><img src=\"https://just4coding.com/images/2021-12-29/3.png\"></p>\n<p>那么为什么<code>NFQUEUE</code>机制会触发该BUG呢？<br>从<code>curl</code>的<code>strace</code>输出可以看到，<code>curl</code>调用<code>sendmmsg</code>同时发送<code>A</code>和<code>AAAA</code>两个<code>DNS</code>请求。<br>系统调用<code>sendmmsg</code>的实现是<code>__sys_sendmmsg(net/socket.c)</code>, 它会循环调用<code>___sys_sendmsg</code>来发送两个数据包:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (datagrams &lt; vlen) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (MSG_CMSG_COMPAT &amp; flags) &#123;</span><br><span class=\"line\">                err = ___sys_sendmsg(sock, (<span class=\"keyword\">struct</span> msghdr __user *)compat_entry,</span><br><span class=\"line\">                                     &amp;msg_sys, flags, &amp;used_address);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                err = __put_user(err, &amp;compat_entry-&gt;msg_len);</span><br><span class=\"line\">                ++compat_entry;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                err = ___sys_sendmsg(sock,</span><br><span class=\"line\">                                     (<span class=\"keyword\">struct</span> msghdr __user *)entry,</span><br><span class=\"line\">                                     &amp;msg_sys, flags, &amp;used_address);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                err = put_user(err, &amp;entry-&gt;msg_len);</span><br><span class=\"line\">                ++entry;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        ++datagrams;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体网络发包过程可参考<a href=\"https://zhuanlan.zhihu.com/p/373060740\">这篇文章</a>。本文不详述。<code>___sys_sendmsg</code>函数会一直调用到协议栈的<code>ip_output(net/ipv4/ip_output.c)</code>函数:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ip_output</span><span class=\"params\">(<span class=\"keyword\">struct</span> sk_buff *skb)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">net_device</span> *<span class=\"title\">dev</span> =</span> skb_dst(skb)-&gt;dev;</span><br><span class=\"line\"></span><br><span class=\"line\">        IP_UPD_PO_STATS(dev_net(dev), IPSTATS_MIB_OUT, skb-&gt;len);</span><br><span class=\"line\"></span><br><span class=\"line\">        skb-&gt;dev = dev;</span><br><span class=\"line\">        skb-&gt;protocol = htons(ETH_P_IP);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> NF_HOOK_COND(NFPROTO_IPV4, NF_INET_POST_ROUTING, skb, <span class=\"literal\">NULL</span>, dev,</span><br><span class=\"line\">                            ip_finish_output,</span><br><span class=\"line\">                            !(IPCB(skb)-&gt;flags &amp; IPSKB_REROUTED));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>conntrack</code>实现中，外发连接的<code>conntrack</code>条目的创建是在<code>LOCAL_OUT</code>阶段，而条目确认也就是真正插入<code>conntrack</code>表是在<code>POST_ROUTING</code>阶段。这里的<code>NF_HOOK_COND</code>会迭代调用<code>netfilter</code>框架中注册的一系列<code>hook</code>函数。<code>nf_conntrack_ipv4</code>模块在该阶段注册了<code>ipv4_confirm(net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.c)</code>函数，并且优先级为最低，最后才会执行。当没有加载我们的内核模块时，<code>NF_HOOK_COND</code>会一直执行到<code>ipv4_confirm</code>, 最终调用到<code>__nf_conntrack_confirm</code>函数，将<code>conntrack</code>条目插入<code>conntrack</code>表，之后层层返回。处理第二个数据包时，在<code>LOCAL_OUT</code>阶段处理时已经可以查到插入的<code>conntrack</code>条目，因而不会再给该数据包创建<code>conntrack</code>条目。而加载我们的内核模块后，我们在<code>POST_ROUTING</code>阶段注册的<code>nf_hook_out</code>函数优先级高于<code>nf_conntrack_ipv4</code>的<code>ipv4_confirm</code>函数，会先得到执行。我们返回<code>NF_QUEUE</code>之后，<code>NF_HOOK_COND</code>就会直接返回<code>0</code>。后续的函数执行需要内核收到用户态程序的<code>netlink</code>消息后再继续执行。因而<code>__nf_conntrack_confirm</code>这时并未得到执行。层层返回到<code>___sys_send_msg</code>之后，再发送第二个数据包。在<code>LOCAL_OUT</code>阶段由于在<code>conntrack</code>表中不能查找到相应的<code>conntrack</code>条目，所以会给该数据包再创建<code>conntrack</code>条目，最终触发BUG。</p>\n<p>在存在该BUG的系统上可以通过在<code>/etc/resolv.conf</code>中添加<code>options single-request-reopen</code>来规避:</p>\n<p>从<code>man 5 resolv.conf</code>可以看到相关说明:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">single-request-reopen (since glibc 2.9)</span><br><span class=\"line\">     The resolver uses the same socket for the A and AAAA requests.  Some hardware mistakenly sends back only one reply.  When that happens the client system</span><br><span class=\"line\">     will  sit  and  wait for the second reply.  Turning this option on changes this behavior so that if two requests from the same port are not handled cor‐</span><br><span class=\"line\">     rectly it will close the  socket and open a new one before sending the second request.</span><br></pre></td></tr></table></figure>\n\n<p>这样就不会同时发送<code>A</code>和<code>AAAA</code>请求包，而是<code>A</code>请求收到回应包再发送<code>AAAA</code>请求，从而能在启用<code>NFQUEUE</code>机制的情况下规避该BUG。</p>\n<p>后续有时间再从源码角度分析一下<code>conntrack</code>机制的实现。</p>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://arthurchiao.art/blog/conntrack-design-and-implementation-zh/\">https://arthurchiao.art/blog/conntrack-design-and-implementation-zh/</a></li>\n<li><a href=\"http://cxd2014.github.io/2017/08/15/connection-tracking-system/\">http://cxd2014.github.io/2017/08/15/connection-tracking-system/</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/373060740\">https://zhuanlan.zhihu.com/p/373060740</a></li>\n<li><a href=\"https://www.codedump.info/post/20200128-systemtap-by-example/\">https://www.codedump.info/post/20200128-systemtap-by-example/</a></li>\n<li><a href=\"https://thermalcircle.de/doku.php?id=blog:linux:connection_tracking_1_modules_and_hooks\">https://thermalcircle.de/doku.php?id=blog:linux:connection_tracking_1_modules_and_hooks</a></li>\n</ul>\n","text":"NFQUEUE机制导致DNS请求5秒超时分析在一台CentOS 7.0服务器(内核版本号:3.10.0-123.el7.x86_64)上安装我们的安全防护程序后...","permalink":"/post/LINUX/NFQUEUE机制导致DNS请求5秒超时分析","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"conntrack","slug":"conntrack","count":1,"path":"api/categories/conntrack.json"},{"name":"LINUX","slug":"conntrack/LINUX","count":1,"path":"api/categories/conntrack/LINUX.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"DNS","slug":"DNS","count":1,"path":"api/tags/DNS.json"},{"name":"BUG","slug":"BUG","count":1,"path":"api/tags/BUG.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#NFQUEUE%E6%9C%BA%E5%88%B6%E5%AF%BC%E8%87%B4DNS%E8%AF%B7%E6%B1%825%E7%A7%92%E8%B6%85%E6%97%B6%E5%88%86%E6%9E%90\"><span class=\"toc-text\">NFQUEUE机制导致DNS请求5秒超时分析</span></a></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"mysql GTID主从复制故障后不停机恢复同步流程 - 塔克拉玛攻城狮 - 博客园","uid":"eb41994bab0b8b1a0fef2450d1035786","slug":"MIDDLEWARE/mysql GTID主从复制故障后不停机恢复同步流程 - 塔克拉玛攻城狮 - 博客园","date":"2024-08-19T15:11:26.000Z","updated":"2025-09-30T03:26:53.482Z","comments":true,"path":"api/articles/MIDDLEWARE/mysql GTID主从复制故障后不停机恢复同步流程 - 塔克拉玛攻城狮 - 博客园.json","keywords":"XuGuangSheng","cover":"/covers/mysql-gtid.jpg","text":"mysql GTID主从复制故障后不停机恢复同步流程 - 塔克拉玛攻城狮 - 博客园GTID实现主从复制数据同步 GTID是一个基于原始mysql服务器生成的一...","permalink":"/post/MIDDLEWARE/mysql GTID主从复制故障后不停机恢复同步流程 - 塔克拉玛攻城狮 - 博客园","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"mysql","slug":"mysql","count":1,"path":"api/categories/mysql.json"},{"name":"MIDDLEWARE","slug":"mysql/MIDDLEWARE","count":1,"path":"api/categories/mysql/MIDDLEWARE.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"assets","slug":"assets","count":1,"path":"api/tags/assets.json"},{"name":"cnblogs","slug":"cnblogs","count":1,"path":"api/tags/cnblogs.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Shiro实现session和jwt认证共存【补充篇】","uid":"a16ed64205294beb02f16921cdcc37a9","slug":"JAVA/Shiro实现session和jwt认证共存【补充篇】","date":"2024-07-11T09:28:24.000Z","updated":"2025-09-30T03:26:16.943Z","comments":true,"path":"api/articles/JAVA/Shiro实现session和jwt认证共存【补充篇】.json","keywords":"XuGuangSheng","cover":"/covers/shirosessionjwt.jpg","text":"Shiro实现session和jwt认证共存【补充篇】前言前文 Shiro实现session和无状态token认证共存 保姆级代码，但是不够完善，有些难点不清不...","permalink":"/post/JAVA/Shiro实现session和jwt认证共存【补充篇】","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"session","slug":"session","count":2,"path":"api/categories/session.json"},{"name":"JAVA","slug":"session/JAVA","count":1,"path":"api/categories/session/JAVA.json"}],"tags":[{"name":"jwt","slug":"jwt","count":1,"path":"api/tags/jwt.json"},{"name":"token","slug":"token","count":1,"path":"api/tags/token.json"},{"name":"redis","slug":"redis","count":2,"path":"api/tags/redis.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}