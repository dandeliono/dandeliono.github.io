{"title":"zhcon安装过程记录","uid":"c8fc4014b00b09e3a48ea3095cec49d3","slug":"LINUX/zhcon安装过程记录","date":"2024-05-20T17:35:44.000Z","updated":"2025-09-30T03:26:40.423Z","comments":true,"path":"api/articles/LINUX/zhcon安装过程记录.json","keywords":"XuGuangSheng","cover":"/covers/zhcon.jpg","content":"<h1 id=\"zhcon安装过程记录\"><a href=\"#zhcon安装过程记录\" class=\"headerlink\" title=\"zhcon安装过程记录\"></a>zhcon安装过程记录</h1><p>参考资料：</p>\n<p>　　1. <a href=\"http://www.linuxdiyf.com/viewarticle.php?id=81796\">http://www.linuxdiyf.com/viewarticle.php?id=81796</a></p>\n<p>需要下载的文件有两个：zhcon-0.2.5.tar.gz和zhcon-0.2.5-to-0.2.6.diff.gz。</p>\n<p>下载地址：<a href=\"http://sourceforge.net/project/showfiles.php?group_id=27400\">http://sourceforge.net/project/showfiles.php?group_id&#x3D;27400</a><br>将两个文件下载到&#x2F;root目录下（也可以将文件下载到喜欢的别的目录）。</p>\n<p>1.解压并解包zhcon-0.2.5.tar.gz文件：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span> &amp;&amp; apt-<span class=\"built_in\">get</span> install -<span class=\"keyword\">y</span> build-essential</span><br><span class=\"line\">tar zxvf zhcon-<span class=\"number\">0.2</span>.<span class=\"number\">5</span>.tar.gz</span><br><span class=\"line\"><span class=\"keyword\">cd</span> zhcon-<span class=\"number\">0.2</span>.<span class=\"number\">5</span>   </span><br><span class=\"line\">zcat ../zhcon-<span class=\"number\">0.2</span>.<span class=\"number\">5</span>-<span class=\"keyword\">to</span>-<span class=\"number\">0.2</span>.<span class=\"number\">6</span>.diff.gz | patch -p1  </span><br><span class=\"line\"> ./configure</span><br><span class=\"line\"> <span class=\"keyword\">make</span> </span><br><span class=\"line\"> <span class=\"keyword\">make</span> install</span><br></pre></td></tr></table></figure>\n\n<p>　在这个文档里有几点没有说清楚：</p>\n<ol>\n<li>在使用make编译源代码的时候出现了很多的错误，主要原因有：一些源文件没有引入必要的头文件、缺少常量的宏定义、以及在Makefile文件中的编译依赖中缺少必要的链接包，于是又参考了下面两份资料：</li>\n</ol>\n<p><a href=\"http://blog.sina.com.cn/s/blog_637fe9d80101561k.html\">http://blog.sina.com.cn/s/blog_637fe9d80101561k.html</a></p>\n<p>Linux编程 报错 找不到 term.h和curses.h</p>\n<p>源程序badterm.c如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;term.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;curses.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">setupterm</span>(<span class=\"string\">&quot;unlisted&quot;</span>, <span class=\"built_in\">fileno</span>(stdout), (<span class=\"type\">int</span> *)<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Done.\\\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行编译gcc -o badterm badterm.c -lcurses后报错情报如下：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">term.h:</span> 没有那个文件或目录  </span><br><span class=\"line\"><span class=\"symbol\">curses.h:</span> 没有那个文件或目录</span><br></pre></td></tr></table></figure>\n<p>很明显，程序找不到term.h和curses.h，那么为了安装这两个头文件，就在shell中执行sudo apt-get install libncurses5-dev，之后再执行上述编译命令即可通过。ENJOY！～</p>\n<p><a href=\"http://www.linuxidc.com/Linux/2010-05/26183.htm\">http://www.linuxidc.com/Linux/2010-05/26183.htm</a></p>\n<ol start=\"2\">\n<li>fblinear4.cpp:75: 错误：‘memset’在此作用域中尚未声明</li>\n</ol>\n<p>如果<a href=\"http://www.linuxidc.com/topicnews.aspx?tid=3\" title=\"SUSE\">SUSE</a> 下安装zhcon出问题，这里是第一个报错的地方。我也在网上搜了一下，有人说是gcc4.3开始头文件的变更，让我想起去看看这个版本的时 间，2006-05-04，即便是那个2.6的patch也已经过时了。但毕竟用zhcon的人已经越来越少了，所以我只要把思路给出来，也不去做 patch了。<br>在zhcon的make过程中，有很多次报错，说缺少memset，memcpy等函数的定义，是缺少#include &lt;string.h&gt;；有几次缺少abs，atoi，free等的定义，是缺少#include &lt;stdlib.h&gt;；还有报fd_set结构的定义，是缺少#include &lt;sys&#x2F;select.h&gt;；另外，缺少几个常量定义，我从以前版本的内核头文件中找到，然后写入了src&#x2F;lrmi.c中（好像就是这个 文件缺），共用到如下几个量：  </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VIF_MASK        0x00080000      <span class=\"comment\">/* virtual interrupt flag */</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IF_MASK         0x00000200  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IOPL_MASK       0x00003000  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TF_MASK         0x00000100  </span></span><br></pre></td></tr></table></figure>\n<p>如果有人 遇到同样的问题，希望对你有帮助。</p>\n<p>所有增加的内容，写入到 config.h 中 :  </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &lt;memory.h&gt;  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/select.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VIF_MASK        0x00080000      <span class=\"comment\">/* virtual interrupt flag */</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IF_MASK         0x00000200  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IOPL_MASK       0x00003000  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TF_MASK         0x00000100  </span></span><br></pre></td></tr></table></figure>\n<p>另外这些以后还会有一个文件报错。到时候添加一个 <code>#include &lt;stdlib.h&gt;</code> 即可。</p>\n<p>环境：kernel 2.6.27<br>gcc-4.3.2</p>\n<p>这里讲的将这些缺少的东西写在 configure文件中，我是在每个缺少的文件中都添加上了。</p>\n<ol start=\"3\">\n<li>在参考上面的资料后出现了<code> undefined reference to tgetent</code>的错误，参考<a href=\"http://blog.csdn.net/azhang00000/article/details/2936551\">http://blog.csdn.net/azhang00000/article/details/2936551</a> <br>LINUX readline 库的使用,,<br>编译代码时必须链接libreadline 与libtermcap<br>基只有前者,,将会有如下的链接失败<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> /usr/lib/libreadline.so: undefined reference to <span class=\"string\">`tgetnum&#x27;</span>  </span><br><span class=\"line\"><span class=\"meta\">: /usr/lib/libreadline.so:</span> undefined reference to <span class=\"string\">`tgoto&#x27;</span>  </span><br><span class=\"line\"><span class=\"meta\">: /usr/lib/libreadline.so:</span> undefined reference to <span class=\"string\">`tgetflag&#x27;</span>  </span><br><span class=\"line\"><span class=\"meta\">: /usr/lib/libreadline.so:</span> undefined reference to <span class=\"string\">`BC&#x27;</span>  </span><br><span class=\"line\"><span class=\"meta\">: /usr/lib/libreadline.so:</span> undefined reference to <span class=\"string\">`tputs&#x27;</span>  </span><br><span class=\"line\"><span class=\"meta\">: /usr/lib/libreadline.so:</span> undefined reference to <span class=\"string\">`PC&#x27;</span>  </span><br><span class=\"line\"><span class=\"meta\">: /usr/lib/libreadline.so:</span> undefined reference to <span class=\"string\">`tgetent&#x27;</span>  </span><br><span class=\"line\"><span class=\"meta\">: /usr/lib/libreadline.so:</span> undefined reference to <span class=\"string\">`UP&#x27;</span>  </span><br><span class=\"line\"><span class=\"meta\">: /usr/lib/libreadline.so:</span> undefined reference to <span class=\"string\">`tgetstr&#x27;</span></span><br></pre></td></tr></table></figure>\nMakeifle (eg):<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">read</span>:   <span class=\"keyword\">read</span>.o  </span><br><span class=\"line\">        gcc -o <span class=\"keyword\">read</span> <span class=\"keyword\">read</span>.o -I<span class=\"regexp\">/usr/i</span>nclude -lreadline -ltermcap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">read</span>.o: <span class=\"keyword\">read</span>.c  </span><br><span class=\"line\">        gcc -c <span class=\"keyword\">read</span>.c -lreadline</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p> 在Makefile里增加上面的内容。<br> 从上面的文档中可以知道这个错误是Makefile文件中没有引入 -ltermcap包导致</p>\n<p>参考了上面的文档，然后枯燥的添了一下午的包和头文件终于编译通过，出现了等待已久的运行界面:</p>\n<p><img src=\"https://images0.cnblogs.com/i/608528/201406/262343323361914.png\"></p>\n","text":"zhcon安装过程记录参考资料： 1. http://www.linuxdiyf.com/viewarticle.php?id=81796 需要下载的文件有两个...","permalink":"/post/LINUX/zhcon安装过程记录","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"zhcon","slug":"zhcon","count":1,"path":"api/categories/zhcon.json"},{"name":"LINUX","slug":"zhcon/LINUX","count":1,"path":"api/categories/zhcon/LINUX.json"}],"tags":[{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"http","slug":"http","count":6,"path":"api/tags/http.json"},{"name":"include","slug":"include","count":1,"path":"api/tags/include.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#zhcon%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95\"><span class=\"toc-text\">zhcon安装过程记录</span></a></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"问题排查利器：Linux 原生跟踪工具 Ftrace 必知必会","uid":"90ecd18311a9fc88b1f7131b4ce334a3","slug":"LINUX/问题排查利器：Linux 原生跟踪工具 Ftrace 必知必会","date":"2024-05-29T09:19:10.000Z","updated":"2025-09-30T03:26:44.157Z","comments":true,"path":"api/articles/LINUX/问题排查利器：Linux 原生跟踪工具 Ftrace 必知必会.json","keywords":"XuGuangSheng","cover":"/covers/linux-ftrace.jpg","text":"问题排查利器：Linux 原生跟踪工具 Ftrace 必知必会本文地址：https://www.ebpf.top/post/ftrace_tools TLDR，...","permalink":"/post/LINUX/问题排查利器：Linux 原生跟踪工具 Ftrace 必知必会","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[{"name":"tools","slug":"tools","count":1,"path":"api/categories/tools.json"},{"name":"LINUX","slug":"tools/LINUX","count":1,"path":"api/categories/tools/LINUX.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"kprobe","slug":"kprobe","count":1,"path":"api/tags/kprobe.json"},{"name":"ftrace","slug":"ftrace","count":1,"path":"api/tags/ftrace.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"docker容器内执行linux的dmidecode命令","uid":"c699c53537948b0233bf4a3c00fbe8ed","slug":"OCI/docker容器内执行linux的dmidecode命令","date":"2024-05-15T11:45:44.000Z","updated":"2025-09-30T03:26:57.712Z","comments":true,"path":"api/articles/OCI/docker容器内执行linux的dmidecode命令.json","keywords":"XuGuangSheng","cover":"/covers/dockerlinuxdmidecode.jpg","text":"docker容器内执行linux的dmidecode命令报错：[Errno 2] No such file or directory: ‘dmidecode’:...","permalink":"/post/OCI/docker容器内执行linux的dmidecode命令","photos":[],"count_time":{"symbolsCount":525,"symbolsTime":"1 mins."},"categories":[{"name":"dmidecode","slug":"dmidecode","count":1,"path":"api/categories/dmidecode.json"},{"name":"OCI","slug":"dmidecode/OCI","count":1,"path":"api/categories/dmidecode/OCI.json"}],"tags":[{"name":"docker","slug":"docker","count":4,"path":"api/tags/docker.json"},{"name":"mem","slug":"mem","count":1,"path":"api/tags/mem.json"},{"name":"sbin","slug":"sbin","count":1,"path":"api/tags/sbin.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}