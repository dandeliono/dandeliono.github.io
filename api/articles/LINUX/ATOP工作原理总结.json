{"title":"ATOP工作原理总结","uid":"f25de4e9e0b08e6b09a0adc003a6760d","slug":"LINUX/ATOP工作原理总结","date":"2025-08-05T17:32:37.000Z","updated":"2025-09-30T03:26:30.057Z","comments":true,"path":"api/articles/LINUX/ATOP工作原理总结.json","keywords":"XuGuangSheng","cover":"/covers/atop.jpg","content":"<h1 id=\"ATOP工作原理总结\"><a href=\"#ATOP工作原理总结\" class=\"headerlink\" title=\"ATOP工作原理总结\"></a>ATOP工作原理总结</h1><p>ATOP是一款用于观察Linux性能的ASCII全屏交互式工具。类似于top,每隔一段时间报告 <code>CPU，Memory，Disk，Network</code> 等硬件的性能信息，对于严重过载的资源会高亮显示。 除此之外，还包括进程级的相关统计信息。比如进程的CPU、内存、磁盘利用率，用户名，进程状态，启动时间，进程ID等。对于在上一个周期内退出的进程还会显示退出状态码。所有进程信息默认按CPU占用率降序排列。</p>\n<h2 id=\"运行方式-​\"><a href=\"#运行方式-​\" class=\"headerlink\" title=\"运行方式 ​\"></a>运行方式 <a href=\"#%E8%BF%90%E8%A1%8C%E6%96%B9%E5%BC%8F\">​</a></h2><p><code>atop 3</code>可以按每3秒刷新一次的频率在ASCII屏幕上显示即时性能信息，结果如下图。 可以实时了解当前系统的负载情况，同时具有很强的交互性。比如按键盘上的<code>c</code>可显示运行进程的完整名称（包括参数）。按键<code>m</code>可以按内存利用率降序排序当前进程列表，称之为内存视图。 <img src=\"https://xixiliguo.github.io/img/atop.png\"></p>\n<p><code>atop -a -w /var/log/atop/atop_&#123;HOSTNAME&#125;_20151123 30</code>则每30秒记录一次数据并持久化到atop_{HOSTNAME}_20151123文件里。这样的命令通常被定时任务拉起。当服务器在特定时间点出现异常或者想要查看近几天内的性能信息时，就可以使用<code>atop -r FileName</code>读取文件并查看里面的性能数据。这里列出文件的一些默认设置</p>\n<ul>\n<li>性能收集时间间隔：30s</li>\n<li>文件名：atop_HOSTNAME_CURDAY</li>\n<li>文件保存天数：7days</li>\n<li>文件保存目录：&#x2F;var&#x2F;log&#x2F;atop</li>\n<li>执行ATOP的定时任务脚本：&#x2F;etc&#x2F;cron.d&#x2F;atop</li>\n</ul>\n<p>安装atop后主机上每天都会产生对应的atop文件，但我们执行<code>crontab -l</code>却找不到与atop相关的定时任务，其实它在&#x2F;etc&#x2F;cron.d下面。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>AAA:~ # cat &#x2F;etc&#x2F;cron.d&#x2F;atop<br>0 0 * * * root &#x2F;etc&#x2F;atop&#x2F;atop.daily</p></blockquote>\n<p>cron进程先在<code>/var/spool/cron/tabs</code>目录下搜索以用户名命名的文件，找到就读到内存中，其内容就是<code>crontab -l</code>的输出。接着继续搜索<code>/etc/crontab</code>和 <code>/etc/cron.d</code>目录下的所有文件并读取之。其格式和<code>tabs</code>下的略有不同，主要区别是指定了脚本的执行用户。</p>\n<h2 id=\"原始信息收集-​\"><a href=\"#原始信息收集-​\" class=\"headerlink\" title=\"原始信息收集 ​\"></a>原始信息收集 <a href=\"#%E5%8E%9F%E5%A7%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86\">​</a></h2><p><code>/proc</code>是Linux下一种虚拟文件系统，存储的是当前内核运行状态的一系列特殊文件，用户可以通过查看这些文件了解系统硬件及当前正在运行进程的信息。ATOP正是从<code>/proc</code>下各种文件中读取原始信息，通过采样来计算周期内的即时数据。比如A时间点记录下消耗在用户态的cpu时间和总的CPU时间为<code>M</code>，<code>X</code>。在B时间点记录下此两项对应的值为<code>N</code>，<code>Y</code>。则当前的用户态CPU使用率为<code>(N-M)/(Y-X)</code>。等所有的性能信息都计算加工完毕后,使用libncurses库提供的函数将最终信息打印在字符界面上。</p>\n<p><code>/proc</code>里记录的统计信息（除内存）都是自设备启动以来或者进程启动以来的累积值。如果没具体说明，则本文所讲到的各字段的值默认都是差值,即当前时间点采样值减去先前时间点的采样值.</p>\n<p>本文所有示例在<code>Suse11</code>环境下通过，atop版本为<code>1.27</code>。示例中数据仅为说明，一些影响阅读且与本文无关的内容会删除。如果想要全面了解&#x2F;proc文件系统里文件含义，可以<code>man 5 proc</code></p>\n<h2 id=\"CPU-​\"><a href=\"#CPU-​\" class=\"headerlink\" title=\"CPU ​\"></a>CPU <a href=\"#cpu\">​</a></h2><p>读取<code>/proc/stat</code>获取CPU的统计信息，包括每个CPU和总的CPU信息。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>AAA:~ # cat &#x2F;proc&#x2F;stat<br>cpu 3870117 23378 3233296 139792496 2051527 159950 29648 0 0<br>cpu0 1903376 11614 1577768 70138672 1000644 81353 12021 0 0<br>cpu1 1966740 11763 1655527 69653824 1050882 78597 17626 0 0<br>….<br>btime 1447557115<br>processes 3543228<br>procs_running 1<br>procs_blocked 0</p></blockquote>\n<p>cpuN行后面的数值含义从左到右分别是：user，nice，system，idle，iowait，irq，softirq，steal，guest。单位为jiffies，该值等于<code>1/hertz</code>秒。<code>hertz</code>在大部分系统里为100。可以用如下命令查询：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>AAA:~ # getconf -a | grep TCK<br>CLK_TCK 100</p></blockquote>\n<p>那么当前每个CPU的利用率为：<code>CPU usage = (total - idle - iowait) / total</code> <code>total</code>为cpuN这一行所有值之和.</p>\n<p>顺便介绍下其他几个比较有用的字段含义：</p>\n<ul>\n<li>btime：记录系统开机启动时距1970年1月1号多少秒</li>\n<li>processes (total_forks)：自系统启动以来所创建的任务的数目</li>\n<li>procs_running：当前处于运行队列的进程数</li>\n<li>procs_blocked：当前被阻塞的进程数</li>\n</ul>\n<h2 id=\"Memory-Swap-​\"><a href=\"#Memory-Swap-​\" class=\"headerlink\" title=\"Memory Swap ​\"></a>Memory Swap <a href=\"#memory-swap\">​</a></h2><p>读取<code>/proc/meminfo</code>获取内存统计信息，读取<code>/proc/vmstat</code>获取页交换信息。 在高负荷的服务器里当内存不够用时，OS会将本应写入内存的数据写入到Swap空间，等内存充足时再将SWAP内的数据交换到内在里。内存和Swap 的这种交换过程称为页面交换（Paging），单位为页，大小是4K。 在PAGE这行 <code>swout</code>字段显示一秒中有多少页写入Swap。如果这个值超过10，则内存资源会红色高亮显示。只要该值<code>11 &lt;= X &lt; 10</code>，则表明当前物理内存已经不足，有页交换操作。ATOP会以青灰色高亮内存资源，表示已经出现瓶颈但不是特别严重。</p>\n<ul>\n<li>计算公式为： <code>swouts / nsecs</code></li>\n<li>swouts 从 <code>/proc/vmstat</code> 的 <code>pswpout</code>字段获得</li>\n<li>nescs为采样的时间间隔</li>\n</ul>\n<p>系统自带的<code>vmstat</code>命令也可以观察到<code>SWAP</code>的交换情况，它正是通过读取<code>/proc/vmstat</code>来获取页交换信息的</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>AAA:~ # strace -ftT -e trace&#x3D;open vmstat &gt;&#x2F;dev&#x2F;null<br>09:36:16 open(“&#x2F;etc&#x2F;ld.so.cache”, O_RDONLY) &#x3D; 3 &lt;0.000015&gt;<br>09:36:16 open(“&#x2F;lib64&#x2F;libc.so.6”, O_RDONLY) &#x3D; 3 &lt;0.000014&gt;<br>09:36:16 open(“&#x2F;proc&#x2F;meminfo”, O_RDONLY) &#x3D; 3 &lt;0.000027&gt;<br>09:36:16 open(“&#x2F;proc&#x2F;stat”, O_RDONLY) &#x3D; 4 &lt;0.000018&gt;<br>09:36:16 open(“&#x2F;proc&#x2F;vmstat”, O_RDONLY) &#x3D; 5 &lt;0.000018&gt;</p>\n<p>AAA:~ # cat &#x2F;proc&#x2F;meminfo<br>MemTotal: 7669188 kB<br>MemFree: 1909052 kB<br>Buffers: 424088 kB<br>Cached: 3670052 kB<br>….<br>SwapCached: 0 kB<br>SwapTotal: 8393920 kB<br>SwapFree: 8393920 kB<br>Mapped: 681904 kB<br>….<br>Shmem: 736624 kB<br>Slab: 178552 kB<br>SReclaimable: 139164 kB</p></blockquote>\n<p>上述meminfo文件字段解释：</p>\n<ul>\n<li>MemTotal：所有可用RAM大小（即物理内存减去一些预留位和内核的二进制代码大小）</li>\n<li>MemFree：被系统留着未使用的内存</li>\n<li>Buffers：用来给文件做缓冲大小</li>\n<li>Cached：被高速缓冲存储器（cache memory）用的内存的大小</li>\n<li>SwapTotal: 交换空间的总大小</li>\n<li>SwapFree: 未被使用交换空间的大小</li>\n<li>Slab: 内核数据结构缓存的大小，可以减少申请和释放内存带来的消耗。</li>\n<li>SReclaimable:可收回Slab的大小</li>\n<li>Shmem: 共享内存大小</li>\n</ul>\n<p>内存利用率的公式为：<code>(MemTotal - MemFree - Cached - Buffers) / MemTotal</code>. Shmem这部分内存是包含在Cache里的，其实它是无法被回收的。 所以从ATOP2.0版本开始，该利用用率公式变为：<code>(MemTotal - MemFree - Cached - Buffers +　Shmem) / MemTotal</code> . 这个结果已经非常准确了。</p>\n<p>Swap利用率公式为：<code>(SwapTotal - SwapFree) / SwapTotal</code></p>\n<h2 id=\"Disk-​\"><a href=\"#Disk-​\" class=\"headerlink\" title=\"Disk ​\"></a>Disk <a href=\"#disk\">​</a></h2><p>读取&#x2F;proc&#x2F;diskstats获取磁盘信息。从左至右分别对应主设备号，次设备号和设备名称。后续的11个列解释如下，除了第9个列外所有的列都是从启动时的累积值。</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">AAA</span>:~ # cat /proc/diskstats </span><br><span class=\"line\"> <span class=\"attribute\">8</span>       <span class=\"number\">0</span> sda <span class=\"number\">139119</span> <span class=\"number\">267262</span> <span class=\"number\">3848795</span> <span class=\"number\">1357456</span> <span class=\"number\">3942149</span> <span class=\"number\">4733328</span> <span class=\"number\">62031044</span> <span class=\"number\">62148876</span> <span class=\"number\">0</span> <span class=\"number\">36083024</span> <span class=\"number\">63502552</span></span><br><span class=\"line\"> <span class=\"attribute\">8</span>       <span class=\"number\">1</span> sda1 <span class=\"number\">27</span> <span class=\"number\">415</span> <span class=\"number\">1388</span> <span class=\"number\">472</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">452</span> <span class=\"number\">472</span></span><br><span class=\"line\"> <span class=\"attribute\">8</span>       <span class=\"number\">2</span> sda2 <span class=\"number\">83999</span> <span class=\"number\">87253</span> <span class=\"number\">1992917</span> <span class=\"number\">588124</span> <span class=\"number\">883514</span> <span class=\"number\">1359683</span> <span class=\"number\">17920106</span> <span class=\"number\">16570224</span> <span class=\"number\">0</span> <span class=\"number\">6728052</span> <span class=\"number\">17157604</span></span><br><span class=\"line\"> <span class=\"attribute\">8</span>       <span class=\"number\">3</span> sda3 <span class=\"number\">4</span> <span class=\"number\">0</span> <span class=\"number\">14</span> <span class=\"number\">84</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">84</span> <span class=\"number\">84</span></span><br><span class=\"line\"> <span class=\"attribute\">8</span>       <span class=\"number\">5</span> sda5 <span class=\"number\">49767</span> <span class=\"number\">174838</span> <span class=\"number\">1493156</span> <span class=\"number\">706492</span> <span class=\"number\">1414495</span> <span class=\"number\">2617855</span> <span class=\"number\">32228098</span> <span class=\"number\">19276908</span> <span class=\"number\">0</span> <span class=\"number\">14162008</span> <span class=\"number\">19981604</span></span><br><span class=\"line\"> <span class=\"attribute\">8</span>       <span class=\"number\">6</span> sda6 <span class=\"number\">5257</span> <span class=\"number\">4121</span> <span class=\"number\">359986</span> <span class=\"number\">60828</span> <span class=\"number\">726761</span> <span class=\"number\">755790</span> <span class=\"number\">11882840</span> <span class=\"number\">13347236</span> <span class=\"number\">0</span> <span class=\"number\">6084640</span> <span class=\"number\">13407536</span></span><br><span class=\"line\"> <span class=\"attribute\">8</span>       <span class=\"number\">7</span> sda7 <span class=\"number\">20</span> <span class=\"number\">194</span> <span class=\"number\">428</span> <span class=\"number\">508</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">496</span> <span class=\"number\">508</span></span><br><span class=\"line\"> <span class=\"attribute\">8</span>       <span class=\"number\">8</span> sda8 <span class=\"number\">21</span> <span class=\"number\">405</span> <span class=\"number\">426</span> <span class=\"number\">604</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">400</span> <span class=\"number\">604</span></span><br><span class=\"line\"> <span class=\"attribute\">7</span>       <span class=\"number\">0</span> loop0 <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第1列：读磁盘的次数，成功完成读的总次数。</li>\n<li>第2列：合并读次数，为了效率可能会合并相邻的读和写。从而两次4K的读在它最终被处理到磁盘上之前可能会变成一次8K的读，才被计数（和排队），因此只有一次I&#x2F;O操作。这个域使你知道这样的操作有多频繁。</li>\n<li>第3列：读扇区的次数，成功读过的扇区总次数。</li>\n<li>第4列：读花费的毫秒数，这是所有读操作所花费的毫秒数（用__make_request()到end_that_request_last()测量）。</li>\n<li>第5列：写完成的次数，成功写完成的总次数。</li>\n<li>第6列：合并写次数</li>\n<li>第7列：写扇区的次数，成功写扇区总次数。</li>\n<li>第8列：写花费的毫秒数，这是所有写操作所花费的毫秒数（用__make_request()到end_that_request_last()测量）。</li>\n<li>第9列：I&#x2F;O的当前进度，只有这个域应该是0。当请求被交给适当的request_queue_t时增加和请求完成时减小。</li>\n<li>第10列：花在I&#x2F;O操作上的毫秒数，这个域会增长只要field 9不为0。</li>\n<li>第11列：加权， 花在I&#x2F;O操作上的毫秒数，在每次I&#x2F;O开始，I&#x2F;O结束，I&#x2F;O合并时这个域都会增加。这可以给I&#x2F;O完成时间和存储那些可以累积的提供一个便利的测量标准。</li>\n</ul>\n<p>下面表格列出常用字段的计算方法，表中的<code>第X列</code>是指<code>/proc/diskstats</code>文件里的对应列的差值（即两次采样点所得值的差值）</p>\n<table>\n<thead>\n<tr>\n<th>ATOP字段</th>\n<th>含义</th>\n<th>计算公式</th>\n<th>单位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MBr&#x2F;s</td>\n<td>平均每秒读数据量</td>\n<td>第3列 * 2 &#x2F; 1024 &#x2F; nsecs</td>\n<td>MB&#x2F;s</td>\n</tr>\n<tr>\n<td>MBw&#x2F;s</td>\n<td>平均1秒内写数据量</td>\n<td>第7列* 2 &#x2F; 1024 &#x2F; nsecs</td>\n<td>MB&#x2F;s</td>\n</tr>\n<tr>\n<td>avio</td>\n<td>IO操作的平均操作时长</td>\n<td>第10列 &#x2F; iotot</td>\n<td>ms</td>\n</tr>\n<tr>\n<td>avq</td>\n<td>平均阵列深度，即加权后的IO操作时长</td>\n<td>第11列&#x2F;iotot</td>\n<td>ms</td>\n</tr>\n<tr>\n<td>busy</td>\n<td>磁盘利用率</td>\n<td>第10列 &#x2F; mstot</td>\n<td>百分比</td>\n</tr>\n</tbody></table>\n<ul>\n<li>nsecs：采样时间间隔</li>\n<li>iotot：读写次数之和，即第1列+第5列</li>\n<li>mstot：利用CPU数据计算的平均间隔时间，单位是毫秒。公式为<code>cputot * 1000 / hertz / nrcpu</code></li>\n<li>cputot：两次采样点之间所有cpu的消耗时间之和, 单位是 jiffies</li>\n<li>hertz：100 表示1秒内有100个jiffies</li>\n<li>nrcpu：主机CPU个数</li>\n</ul>\n<p>如果avq远大于avio,则说明IO大部分消耗在等待和排队中，而不是数据传输本身。</p>\n<h2 id=\"Network-​\"><a href=\"#Network-​\" class=\"headerlink\" title=\"Network ​\"></a>Network <a href=\"#network\">​</a></h2><p>读取&#x2F;proc&#x2F;net&#x2F;dev获取所有网卡信息</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>AAA:~ # cat &#x2F;proc&#x2F;net&#x2F;dev<br>Inter-| Receive | Transmit<br>face |bytes packets errs drop fifo frame compressed multicast|bytes packets errs drop fifo colls carrier compressed<br>lo:5993298914 41500939 0 0 0 0 0 0 5993298914 41500939 0 0 0 0 0 0<br>eth0: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br>eth4:46036327 544231 0 0 0 0 0 1 31411179 41268 0 0 0 0 0 0<br>eth5:48454032 556137 0 0 0 0 0 30920 3808752 7778 0 0 0 0 0 0<br>eth2: 7766519 106577 0 0 0 0 0 3428 531166 7950 0 0 0 0 0 0<br>eth3:50947490 669306 0 0 0 0 0 30980 680 8 0 0 0 0 0 0<br>bond1:94490359 1100368 0 0 0 0 0 30921 35219931 49046 0 0 0 0 0 0<br>AAA:~ #</p></blockquote>\n<ul>\n<li>最左边的表示接口的名字，Receive表示收包，Transmit表示发包。</li>\n<li>bytes：收发的字节数</li>\n<li>packets：表示收发正确的包量</li>\n<li>errs：表示收发错误的包量</li>\n<li>drop：表示收发丢弃的包量</li>\n<li>上面四个值是自网卡启动以来的累积值, 执行<code>ifconfig ethX down;ifconfig ethX up</code>会清零这些值</li>\n</ul>\n<p>网卡的带宽和双工模式并不是从<code>/proc</code>读取，而是通过类似下面的代码获取。</p>\n<p>c</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/ethtool.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/sockios.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/if.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"type\">int</span> sockfd;</span><br><span class=\"line\"> <span class=\"keyword\">struct</span> <span class=\"title class_\">ifreq</span> ifreq;</span><br><span class=\"line\"> <span class=\"keyword\">struct</span> <span class=\"title class_\">ethtool_cmd</span> \tethcmd;</span><br><span class=\"line\"> sockfd = <span class=\"built_in\">socket</span>(AF_INET, SOCK_DGRAM, <span class=\"number\">0</span>);</span><br><span class=\"line\"> <span class=\"built_in\">memset</span>(&amp;ifreq, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> ifreq);</span><br><span class=\"line\"> <span class=\"built_in\">memset</span>(&amp;ethcmd, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> ethcmd);</span><br><span class=\"line\"> <span class=\"built_in\">strncpy</span>((<span class=\"type\">void</span> *)&amp;ifreq.ifr_ifrn.ifrn_name, <span class=\"string\">&quot;eth4&quot;</span>,</span><br><span class=\"line\"> <span class=\"keyword\">sizeof</span> ifreq.ifr_ifrn.ifrn_name<span class=\"number\">-1</span>);</span><br><span class=\"line\"> ifreq.ifr_ifru.ifru_data = (<span class=\"type\">void</span> *)&amp;ethcmd;</span><br><span class=\"line\"> ethcmd.cmd = ETHTOOL_GSET;</span><br><span class=\"line\"> <span class=\"built_in\">ioctl</span>(sockfd, SIOCETHTOOL, &amp;ifreq);</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;speed is %d Mb, mode is %s duplex\\n&quot;</span>,ethcmd.speed,ethcmd.duplex ? <span class=\"string\">&quot;Full&quot;</span> : <span class=\"string\">&quot;Half&quot;</span>);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://www.linuxjournal.com/node/6908/\">这篇文章</a>详细地介绍了ETHTOOL 这个操作，只需要配合ioctl就可以获得网卡的全部信息。Linux下的ethtool工具也是通过这种方式查询网卡驱动和配置信息。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>AAA:~ # strace -ftT -e trace&#x3D;ioctl ethtool eth4 &gt;&#x2F;dev&#x2F;null<br>11:31:48 ioctl(1, SNDCTL_TMR_TIMEBASE or TCGETS, 0x7fffca09bb30) &#x3D; -1 ENOTTY (Inappropriate ioctl for device) &lt;0.000012&gt;<br>11:31:48 ioctl(3, SIOCETHTOOL, 0x7fffca09cb10) &#x3D; 0 &lt;0.000017&gt;<br>11:31:48 ioctl(3, SIOCETHTOOL, 0x7fffca09cb10) &#x3D; 0 &lt;0.000012&gt;<br>11:31:48 ioctl(3, SIOCETHTOOL, 0x7fffca09cb10) &#x3D; 0 &lt;0.000025&gt;<br>11:31:48 ioctl(3, SIOCETHTOOL, 0x7fffca09cb10) &#x3D; 0 &lt;0.000027&gt;<br>AAA:~ #</p></blockquote>\n<p>网卡利用率的计算方法如下： 全双工： 获取rbytes与wbytes中的最大值A, curspeed &#x3D; A * 8 &#x2F; 1000 单双工： curspeed &#x3D; (rbytes + wbytes) * 8 &#x2F; 1000 最终利用率的公式： curspeed &#x2F; （网卡带宽 * 1000）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>rbytes和wbytes是从&#x2F;proc&#x2F;net&#x2F;dev读取 <code>* 8</code> 是把 bytes 转化为 bit, <code>/ 1000</code> 单位变为 Kb, 通过SIOCETHTOOL获得的带宽是Mb, 所以 <code>* 1000</code> 转换为Kb</p></blockquote>\n<p>atop预设了针对每个资源（如CPU，Memory)的阈值， 如果当前利用率超过了阈值，则会将该资源红色高亮显示。 当达到阈值的80%时，使用青灰色高亮显示。这些值可以用户自定义。如下是资源及对应的默认阈值：</p>\n<table>\n<thead>\n<tr>\n<th>资源</th>\n<th>阈值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CPU</td>\n<td>90%</td>\n</tr>\n<tr>\n<td>内存</td>\n<td>90%</td>\n</tr>\n<tr>\n<td>Swap</td>\n<td>80%</td>\n</tr>\n<tr>\n<td>磁盘</td>\n<td>70%</td>\n</tr>\n<tr>\n<td>网卡</td>\n<td>90%</td>\n</tr>\n</tbody></table>\n<p>默认进程列表是按CPU排序的。按<code>A</code>会自动依照当前过载最严重的资源排序当前进程列表。如何检测谁是最严重过载的资源。做法是将每个资源自身的利用率进行加权处理(即除以自身的过载阈值），然后选择最大的那个。举例如下：</p>\n<table>\n<thead>\n<tr>\n<th>资源</th>\n<th>当前利用率</th>\n<th>加权公式</th>\n<th>加权结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CPU</td>\n<td>70%</td>\n<td>70% &#x2F; 90%</td>\n<td>77%</td>\n</tr>\n<tr>\n<td>内存</td>\n<td>90%</td>\n<td>90% &#x2F; 90%</td>\n<td>100%</td>\n</tr>\n<tr>\n<td>Swap</td>\n<td>0%</td>\n<td>70% &#x2F; 80%</td>\n<td>0%</td>\n</tr>\n<tr>\n<td>磁盘</td>\n<td>80%</td>\n<td>80% &#x2F; 70%</td>\n<td>114%</td>\n</tr>\n<tr>\n<td>网卡</td>\n<td>20%</td>\n<td>20% &#x2F; 90%</td>\n<td>22%</td>\n</tr>\n</tbody></table>\n<p>这样ATOP判断当前最严重过载的资源是磁盘，则进程按磁盘利用率降序排列。我们经常遇到的都是高负载服务器，使用<code>A</code>能自动判断当前资源瓶颈在哪块，并显示导致相关资源极度紧张的TOP进程。对排查问题很有帮助。这里有一种特殊情况，当最严重过载资源是内存且加权后低于70%， 则仍按CPU排序。</p>\n<p>c</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">** if the system is hardly loaded, still CPU-ordering of</span></span><br><span class=\"line\"><span class=\"comment\">** processes is most interesting (instead of memory)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (highbadness &lt; 70 <span class=\"variable\">&amp;&amp;</span> <span class=\"comment\">*highorderp == MSORTMEM)</span></span><br><span class=\"line\"><span class=\"comment\"> *highorderp = MSORTCPU;</span></span><br></pre></td></tr></table></figure>\n","text":"ATOP工作原理总结ATOP是一款用于观察Linux性能的ASCII全屏交互式工具。类似于top,每隔一段时间报告 CPU，Memory，Disk，Networ...","permalink":"/post/LINUX/ATOP工作原理总结","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"proc","slug":"proc","count":2,"path":"api/categories/proc.json"},{"name":"LINUX","slug":"proc/LINUX","count":2,"path":"api/categories/proc/LINUX.json"}],"tags":[{"name":"CPU","slug":"CPU","count":3,"path":"api/tags/CPU.json"},{"name":"atop","slug":"atop","count":2,"path":"api/tags/atop.json"},{"name":"AAA","slug":"AAA","count":1,"path":"api/tags/AAA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ATOP%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">ATOP工作原理总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E6%96%B9%E5%BC%8F-%E2%80%8B\"><span class=\"toc-text\">运行方式 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%A7%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E2%80%8B\"><span class=\"toc-text\">原始信息收集 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CPU-%E2%80%8B\"><span class=\"toc-text\">CPU </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Memory-Swap-%E2%80%8B\"><span class=\"toc-text\">Memory Swap </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Disk-%E2%80%8B\"><span class=\"toc-text\">Disk </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Network-%E2%80%8B\"><span class=\"toc-text\">Network </span></a></li></ol></li></ol>","author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Linux 下常用命令与技巧汇总","uid":"dbdd74b0108262782d34164391ad385e","slug":"LINUX/Linux 下常用命令与技巧汇总","date":"2025-08-05T17:32:52.000Z","updated":"2025-09-30T03:26:33.132Z","comments":true,"path":"api/articles/LINUX/Linux 下常用命令与技巧汇总.json","keywords":"XuGuangSheng","cover":"/covers/linux.jpg","text":"Linux 下常用命令与技巧汇总收集自己常用到的linux命令与技巧,方便后续查找.不定期更新. 1. 查询系统准确的启动时间 ​bash 12date -d ...","permalink":"/post/LINUX/Linux 下常用命令与技巧汇总","photos":[],"count_time":{"symbolsCount":"58k","symbolsTime":"52 mins."},"categories":[{"name":"bash","slug":"bash","count":2,"path":"api/categories/bash.json"},{"name":"LINUX","slug":"bash/LINUX","count":2,"path":"api/categories/bash/LINUX.json"}],"tags":[{"name":"https","slug":"https","count":44,"path":"api/tags/https.json"},{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"redhat","slug":"redhat","count":1,"path":"api/tags/redhat.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Linux 扩容 根分区(LVM+非LVM)","uid":"039f48a281ee50d74a45933d415e35b5","slug":"LINUX/Linux 扩容 根分区(LVM+非LVM)","date":"2025-08-01T14:54:34.000Z","updated":"2025-09-30T03:26:33.796Z","comments":true,"path":"api/articles/LINUX/Linux 扩容 根分区(LVM+非LVM).json","keywords":"XuGuangSheng","cover":"/covers/linux-lvm-lvm.jpg","text":"Linux 扩容 / 根分区(LVM+非LVM)目录： 1，概述 2，CentOS7，LVM根分区扩容步骤 3，CentOS7，非LVM根分区扩容步骤： 一、背...","permalink":"/post/LINUX/Linux 扩容 根分区(LVM+非LVM)","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"https","slug":"https","count":12,"path":"api/categories/https.json"},{"name":"LINUX","slug":"https/LINUX","count":1,"path":"api/categories/https/LINUX.json"}],"tags":[{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"pic","slug":"pic","count":2,"path":"api/tags/pic.json"},{"name":"zhimg","slug":"zhimg","count":2,"path":"api/tags/zhimg.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}