{"name":"JVM","slug":"JVM","count":6,"postlist":[{"title":"一次完整的JVM堆外内存泄漏故障排查记录","uid":"d1455563815fa1914c63f89b230d2e22","slug":"JAVA/一次完整的JVM堆外内存泄漏故障排查记录","date":"2024-04-03T11:02:02.000Z","updated":"2025-09-30T03:26:23.837Z","comments":true,"path":"api/articles/JAVA/一次完整的JVM堆外内存泄漏故障排查记录.json","keywords":"XuGuangSheng","cover":"/covers/jvm.jpg","text":"一次完整的JVM堆外内存泄漏故障排查记录前言记录一次线上JVM堆外内存泄漏问题的排查过程与思路，其中夹带一些JVM内存分配机制以及常用的JVM问题排查指令和工具...","permalink":"/post/JAVA/一次完整的JVM堆外内存泄漏故障排查记录","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"https","slug":"https","count":12,"path":"api/categories/https.json"},{"name":"JAVA","slug":"https/JAVA","count":5,"path":"api/categories/https/JAVA.json"}],"tags":[{"name":"com","slug":"com","count":26,"path":"api/tags/com.json"},{"name":"JVM","slug":"JVM","count":6,"path":"api/tags/JVM.json"},{"name":"gitee","slug":"gitee","count":1,"path":"api/tags/gitee.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结","uid":"127dff9b19567a7dce7fda63128b9f65","slug":"JAVA/JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结","date":"2024-04-03T09:43:02.000Z","updated":"2025-09-30T03:26:12.107Z","comments":true,"path":"api/articles/JAVA/JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结.json","keywords":"XuGuangSheng","cover":"/covers/jvmkubernetespodoomkilled.jpg","text":"JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结承接上文在整个JVM进程体系而言，不仅仅只包含了Heap堆内存...","permalink":"/post/JAVA/JVM内存与Kubernetes中pod的内存、容器的内存不一致所引发的OOMKilled问题总结","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"MaxDirectMemorySize","slug":"MaxDirectMemorySize","count":1,"path":"api/categories/MaxDirectMemorySize.json"},{"name":"JAVA","slug":"MaxDirectMemorySize/JAVA","count":1,"path":"api/categories/MaxDirectMemorySize/JAVA.json"}],"tags":[{"name":"JVM","slug":"JVM","count":6,"path":"api/tags/JVM.json"},{"name":"java","slug":"java","count":2,"path":"api/tags/java.json"},{"name":"direct","slug":"direct","count":1,"path":"api/tags/direct.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"C2 CompilerThread9 长时间占用CPU解决方案","uid":"ad2282a09eaef1269a01ab0f55818331","slug":"JAVA/C2 CompilerThread9 长时间占用CPU解决方案","date":"2023-11-02T18:06:45.000Z","updated":"2025-09-30T03:26:07.848Z","comments":true,"path":"api/articles/JAVA/C2 CompilerThread9 长时间占用CPU解决方案.json","keywords":"XuGuangSheng","cover":"/covers/c2-compilerthread9-cpu.jpg","text":"一、描述：异常线程的堆栈如下：1234567`\"C2 CompilerThread9\" #48 daemon prio=9 os_prio=0 tid=0x00...","permalink":"/post/JAVA/C2 CompilerThread9 长时间占用CPU解决方案","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"JIT","slug":"JIT","count":2,"path":"api/categories/JIT.json"},{"name":"JAVA","slug":"JIT/JAVA","count":2,"path":"api/categories/JIT/JAVA.json"}],"tags":[{"name":"编译","slug":"编译","count":1,"path":"api/tags/编译.json"},{"name":"编译器","slug":"编译器","count":1,"path":"api/tags/编译器.json"},{"name":"JVM","slug":"JVM","count":6,"path":"api/tags/JVM.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"使用线程池时候当程序结束时候记得调用shutdown关闭线程池","uid":"c154332e2066fa4ee3ef3036412a15b5","slug":"JAVA/使用线程池时候当程序结束时候记得调用shutdown关闭线程池","date":"2022-07-26T10:03:32.000Z","updated":"2025-09-30T03:26:25.895Z","comments":true,"path":"api/articles/JAVA/使用线程池时候当程序结束时候记得调用shutdown关闭线程池.json","keywords":"XuGuangSheng","cover":"/covers/shutdown.jpg","text":"使用线程池时候当程序结束时候记得调用shutdown关闭线程池使用线程池时候当程序结束时候记得调用 shutdown 关闭线程池日常开发中为了便于线程的有效复用...","permalink":"/post/JAVA/使用线程池时候当程序结束时候记得调用shutdown关闭线程池","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"shutdown","slug":"shutdown","count":1,"path":"api/categories/shutdown.json"},{"name":"JAVA","slug":"shutdown/JAVA","count":1,"path":"api/categories/shutdown/JAVA.json"}],"tags":[{"name":"JVM","slug":"JVM","count":6,"path":"api/tags/JVM.json"},{"name":"使用线程池时候当程序结束时候记得调用","slug":"使用线程池时候当程序结束时候记得调用","count":1,"path":"api/tags/使用线程池时候当程序结束时候记得调用.json"},{"name":"关闭线程池","slug":"关闭线程池","count":1,"path":"api/tags/关闭线程池.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"虚拟机深层系列「GC本质底层机制」SafePoint的深入分析和底层原理探究指南","uid":"6302f7b0274d5a479bc686d3d275831e","slug":"JAVA/虚拟机深层系列「GC本质底层机制」SafePoint的深入分析和底层原理探究指南","date":"2021-10-24T13:41:42.000Z","updated":"2025-09-30T03:26:28.408Z","comments":true,"path":"api/articles/JAVA/虚拟机深层系列「GC本质底层机制」SafePoint的深入分析和底层原理探究指南.json","keywords":"XuGuangSheng","cover":"/covers/gcsafepoint.jpg","text":"虚拟机深层系列「GC本质底层机制」SafePoint的深入分析和底层原理探究指南SafePoint 前提介绍在高度优化的现代 JVM 里，Safepoint 有...","permalink":"/post/JAVA/虚拟机深层系列「GC本质底层机制」SafePoint的深入分析和底层原理探究指南","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"safepoint","slug":"safepoint","count":1,"path":"api/categories/safepoint.json"},{"name":"JAVA","slug":"safepoint/JAVA","count":1,"path":"api/categories/safepoint/JAVA.json"}],"tags":[{"name":"JVM","slug":"JVM","count":6,"path":"api/tags/JVM.json"},{"name":"mutator","slug":"mutator","count":1,"path":"api/tags/mutator.json"},{"name":"safe","slug":"safe","count":1,"path":"api/tags/safe.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"JIT编译器（Just In Time编译器）","uid":"c656f0476e6a10c5f9016d53a17b0bf8","slug":"JAVA/JIT编译器（Just In Time编译器）","date":"2021-10-07T22:17:49.000Z","updated":"2025-09-30T03:26:11.023Z","comments":true,"path":"api/articles/JAVA/JIT编译器（Just In Time编译器）.json","keywords":"XuGuangSheng","cover":"/covers/jitjust-in-time.jpg","text":"JIT编译器（Just In Time编译器）前提概要 我们都知道开发语言整体分为两类，一类是编译型语言，一类是解释型语言。那么你知道二者有何区别吗？编译器和解...","permalink":"/post/JAVA/JIT编译器（Just In Time编译器）","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"JIT","slug":"JIT","count":2,"path":"api/categories/JIT.json"},{"name":"JAVA","slug":"JIT/JAVA","count":2,"path":"api/categories/JIT/JAVA.json"}],"tags":[{"name":"JVM","slug":"JVM","count":6,"path":"api/tags/JVM.json"},{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"},{"name":"Client","slug":"Client","count":2,"path":"api/tags/Client.json"}],"author":{"name":"dandeliono","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/29496357","link":"/","description":"永远相信美好的事情即将发生","socials":{"github":"https://github.com/dandeliono","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}